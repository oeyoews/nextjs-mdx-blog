[{"title":"埃里克·舒尔曼","caption":"Eric Shulman","created":"20230102054921481","creator":"马不前","modified":"20230102062051727","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Eric Shulman\n\n''论坛管理员之一，友好的新手帮助者，发明了很多小工具''\n\n[[github|https://github.com/ericshulman]]\n\n[[个人网站|https://tiddlytools.com/]]\n\n因为他的图片是一个大胡子形象，所以我平时也会称其为大胡子。他发明了很多小工具，大部分很有用，但形象简陋，且没有封装成插件形式。但仍值得去看一看，像一个百宝箱一样，他也是和[[杰里米·拉斯顿]]一同开发tiddlywiki的。"},{"title":"艾琳·纳普","caption":"Irene Knapp","created":"20230102065542597","creator":"马不前","modified":"20230102065622571","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Irene Knapp\n\n[[github|https://github.com/IreneKnapp]]"},{"title":"安装报错丢失 ffmpeg.dll","created":"20230628051557196","creator":"林一二","modified":"20230628051800607","modifier":"林一二","tags":"排查问题 TidGi太记","text":"太记在精简版 Win10 系统等老系统上安装时，可能会报错缺失 dll。\n\n这时安装一个 [ext[Steam桌面版|https://store.steampowered.com/]] （可能还需要随便装个游戏？），Steam 电脑大师会自动修复电脑上不利于游戏安装的依赖库缺失问题。"},{"title":"安装插件","class":"autonumhead","created":"20211011142339728","creator":"林一二","modified":"20230227022203095","modifier":"林一二","tags":"安装和删除插件","type":"text/vnd.tiddlywiki","text":"* 使用[[单页面HTML]]（例如从官网下载的纯净版）时，Wiki是没有自带第三方插件源的，你可能需要先[[安装CPL插件源]]，才能从第三方插件源安装[[钓鱼插件]]、目录树插件等。\n* 在使用[[太记|TidGi太记]]时，插件源已经预装了，可以直接开始使用。\n\n!! 使用插件源\n\n{{使用插件源}}\n\n!! 拖入别的Wiki里的插件\n\n{{拖入别的Wiki里的插件}}\n\n!! 修改插件文件夹（高级）\n\n{{修改插件文件夹}}"},{"title":"安装和删除插件","created":"20211011135100118","creator":"林一二","modified":"20221227072138383","modifier":"WhiteFall","tags":"基础知识 插件使用","type":"text/vnd.tiddlywiki","text":"插件在太微里也只不过是一些打包好的条目，插件作者有时候会先创建几个带有[[宏]]、[[JavaScript]]或 CSS 的条目，然后在一段时间后将它们放到一个单独的文件夹里，加上 `plugin.info` 文件，就做成了一个插件，可以分发给更多人使用。\n\n<$list filter=\"[tag<currentTiddler>]+[kin::to{currentTiddler}]\">\n\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>"},{"title":"安装CPL插件源","created":"20220118033240626","creator":"林一二","modified":"20230227022203093","modifier":"林一二","tags":"使用插件源","type":"text/vnd.tiddlywiki","text":"安装中文插件源CPL：打开它的[[首页|https://tw-cpl.netlify.app/#Index]]，按文本提示拖动其上的链接到你的 Wiki 里即可。对拖动操作不了解的话，可以查看[[拖动资源]]。"},{"title":"安卓WebDAV Pro 1.17","created":"20230616100048377","creator":"WhiteFall","modified":"20230616103058747","modifier":"WhiteFall","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"WebDAV.Pro_1.17.apk（最后更新于2015年2月2日）\n\nwebdav安卓版服务器: \n\nhttps://raw.githubusercontent.com/tiddly-gittly/TWPUB-BOOK/main/other/WebDAV.Pro_1.17.apk\n\n\n;问：浏览器访问时出现中文字符乱码。\n:答：使用charset插件修改浏览器编码方式。\n\n;问：非移动服务端设备访问太微，点击保存按钮无响应。\n:答：这可能是局域网网速太感人了，你可以等待一分钟看看。或者在移动服务器的浏览器中打开太微文档保存试试看，如果移动服务器中保存动作反应迅速，那很可能就是网速的问题。\n\n;Bug\n:第一个就是使用浏览器访问，目录中含有的中文会乱码，第二个就是自定义主目录已经失效。\n\n反编译后的软件软件文档仓库:http://github.com/Zacharia2/WebDavServer\n\n\n----\n\n如果是手机作为热点电脑连接手机WiFi的话，需要webdav设置中更改网络接口为环回（127.0.0.1）然后PC端点击WiFi找到已连接手机WiFi的属性，查看IPv4 DNS服务器地址（或者网关），这个地址就是手机的IP地址。\n\n访问太微：`http://IPv4 DNS服务器地址/文件夹/太微.html`\n\n相对于RCX可能足够简单，足够轻巧仅仅2兆。\n\n你可以局域网中任何一个安卓设备开启此服务器，然后用任意的设备，任意的浏览器访问太微\n\n\nWebDAV.PRO是一款安卓的webdav服务器，这意味着：\n你可以随时把你的资料放到手机上，在手机上存储，用手机的浏览器访问并保存太微。推荐用tiddloid连接webdav.pro。（仍然无法解决底部出现代码的问题，只能等待作者修复啦。）在访问列表快速打开太微。\n\n你可以通过WIFI局域网在电脑上访问存储在你手机的太微。\n\n你可以使用电脑端的文件资源管理器添加或删除你手机中的资料。\n\n\n作者似乎提供了移动网络访问、蓝牙、以太网等访问方式，均已失效，感兴趣的小伙伴可以用jadx反编译重新添加一下功能。\n\n\n本机地址可以这样填写\n`http://localhost:8080/文件夹/太微.html`\n\nWiFi环境可以按照提示的地址填写\n`http://192.168.X.X:8080/文件夹/太微.html`\n\n\nTiddloid安卓\nwebdav服务器地址填：`http://localhost:8080/文件夹/太微.html`\n好处：拥有太微列表和备份功能，可以在桌面新建快捷方式。\n\n让手机作为你的太微移动存储服务器吧！——将一切资料存储在手机中随时随地不受任何限制访问。"},{"title":"按条目名称批量操作","created":"20220815044558704","creator":"Miao","modified":"20230516133844929","modifier":"马不前","tags":"自动化 筛选器类","type":"text/vnd.tiddlywiki","text":"过滤器表达式：[!is[system]search[条目名称]]\n\n表达式含义：筛选出非系统类别的条目，将得到的结果继续用作搜索含有<条目名称>的条目。筛选后的结果将在下方以列表的形式显示。\n\n快捷键Ctrl+Shift+A打开高级搜索-筛选，填入表达式，并把条目名称改为需要查找的名称。之后按对应的按钮批量导出或者删除。\n\n[img[批量导出或操作.png]]\n\n\n你也可以使用批量导出仅导出自己写的条目。用于资料备份或者转移到新的太微中。\n"},{"title":"凹夫几","created":"20230102070937557","creator":"马不前","modified":"20230102083441883","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"''钓鱼插件开发者''\n\n[[github|https://github.com/oflg]]"},{"title":"巴基·基夫","caption":"BuggyJef","created":"20230102055722499","creator":"马不前","modified":"20230102055803888","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! BuggyJef\n\n[[github|https://github.com/buggyj]]"},{"title":"把变量结果展示在文本里","created":"20230107090829166","creator":"林一二","modified":"20230107093010107","modifier":"林一二","tags":"变量 文本拼接","type":"text/vnd.tiddlywiki","text":"!! 直接展示\n\n太微里[[宏]]和变量使用的方法是统一的，都是两个尖括号。\n\n```tw5\n<<xxx>>\n```\n\n!! 拼上东西再展示\n\n<<reuse-tiddler \"在宏里使用变量\">>\n"},{"title":"把筛选器结果展示在文本里","created":"20230107085148765","creator":"林一二","modified":"20230107090850614","modifier":"林一二","tags":"筛选器 文本拼接","type":"text/vnd.tiddlywiki","text":"!! 使用 Text 微件\n\n类似[[在微件参数中使用筛选器]]使用三花括号获得筛选器的结果，作为[[嵌入]]的输入。然后再把嵌入的内容作为 Text 微件的 text 参数的输入，微件会把 text 参数的内容展示出来。\n\n```tw5\n<$text text={{{ [{!!endDate}divide{!!startDate}] }}} />\n```"},{"title":"白板画图插件分享","created":"20230427022006116","creator":"林一二","modified":"20230427144809757","modifier":"林一二","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1qs4y1A7Tt/"},{"title":"搬运海外的太微视频","created":"20220527053542365","creator":"林一二","modified":"20230530103147660","modifier":"马不前","tags":"任务 B站直播","type":"text/vnd.tiddlywiki","text":"\n<<<\n从2017年开始，各种笔记软件、间隔记忆软件 大爆发，哔哩站各种UP主开始出视频，但发现都热情输出持续力不够，一般都在第二年到三年的时候，开始断更。包括太微的很多国外字幕翻译视频，其实只要把那些原始的国外视频搬到B站并加字幕，对新手而言了解太微就已经足够了。但目前B站仍没有整套操作类的影音太微教学类视频。\n\n成体系的教学视频，可以批量产生对太微感兴趣的新手，而庞大的用户数量，也会诞生超级插件“创作者”，形成完美的循环。而晦涩难懂的文字，在现代快节奏的社会态势下，很难适应那些“稍微感兴趣”但没时间学习软件使用的人群，从而失去这部分新手。\n<<<\n"},{"title":"版面","created":"20230305122730862","creator":"林一二","modified":"20230603024547071","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"类似全屏的 App。太微是一个数据库，基于条目数据，可以运行很多个不同的全屏应用，也就是一个个不同的版面。\n\n[[版面（Layout）|https://bramchen.github.io/tw5-docs/zh-Hans/#Alternative%20page%20layouts]]是太微提供多种全屏界面的方案。\n\n效果可见知乎上的[[太微的各种版面|https://zhuanlan.zhihu.com/p/601040724]]。\n\n通常切换版面可以安装特定插件来实现，比如`captivate`主题插件就有另外的版面。\n\n<$macrocall $name=\"alert\" type=\"primary\" src=\"一般用户无法自定义版面，于是放到高级知识里去。\" class=\"bg-transparent\"/>"},{"title":"版面切换","created":"20230207162136493","creator":"林一二","modified":"20230305122922074","modifier":"林一二","tags":"太微原理 版面","type":"text/vnd.tiddlywiki","text":"!! 简介\n\n!!! 常用视图\n\n白板：https://tw-cpl.netlify.app/#linonetwo%2Ftw-whiteboard\n\n[img[https://pic1.zhimg.com/80/v2-73dfc44959d9f793b6746910ea08ed58_720w.webp]]\n\n日历：https://tw-cpl.netlify.app/#Plugin_202212022054901\n\n[img[https://pic2.zhimg.com/80/v2-bc2f1bea0dd0016a212bf004782c4431_720w.webp]]\n\n（内容为林一二新冠一周病情日记）\n\n默认故事流\n\n[img[https://pic2.zhimg.com/80/v2-13aa858ca7467849ce71f581546209f1_720w.webp]]\n\n!!! 视图切换\n\n可以用页面工具栏里的 Layout switcher 来打开视图列表切换\n\n[img[https://pic1.zhimg.com/80/v2-2cd7d142e8c902e2acf1dcac0523563c_720w.webp]]\n\n[img[https://pic2.zhimg.com/80/v2-a257f0df025ea661ba60949ec009c9c5_720w.webp]]\n\n有的视图插件也向页面工具栏提供了新按钮，例如这个一键切换到日历的按钮\n\n[img[https://pic2.zhimg.com/80/v2-993ca6a4b8a0acc2232518956486a67d_720w.webp]]\n\n!! 框架部分\n\n太微大部分界面是用维基文本文式编程写的，可以通过 message 等机制调用 JS 侧的能力，JS 侧也可以通过 `$tw.wiki.`makeTranscludeWidget 等方式取到笔记里的内容。\n\n设计上维基文本是希望成为低代码，不过对普通人来说用起来和 HTML 差不多，不看文档学也不会用，下面简单介绍一下。\n\n页面工具栏上的按钮是这样的：\n\n```\ntitle: $:/core/ui/Buttons/layout\ntags: $:/tags/PageControls\n\n<$button tooltip={{$:/language/Buttons/LayoutSwitcher/Hint}}>\n  <$action-sendmessage $message=\"tm-show-switcher\" switch=\"layout\"/>\n</$button>\n```\n\n在一个启动项脚本里，注册了暴露给维基文本的可用消息 `tm-show-switcher`（类似 JSB）\n\nJS 侧收到这个消息后，会弹一个框出来，里面展示笔记条目 `$:/core/ui/SwitcherModal` 的内容\n\n并带上 `{ switch: \"layout\" }` 作为维基文本变量，传给维基文本侧\n\n```\nexports.name = \"rootwidget\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.before = [\"story\"];\nexports.synchronous = true;\n\n// ...\n\n  $tw.rootWidget.addEventListener(\"tm-show-switcher\",function(event) {\n    $tw.modal.display(\"$:/core/ui/SwitcherModal\",{variables: event.paramObject, event: event});\n  });\n```\n\n在维基文本里，可以通过 `<varName>` 的方式把上下文中的变量拼入文本里，总之下面的维基文本拼出了 `$:/config/SwitcherTargets/layout`，取出对应的值 `$:/snippets/LayoutSwitcher`，然后嵌入了这条笔记。\n\n```\ntitle: $:/core/ui/SwitcherModal\nsubtitle: <$text text={{{[<switch>lookup[$:/language/Switcher/Subtitle/]]}}}/>\nclass: tc-modal-centered\nmask-closable: yes\n\n<$tiddler tiddler={{{ [<switch>lookup[$:/config/SwitcherTargets/] ]}}}>\n\n<$transclude/>\n\n</$tiddler>\n```\n\n```\ntitle: $:/config/SwitcherTargets/\n\nlayout: $:/snippets/LayoutSwitcher\nlanguage: $:/snippets/languageswitcher\npalette: $:/core/ui/ControlPanel/Palette\ntheme: $:/core/ui/ControlPanel/Theme\n```\n\n这条笔记是切换视图的弹框，通过 `<$list>` 微件，筛选出带有标签 `$:/tags/Layout` 的笔记，把它们作为链接列在列表里，点了就会把点击的视图笔记的 title 设置到 `$:/layout` 笔记的内容里。\n\n```\ntitle: $:/snippets/LayoutSwitcher\n\n<$linkcatcher to=\"$:/layout\">\n  <$list\n    filter=\"[all[tiddlers+shadows]tag[$:/tags/Layout]] +[!is[draft]sort[name]]\"\n  >\n    <$link to={{!!title}}>\n      <strong><$transclude field=\"name\"/> </strong><$transclude field=\"description\"/>\n    </$link>\n  </$list>\n</$linkcatcher>\n```\n\n最终，太微在根笔记 `$:/core/ui/RootTemplate` 里取出 `$:/layout` 这个笔记的内容，也就是当前打开的视图笔记的 title。\n\n然后就会把我们所选的视图笔记嵌入进来，作为 `$:/core/ui/RootTemplate` 的实际内容。\n\n```\ntitle: $:/core/ui/RootTemplate\n\n<$transclude\n  tiddler={{{ [{$:/layout}has[text]] ~[[$:/core/ui/PageTemplate]] }}}\n  mode=\"inline\"\n/>\n```\n\n在 JS 侧挂载这个笔记到 dom 上，类似于 react-dom 挂载 react 组件到 dom 上：\n\n```\nconst pageWidgetNode = $tw.wiki.makeTranscludeWidget('$:/core/ui/RootTemplate', {\n  parentWidget: $tw.rootWidget,\n});\n\nconst pageContainer = document.createElement('div');\ndocument.body.insertBefore(pageContainer, document.body.firstChild);\n$tw.pageWidgetNode.render(pageContainer);\n```\n\n!! 插件部分\n\n插件就是打包的笔记。插件提供的新视图一般用来展示一个微件。\n\n例如先创建一个日历微件的 JS 侧代码\n\nsrc/calendar-widget/widget.ts\n\n```\nimport { Calendar } from '@fullcalendar/core';\nimport type { Widget as IWidget } from 'tiddlywiki';\nimport './widget.css';\n\nconst Widget = (require('$:/core/modules/widgets/widget.js') as { widget: typeof IWidget }).widget;\n\nclass CalendarWidget extends Widget {\n  /**\n   * Lifecycle method: Render this widget into the DOM\n   */\n  render(parent: Node, _nextSibling: Node): void {\n    this.#calendar = new Calendar(this.#mountElement, { ...settings });\n    this.#calendar?.render();\n    parent.appendChild(this.#containerElement);\n  }\n}\n\nexports.widget = CalendarWidget;\n```\n\n然后通过元信息文件，保存这个笔记的标题、标签、类型等元信息\n\nsrc/calendar-widget/widget.js.meta\n\n```\ncreator: LinOnetwo\ntitle: $:/plugins/linonetwo/tw-calendar/calendar-widget/widget.js\ntype: application/javascript\nmodule-type: widget\nhide-body: yes\n```\n\n之后就可以在维基文本侧使用定义的微件，用类似 XML 的语法使用它 `<$calendar height=\"100vh\" />`\n\n```\ntitle: $:/plugins/linonetwo/tw-calendar/tiddlywiki-ui/PageLayout/CalendarLayout\nname: Calendar\ndescription: view tiddlers in agenda or calendar by their date related fields\ntags: $:/tags/Layout\n\n\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\n\n<$navigator story=\"$:/StoryList\" history=\"$:/HistoryList\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\n\n    <main class=\"tw-calendar-layout-main-area\">\n      <$calendar height=\"100vh\" />\n    </main>\n\n</$navigator>\n```\n\n通过给这个笔记加上 `tags: $:/tags/Layout` 这个标签，它就会被太微的框架部分使用到，展示在可用视图列表里\n\n并在它的 title 作为 `$:/layout` 这个笔记的内容时，替换掉默认的故事流视图，全屏展示这个新的视图。\n"},{"title":"包含wiki","created":"20230204083924972","creator":"WhiteFall","modified":"20230603023201076","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"!! 1. 介绍\n\n> 摘自：[[xp文档|https://keatonlao.github.io/tiddlywiki-xp/#%E5%8C%85%E5%90%AB%E7%BB%B4%E5%9F%BA]]\n\n<<alert info \"include是一个计算机专业术语，一指C/C++中包含头文件命令，用于将指定头文件嵌入源文件中。\" >>\n\n<<alert info \"includeWikis，包含多个其它wiki条目到当前wiki中，使多个其它wiki中的条目可以在当前wiki嵌入，链接，搜索。\" >>\n\n文件夹版TiddlyWiki使用一个单独的 tiddlywiki.info 文件进行配置，该文件在维基文件夹的根目录中。它应该包含一个JSON对象，其中包含includeWikis属性.\n\nincludeWikis属性让我们可以在一个维基中阅读其他维基的内容（其他维基不需要启动）\n\n\n!! 2. includeWikis案例\n\n在 test 文件夹下有三个维基：mywiki、chinese 和 english。要在 mywiki 中访问 chinese / english 的内容，可以在 mywiki 的 tiddlywiki.info 中的 `\"plugins\"` 后添加如下内容：\n\n```\n\t\"includeWikis\": [\n\t\t{\"path\": \"../chinese\", \"read-only\": true},\n\t\t{\"path\": \"../english\", \"read-only\": true}\n\t],\n```\n\n<<alert danger \"''注意：''如果包含一个不存在的维基，将导致本维基无法正常启动！如果出现无法启动，请删除无效的配置。\">>\n\n\n\n!! 3. includeWikis -- 包含维基\n\n在''includeWikis''数组中的条目可以是指定维基的相对路径的字符串，也可以是具有以下字段的一个对象：\n\n* ''path'' - 维基文件夹的相对路径\n* ''read-only'' - 设置为//true//以防止被包含的维基中的条目被修改。 修改将被写入到下面描述的 ''default-tiddler-location''指定的目录中\n\n''default-tiddler-location''配置包含在''config''属性中。点击链接查看[[tiddlywiki.info Files|https://keatonlao.github.io/tiddlywiki-xp/#tiddlywiki.info%20Files]]\n\n\n!! 4. 注意事项（太记）\n\nTidGI（太记）中，在没有includeWikis属性的A wiki中新建两个条目，然后在有includeWikis属性的B wiki中使用链接引用它们（指A wiki中新建两个条目）。太记可能需要右键快捷重启服务后才能看到 B wiki 的链接`[[A wiki 的条目]]`是存在的，可以访问的。\n\n原标题太长了，简单概括就是包含wiki，但这个目前还不适用于太记，只能是在nodejs版本里使用。太记因为要上传到github上去备份，如果不做github备份，那还是可以使用的。详细可参考[[视频|https://www.bilibili.com/video/BV1By4y1f7Cr]]"},{"title":"保存备份同步","created":"20230101081235254","creator":"马不前","modified":"20230508131917886","modifier":"WhiteFall","tags":"全平台软件和存储方式","type":"text/vnd.tiddlywiki","text":"* [[TiddlyStow|https://twpub-book.netlify.app/tiddlystow.html]]\n* Timimi电脑浏览器插件 +  Tiddloid + Onedrive\n* Syncthing 文件同步工具开源版（商业版：微力）\n* 网络图床插件：OSS Uploader。\n* WebDav 服务存储文件到本地或云端的两个插件：FileUploads、FileUploads:PUT。\n* 单文件Wiki工作流：tiddlystow ，timimi ，kopia。\n* [[widdler|https://github.com/qbit/widdler]]\n* savetrail：把改动保存为json格式数据。\n* [[TiddlyWiki-Server|https://github.com/nathanielknight/tiddly-wiki-server]]（Rust写的WebDav服务器）。包装好的文件放在群里。\n* 备份软件：Kopia、Git。"},{"title":"保存其他人的Wiki","created":"20220412041009637","creator":"林一二","modified":"20220412041056842","modifier":"林一二","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"如果你遇到类似「Error: Cannot load tiddlywikicore-5.2.3-prerelease-2022-04-09.js」的报错，你可能需要[[save-page-we|https://chrome.google.com/webstore/detail/save-page-we/dhhpefjklgkmgeafimnjhojgjamoafof]]这样的「全HTML保存器」。"},{"title":"保存私有内容","created":"20211008054725356","creator":"林一二","modified":"20211224155728488","modifier":"林一二","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"太微是一个维基应用，其默认逻辑是你是一个分享式写作者（想想维基百科的伟大贡献者们），所以内容默认是公开的。\n\n所以如果你希望自己的部分内容私有加密不公开，需要明确声明这些内容不公开。有多种方法可以在太微里添加私有内容，下面将一一介绍。\n\n!! 太记子wiki\n\n如上所述，你一开始创建的维基（wiki），我们称之为主维基（主wiki），是公开的。不过你可以创建几个私有的子维基（子wiki）链接到它上面。\n\n通过[[linonetwo/sub-wiki|https://onetwo.ren/wiki/#%24%3A%2Fplugins%2Flinonetwo%2Fsub-wiki%2Freadme]]等方案可以实现保存私有内容。"},{"title":"鲍勃·罗宾逊","caption":"Bob Robison","created":"20230102064156769","creator":"马不前","modified":"20230102064249600","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Bob Robison\n\n[[github|https://github.com/grayeul]]"},{"title":"笔记软件开源不开源有什么区别","created":"20230531042627978","creator":"林一二","modified":"20230531044546770","modifier":"林一二","tags":"他们是这样评价太微的","type":"text/vnd.tiddlywiki","text":"!! 能保证一直开源免费安全\n\n!!! 保证一直免费更新\n\n能保证一直非商业化，不会[[像 typora 那样突然收钱|https://www.zhihu.com/question/387808337]]。\n\n当然缺点是开源开发者一般是把开发当做乐趣，所以很少为此做到超出乐趣程度的加班开发，没法像加班的商业公司一样急速更新。\n\n!!! 开源还可以知道这软件在做什么\n\n是否在收集用户数据、是否有广告和付费模块，都是能看到的。\n\n太微就完全没有用户数据收集和广告模块。\n\n!! 有不爽的地方可以改\n\n商业软件不会因为用户提了一个需求就立即做出来，闭源软件的团队也不一定会理你的需求，但开源社区（至少太微的友好的开源社区）会和你讨论需求，并接受你提交的修改。\n\n!!! 插件开发更轻松透明\n\n[[林一二]]在有用得不爽的地方时，会优先尝试[[插件开发]]，一般就能解决痛点（例如开发了支持树状任务分支的[[ITKG插件|https://github.com/tiddly-gittly/intention-tower-knowledge-graph]]），开发过程中可以看官方源码，参考官方的开发方式。\n\n如果开发插件的时候不爽怎么办？（关于「不爽」的「不爽」，即「元不爽」），这时就可以去直接改太微核心代码，或提交议题请求别的大佬来开发。例如[[林一二]]这几年已经为了自己的插件开发需求，[[向核心提交了不少变更和需求|https://github.com/Jermolene/TiddlyWiki5/issues?q=+author%3Alinonetwo+]]了。\n\n!!! 会很难改吗\n\n太微和 Obsidian、Logseq 等软件最大的不同，在于它大部分内容不是用 JavaScript 编程语言写的，而是用 Wikitext 文本写的，就像编写维基百科一样，就能写出界面。不需要学编程也能改，相对 Obsidian 等的插件会更好改。\n\n而且取数据动态生成表格等界面的[[筛选器]]也是十年前就内置了的，不像 Obsidian 还需要插件来提供。内置的功能效率更高、更易学易用。\n\n!!! 不会技术怎么办呢\n\n要是能说服会改的大佬去改也可以，因为谁都能改。不会技术的话，也可以当产品经理把需求梳理清楚去说服别人嘛。例如上面的例子里，就算是[[林一二]]也不一定有时间改核心做到所有需求，所以很多需求都是通过议题（issue）的形式说清楚了，希望说服别人来帮忙的。"},{"title":"笔记思维","created":"20220514135355980","creator":"林一二","modified":"20220514135509646","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"介绍各种知识管理方法、笔记整理方法是怎么利用太微提供的各种功能的。"},{"title":"编程知识类","created":"20230516133116344","creator":"马不前","modified":"20230516134615634","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"使用太微经常会涉及到一些编程知识，作为补充收录进来。也包括一些杂七杂八的内容。"},{"title":"编辑类插件","created":"20230101081024435","creator":"马不前","modified":"20230906064244523","modifier":"WhiteFall","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"* Markdown风格硬换行符插件：[[Space Space Newline|https://wikilabs.github.io/editions/space-space-newline/]]\n* 底部选项卡[[buttontabs|http://bottomtabs.tiddlyspot.com/]]\n*  ❤️回收站Trashbin\n* 自动下载修改后的Tiddlers（官方库）Save Trail\n*  [[Section Editor|https://kookma.github.io/TW-Section/]]\n* 大纲编辑器[[steams|https://saqimtiaz.github.io/streams/]]\n* 折叠subsume\n* 弹出appear\n* 创建学术文本 refnotes + bibtex\n* 在底部显示annotation的功能插件[[Refnotes|https://kookma.github.io/TW-Refnotes/]]\n* 公式计算插件[[TiddlyWikiFormula|http://chronicles.wiki/TiddlyWikiFormula/]]\n* 全部展开折叠categoryLists\n* 多列标签下拉列表 [[multi column tag dropdown|https://wikilabs.github.io/editions/multicol-dropdown/]]\n* ❤️ReLink：解决重新命名 Tiddler后链接更新的插件\n* ❤️复制标题：oeyoews/copy-title，安装后在页面工具栏可以看到。\n* ❤️高亮文本，xp/mark-button，安装后，在编辑条目时的编辑工具栏图标显示为一个马克笔。\n* 段落编辑：Section Editor\n* [[MegaMenu|https://jc-ose.github.io/MegaMenu/]]\n* 侧边编辑器[[sideeditor|http://sideeditor.tiddlyspot.com/]]\n* [[快速创建字段|http://newtids.tiddlyspot.com/]] 这个挺好用，如果你有一个列表title,想快速创建所有列表文本的tid用这个很爽。\n* 音乐乐谱\n** [[发布界面|https://burningtreec.github.io/tw5-musicsheets/]]\n** [[论坛上的讨论|https://talk.tiddlywiki.org/t/musicsheets-a-new-release/154]]\n** [[代码|https://github.com/BurningTreeC/tw5-musicsheets]]\n* tw5-monaco（vscode的编辑器移植）\n* [[zx-script|https://talk.tiddlywiki.org/t/interactive-code-executing-in-tiddlygit-like-ipython-notebook/780]]tid当作js执⾏，在tw中执⾏js，类似jupyter。\n* 导入表格：xlsx-utils\n* markdown相关\n** 导出为MD：Markdown-Export\n** TiddlyWIki/Markdown\n** linonetwo/markdown-transformer插件\n"},{"title":"编辑时光标定位不准","created":"20230523081129518","creator":"马不前","modified":"20230603045140977","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"目前最好的解决办法是开启codemirror活动行高亮，也开启行号显示，这样就基本上可以正常使用了。如果不想开启的话，就删除codemirror一系列插件吧。这个主要是在单文件版本里容易出现，用太记这类nodejs版本不容易出现。"},{"title":"变量","created":"20220124152252644","creator":"林一二","modified":"20230603023222124","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"[[官方介绍文档|https://bramchen.github.io/tw5-docs/zh-Hans/#Variables%20in%20WikiText]]\n\n[[可用的环境变量|https://bramchen.github.io/tw5-docs/zh-Hans/#Core%20Variables]]"},{"title":"变量嵌入","created":"20230603032413840","creator":"马不前","modified":"20230603032620835","modifier":"马不前","tags":"自定义字段内容","type":"text/vnd.tiddlywiki","text":"! 过渡阶段\n\n```\ntags={{{ [<now \"0WW\">] +[addprefix[2023-]] }}}\n```\n\n观察上面的代码，我们可以发现tags后面接了三个花括号，那为什么要接这三个花括号呢？因为我们要进行动态创建嵌入内容。之前嵌入的内容基本上都是静态的，只能是写好了的，不够方便。有了三层花括号就方便多了。不过三层花括号看起来也不够美观。这个新版本应该有改进。\n\nok，了解了什么是三层花括号后，我们具体看里面的内容，上来就是一个`[<now \"0WW\">]`，这又是什么东西呢？\n\n这个东西我们是见过的，就是上面的now宏啊。后面接的`0WW`表示的是当年的周数，前面加上0是单数时补齐。也就是说这个传入的参数和上面的格式参数是一样的。那为什么要用单尖括号呢？上面的我们不是都用双尖括号吗？\n\n这是因为我们是在筛选器里调用这个宏变量的，外面的方括号就是筛选器的run，当然也还有其他方式，比如单引号或者双引号。这里用单个方括号是为了后面的steps。因为`[<now \"0WW\">]`只输出一个周期数，但我们还需要给这个值加上前缀“2023-”，那么就有了后面的`+[addprefix[2023-]]`内容了。\n\n`+[addprefix[2023-]]`前面的+表示承接前面的输出值。后面的addprefix，这个从字面上就可以看出是add prefix，添加前缀。后面接一个要添加的参数，也就是“2023-”，当然也是用方括号括起来的。\n\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title=<<now \"YYYY年0MM月DD日0hh:0mm:0ss\">> Timeform=<<now \"YYYY-0MM-0DD\">> \ntags={{{ [<now \"0WW\">] +[addprefix[2023-]] }}}\nIsOtherText=\"time\" \nTimeNumber=\"30\" />\t\n\t太微相关，加前缀的\n</$button>\n\n点击上面的代码就可以发现标签的值是“2023-22”了，这就相当于实现了一个文本拼接工作。把两个文本拼接起来了，前面是“2023-”，后面是一个周期数。当然前面的“2023-”，也可以换成某个变量，不过就需要用单尖括号来实现变量的传递了。比如我传递一个now宏的日期值吧。\n\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title=<<now \"YYYY年0MM月DD日0hh:0mm:0ss\">> Timeform=<<now \"YYYY-0MM-0DD\">> \ntags={{{ [<now \"0WW\">] +[addprefix<now \"0DD\">] }}}\nIsOtherText=\"time\" \nTimeNumber=\"30\" />\t\n\t太微相关，加日期值作为前缀的\n</$button>\n\n上面输出的值是0222，02是个位数补齐位数，后面22是当前周期数，直播时应该是0322的值。\n\nok，基本拼接的操作就是这样的，通过筛选器来拼接复制的内容，或者是动态的变量内容。现在我们可以结合其他筛选器来实现更复杂的内容。\n"},{"title":"变量在不同情况下的多种写法","created":"20220124152259863","creator":"林一二","modified":"20230312155708199","modifier":"林一二","tags":"变量","type":"text/vnd.tiddlywiki","text":"!! 双尖括号\n\n默认的写法，例如：\n\n```tid\n<$md-to-tid-button title=<<title>> typeName=<<type>> k=<<key>>/>\n```\n\n!! 单尖括号\n\n在筛选器表达式里，就像[[嵌入]]要写成单花括号一样，变量也要变成单尖括号：\n\n```tid\n<$let target=<<currentTiddler>> targetTitle={{{ [<target>get[draft.title]] ~[<target>get[title]] }}} search={{{ [[$:/state/search-template-list/input]get[text]] }}} draftOf={{{ [<target>get[draft.of]] }}} >\n```\n\n例如判断当前条目是否和变量一样。\n\n`[<currentTiddler>has<xxx>]`\n\n!! 在宏定义里用美元符\n\n`$(name)$`（宏定义里变量的占位符），详情请看[[在宏定义里使用变量]]。"},{"title":"标签","created":"20211016140737155","creator":"林一二","modified":"20211016140825436","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"[[编辑条目并加上标签的中文教程|http://tw5-zh.tiddlyspot.com/#Creating%20and%20editing%20tiddlers]]"},{"title":"标签多栏选择","created":"20221126024624402","creator":"WhiteFall","modified":"20230516132111348","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：马不前，TiddlyWiki XP\n* 描述：添加标签时的下拉列表由单栏变成多栏。\n* 使用方法：复制内容到你的wiki，然后打上注明的标签。\n\n\n\n```\n依赖插件：无\n标签：`$:/tags/Stylesheet`\n```\n\n<$let selected-tiddler=\"Multi-column-dropdown\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>"},{"title":"表格直播链接内容模板","created":"20230427145051210","creator":"林一二","modified":"20230427145509456","modifier":"林一二","tags":"B站直播 $:/tags/Table/BodyTemplate","tbl-column-list":"video-link","type":"text/vnd.tiddlywiki","text":"\\define display-link-with-label()\n<$let href={{{[<currentRecord>get<currentColumn>]}}}>\n<a class=tc-tiddlylink-external href=<<href>>rel=\"noopener noreferrer\"target=_blank>\n录播视频链接\n</a>\n\n<!--same as above, just keep the format that Shiraz plugin recomments-->\n\\end\n\\define display-link-with-label_Locked()\n<$let href={{{[<currentRecord>get<currentColumn>]}}}>\n<a class=tc-tiddlylink-external href=<<href>>rel=\"noopener noreferrer\"target=_blank>\n录播视频链接\n</a>\n\n\\end\n\n<$reveal type=nomatch stateTitle=<<tempTableEdit>>stateIndex=mode text=edit tag=td>\n<<display-link-with-label>>\n</$reveal>\n<$reveal type=match stateTitle=<<tempTableEdit>>stateIndex=mode text=edit tag=td>\n<!---->\n<$list filter=\"[<tempTableSort>getindex[sortIndex]match<currentColumn>]\"emptyMessage=<<editCell>>variable=ignore>\n<<display-link-with-label_Locked>>\n</$list>"},{"title":"不计小瑕疵，专注功能性","created":"20231029101429067","creator":"WhiteFall","modified":"20231030043940507","modifier":"WhiteFall","tags":"笔记思维","text":"不计小瑕疵，专注功能性，专注你的目标（更方便的学习或者记笔记）\n\n* 软件不可避免的出现bug，只要软件具备一定的稳定性和功能，能够完成我们的目标，对于某些情况下，这些bug其实可以完全无视。因为他们可有可无，不会对我们的工作造成影响。\n* 若有的bug对你做的工作产生一点点的影响，可以使用临时的简易方案对冲bug，忽略带来的影响。\n* 对于作为用户的我们，“不计小瑕疵，专注功能性”，这样的好处无疑是巨大的。使你的注意力不至于陷入一个又一个的困境，被这些注意力陷阱拖拽着。这可以节省大量的时间精力。让出更多的时间精力去完成我们想要的目标。\n* 软件的创作就像是画家和他的画作，由非常大面积的抽象轮廓慢慢绘制到一幅非常精美的作品。\n\n\n''comments：''\n\n;WhiteFall：\n:这个条目，大家或许可以补充补充意思和例子，感觉写的还差点意思。\n;Neonity：\n:软件开发、笔记系统、花园打理和艺术创作都很有共同性\n;Neonity：\n:不知道恰当不恰当，最近读道德经里一句话很有感触：“为学日益，为道日损。”。开始玩时的心态是“这也要，那也要”，逐渐变成“问题解决优先”。先解决了问题，再回过头考虑系统化，如何优化解决问题的流程。\n;Neonity：\n:pimgeek 也常讲，不要追求过早优化"},{"title":"布拉姆·陈","caption":"Bram Chen","created":"20230102054142708","creator":"马不前","modified":"20230102062143369","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Bram Chen\n\n''官方文档中文版本翻译者''\n\n[[github|https://github.com/BramChen]]\n\n[[简中文档|https://bramchen.github.io/tw5-docs/zh-Hans/]]"},{"title":"布莱恩·谢弗","caption":"Brian Shaver","created":"20230102065644019","creator":"马不前","modified":"20230102065718285","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Brian Shaver\n\n[[github|https://github.com/shakerlxxv]]"},{"title":"参数化嵌入","created":"20231001061533332","creator":"WhiteFall","modified":"20231001120736390","modifier":"WhiteFall","tags":"嵌入","text":"参数化后的嵌入，为嵌入微件增加了更多的参数定义，允许传递自己定义的参数，允许将字符串和维基文本树传递给嵌入。\n\n嵌入不仅可以嵌入用于呈现任何类型的内容（维基文本、图像、视频），还可以调用特殊变量（进程（宏）、自定义微件等等）并且传递变量给它们。\n\n```js\n1. 这里定义了一个进程myproc，它有两个形式参数name, age。\n2. 然后通过嵌入调用myproc进程并传递参数为myproc进程的两个形式参数赋值。\n\n\\procedure myproc(name,age)\n我的名字是 <<name>>，年龄为 <<age>>。\n\\end\n\n<$transclude $variable=\"myproc\" name=\"James\" age=\"19\"/>\n```\n\n自5.3.0起弃用macrocall微件改用transclude调用定义的特殊变量。例如：\n\n```js\n<$macrocall $name=\"my-macro\" my-parameter=\"Elephant\"/>\n\n<$transclude $variable=\"my-macro\" my-parameter=\"Elephant\"/>\n```\n\n你可以指定嵌入的内容的解析器模式为inline还是block。\n\n$transclude嵌入微件的属性都是以`$`字符开头（v5.3.0）。并且可以自己定义任意参数名，但不包含已经定义的属性名称作为参数名。若要传递以`$`字符开头的参数，你需要在它们前面在加一个`$`符号。列如：`$tiddler` -> `$$tiddler`。"},{"title":"侧边栏应该如何设计及如何更高效地利用起来","created":"20230605154323124","creator":"马不前","modified":"20230605160152824","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"标题有点长，看样子是两个问题，但实际上是一个问题，因为侧边栏的设计就是为了能够更高效地利用起来。\n\n太微自身的侧边栏一言难尽。刚开始接触时觉得还可以，但使用时间长了，便觉得不是很方便了。但也说不上低效。\n\n但总感觉应该有更好地设计。当然要模仿其他产品的设计我估计也比较难，整个页面还是需要进一步考虑吧。\n\n目前侧边栏还有一个问题就是无法动态地嵌入内容。这是很麻烦的，但像核心里的开启或最近都是可以动态地发生变化的。这就很麻烦了。"},{"title":"插件更新后重启又要更新","created":"20230710113651406","creator":"林一二","modified":"20230801052607262","modifier":"马不前","tags":"更新插件 排查问题","text":"先记住插件对应的名字，然后在太记里右键工作区图标-打开Wiki文件夹，在这个文件夹的 tiddlers 文件夹里，就是你所有的条目和插件了。\n\n此时搜一下更新失败的插件，看看它是否有一个同名但以 meta 为结尾的文件，用文本编辑器打开这个文件，看看是不是里面的版本号还是旧的，没有跟随插件 JSON 文件一起更新。如果是这样，可以先删掉这个 meta 文件，然后重启太记/重启服务试试。有些插件包含了js文件，会影响启动，比如tw-react插件，同样也是删除对应的meta文件后再次启动太记。\n\n这样应该就修好了。\n\n目前这是一个玄学问题，有的插件会出现这样的问题，而有的插件不会出现这样的问题。也有的在这个wiki里会有，而在另一个wiki里可能就没有了。所以只好先记录可能会有问题的插件名称。删除meta文件不影响插件使用。\n\n* `$:/plugins/linonetwo/tw-react`\n* `$:/plugins/Gk0Wk/echarts`\n* `$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced`\n* `$:/plugins/linonetwo/github-external-image`\n* `$:/plugins/linonetwo/zx-script`\n* `$__plugins_Gk0Wk_focused-tiddler.json.meta`\n"},{"title":"插件技巧类","created":"20230521093012845","creator":"马不前","modified":"20230521093039718","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"有一些插件的使用技巧可以记录下来。"},{"title":"插件开发","created":"20211003091131848","creator":"林一二","modified":"20230207151252799","modifier":"林一二","page-cover":"https://tiddlywiki.com/talkytalky/images/TiddlyWiki%2520Architecture.svg","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"!! 学习方法\n\n!!! WikiText 插件\n\n只需要通读[[中文文档]]了解所有 WikiText 语法即可，然后推荐使用[[Gatha插件来开发|如何在单文件版里写一个TW插件]]。\n\n!!! JS 高级插件\n\n可以阅读[[太微原理]]里的一些指南。\n\n因为太微本身的 API 文档不完善，而且没有原生的 TS 类型。所以目前的学习主要靠阅读其它插件的代码，来了解写法。\n\n小伙伴们也在把 API 用法整理到[[TW5-Typed|https://github.com/tiddly-gittly/TW5-Typed]]里，方便使用 TS 开发 JS 插件。\n\n!!! 值得一读的插件\n\n* 操作编辑器\n** [[Gk0Wk/TW5-CodeMirror-Enhanced|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced]]\n* 操作事件\n** [[Souk21/TW-commandpalette|https://github.com/tiddly-gittly/tiddlywiki-plugins/tree/master/src/commandpalette]]\n\n!! 相关阅读\n\n以下社区成员写的写的文档如果是英文版看不懂，用浏览器翻译（例如Google翻译）插件右键翻译网页即可。\n\n# [[https://github.com/kewapo/The-Book-Wiki]] 是[[The-Tiddlywiki-Manual|https://github.com/kewapo/The-Tiddlywiki-Manual]]的完整版，讲解了插件开发者需要了解的很多知识。\n# [[Grok TiddlyWiki|https://groktiddlywiki.com/read/]]是详尽有步骤的太微学习手册"},{"title":"插件可以包含的内容","created":"20220215123708238","creator":"林一二","modified":"20220215123826108","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"插件可以用于分发任何笔记！例如：\n\n- 可执行的 JS 代码\n- 按钮、智能图表等[[微件]]\n- [[文本片段]]\n- [[钓鱼插件]]用的单词包\n\n在分发内容时，请注意遵循[[条目命名规范]]。"},{"title":"插件库列表","created":"20221127032926805","creator":"WhiteFall","modified":"20230619155404602","modifier":"马不前","order":"3","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"! 插件库\t\n\n<<alert-leftbar secondary \"Chinese Community Plugin太微中文社区插件源<br><br>\n\n太微中文社区插件源是由太微(TiddlyWiki)中文社区维护的、致力于搜集网络上所有与 TiddlyWiki5 有关插件的、希望为中国以及全世界的太微用户提供一键安装、更新插件体验的公开插件源。\">>\n\n*  [[Chinese Community Plugin|https://tw-cpl.netlify.app/]]\n*  [[Kookma Plugin Library|https://kookma.github.io/TW-PluginLibrary/library/index.html]]\n*  [[tobibeer|http://tobibeer.github.io/tw5-plugins/#Welcome]]\n*  [[Relink Library|https://flibbles.github.io/tw5-relink/library/index.html]]\n*  [[Wikilabs Library (latest)|https://wikilabs.github.io/editions/pluginlibraryWL/library/latest/index.html]]\n\n\n\n''Gatha''（创建TiddlyWiki插件）、按钮类。可以创建插件，demo，备份，强烈推荐学习。\n\n* https://talk.tiddlywiki.org/t/gatha-plugin-experimental-release/2272\n* https://kookma.github.io/TW-Gatha/\n\n<<alert-leftbar warning \"插件要尤为注意插件之间的依赖关系。在太记里通常会因为没有安装适当的依赖插件，而导致报错无法正常打开wiki。\">>"},{"title":"插件列表","created":"20230101092814945","creator":"马不前","list":"插件库列表 编辑类插件 筛选器插件 图形表格 浏览类插件 主题与布局样式 TidGi预设插件","modified":"20230429134517226","modifier":"WhiteFall","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"<<tabs \"[tag[插件列表]]\" \"插件列表\" \"$:/state/tab/beginner\" \"tc-vertical\">>"},{"title":"插件使用","created":"20211003071620463","creator":"林一二","modified":"20211016092353080","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"简要介绍常用的第三方插件的使用，导读插件的文档。\n\n建议首先将[[安装插件]]里的内容完全掌握，这样就能够轻松从插件源里挑选安装这里介绍的插件。"},{"title":"插件源机制和导入独立插件源到CPL的方法","created":"20230515132341663","creator":"林一二","modified":"20230530052055391","modifier":"马不前","tags":"B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Bg4y1c7YW","text":"刚导入了 [[benwebber插件源]]， CPL 那个仓库可以用 npm run importlibrary 导入别的插件库"},{"title":"查看工具栏","created":"20211016101239661","creator":"林一二","modified":"20211016101346791","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"就是条目标题右边含有{{$:/core/images/down-arrow}}按钮和{{$:/core/images/close-button}}按钮等一系列条目操作按钮的工具栏。"},{"title":"查看模式","created":"20220717065411682","creator":"林一二","modified":"20230915145824901","modifier":"马不前","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"\n[img[https://pic1.zhimg.com/80/v2-375abd1714404161d9d4fc137e20c129_1440w.jpg]]\n\n太微自带的几个查看模式：\n\n* Classic：经典模式，打开条目是从上往下的动画，关闭是往左移动直到消失的动画关闭\n* POP：弹出模式，pop打开条目是从大缩小的动画，关闭条目是继续缩小直到看不见\n\n这两个他们都是多个条目同时在的，往下翻可以看到多个条目。\n\n* Zoomin：缩放视图模式：这个模式只能看到一个条目，往下翻没有更多条目\n* Stacked：堆叠模式：堆叠特效\n\nStacked模式与Zoomin模式在[[Echarts可视化插件]] 的 [[The Brain|$:/plugins/Gk0Wk/echarts/addons/TheBrain.js]] 视图下无法识别出当前的条目（Tid），即不可用。\n\n* 用于短文的模式Muuri，一键筛选出短文打开用这种感觉跟看杂志一样\n\n<<<\nGitHub主页：https://github.com/BurningTreeC/tiddlywiki-muuri\n\nDemo主页：https://burningtreec.github.io/tiddlywiki-muuri/\n<<<\n\n\n[[参考了Miao提供的回答|https://www.zhihu.com/question/484539250/answer/2577012684]]"},{"title":"尝试调整样式","created":"20211020094931720","creator":"林一二","modified":"20211020103733360","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"!! 调试样式\n\n改样式的第一步，是在自己的 wiki 里调试，随便改改看看效果：\n\n# 右键想改的地方，点右键菜单里的「检查 Web 元素」\n# 在开发者工具里调试 CSS，相关方法见[[B站教程|https://search.bilibili.com/all?keyword=%E6%A3%80%E6%9F%A5%E5%85%83%E7%B4%A0]]\n# 改好之后，把 css 类名和改好的样式复制出来，放进加了 $:/tags/Stylesheet [[标签]]的条目里\n\n!! 使用调色板\n\n最好引用调色板里的颜色名，这样当用户在暗夜主题和明亮主题之间切换的时候，你的修改结果才会自动适配相关主题。\n\n需要使用 tid 结尾的文件名。\n\n!! 创建主题\n\n等改出的样式足够多足够好，就可以包装成主题分享给别人了。\n"},{"title":"创建知识库","created":"20230713021302940","creator":"WhiteFall","modified":"20230713031240721","modifier":"WhiteFall","text":"很久很久以前，在一条河流里，生活着许多许多的小鱼儿（Tiddlers），它们快活地在故事河（Story River）里游来游去。这些小鱼儿每一个都有自己的名字（条目名），自己的种类（条目内容类型），它携带的信息组成了鱼儿美丽的身体与骨架，附加的字段构成了它美丽的鳞片。"},{"title":"从其他人的笔记里复制宏或微件","created":"20220215152501813","creator":"林一二","modified":"20220215152709948","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"用到宏或者微件的话，得注意去安装宏的定义。如何找到宏的定义，就得用高级搜索了。\n\n高级搜索找到包含这个宏或微件的插件之后，可以点这个插件的 Content 标签页，展开它的内容列表，找到真正包含这个宏或微件的条目拖进自己的Wiki；也可以直接把整个插件拖进自己的Wiki。\n\n有可能你直接搜到他在自己Wiki中定义宏或微件的条目，这种情况是最好的，直接把这个条目拖进自己的Wiki就好了。"},{"title":"从其它笔记软件迁移","created":"20230731075637114","creator":"林一二","modified":"20230731075638181","modifier":"林一二","tags":"基础知识"},{"title":"存储方案展开介绍","created":"20220105150846941","creator":"林一二","modified":"20220108095420512","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"根据用户的喜好和需求，有十数种方法将数据保存到\n\n> 本地硬盘 / 自建云服务器 / WebDav / Git服务器 / Web3基础设施\n\n等各种存储服务里。（大部分列在[[基础文档简体中文版-开始使用|https://bramchen.github.io/tw5-docs/zh-Hans/#GettingStarted]]里，也有一些在社区插件源里）\n\n我们推荐使用[[如何保存]]里列出的桌面APP或内置的Github保存器、Timimi浏览器插件来保存。\n\n* 其中桌面APP可以即开即用并附带版本回溯备份功能\n* Github保存器则可以让你在桌面端和移动端都方便地保存数据。\n* Timimi浏览器插件可以保存HTML版内容，内容可以用网盘同步到手机端使用"},{"title":"打开外部文件","created":"20220612102246413","creator":"林一二","modified":"20230615134208020","modifier":"WhiteFall","tags":"基础知识 TidGi太记 B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Ah411c7rc","text":"在桌面端应用里，你可以打开外部文件。\n\n!! 太记\n\n使用 `open://` 开头的链接可以打开文件，可以是以 `/` 开头的绝对路径：\n\n```\n[ext[open:///Users/linonetwo/Desktop/ItonNote Mobile.png]]\n\n[ext[open:///Users/linonetwo/Desktop]]\n```\n\n```\n.\n├─plugins\n│  └─github-external-image\n├─tiddlers\n├─files\n└─tiddlywiki.info\n```\n\n也可以是以 `./` 开头的相对路径，表示文件位置相对于知识库文件夹，例如我们常常在 `tiddlywiki.info` 同一层会有一个 `files` 文件夹用于放大文件附件：\n\n```\n[ext[open://./files/ItonNote Desktop.png]]\n```\n这里引用的''图片名称需要是英文名，中文名不行''，显示不出来。具体可见[[b站上的视频|https://www.bilibili.com/video/BV1qV4y1L7UP/?share_source=copy_web&vd_source=ad336ef0278153bd16bdab5eac42fdfa&t=4337]]<<fnote \"视频很粗糙，简单看下操作就行。\">>。\n\n你也可以使用 `file://` 访问外部文件：\n\n```\n[ext[file://<文件或文件夹路径>]]\n```\n路径可以是相对路径，也可以是绝对路径（目前好像不支持绝对路径）。绝对路径可以用斜杠或反斜杠，例如`file://C:\\Users\\Snowy\\Downloads`。\n\n\n!! TiddlyWikiDesktop\n\n使用传统的 `file://` 开头即可。\n\n```\n[ext[file://~/Desktop/ItonNote Mobile.png]]\n```\n\n在太记里想要直接显示外部图片，并把图片归类到文件夹里的话，可以参考[[让导入的图片放在特定目录中]]。其他pdf文件也是类似。唯一的是音频文件不好处理，可能会出错。"},{"title":"大卫·杰德","caption":"David Jade","created":"20230102064037026","creator":"马不前","modified":"20230102064136191","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! David Jade\n[[github|https://github.com/davidjade]]"},{"title":"大卫·约翰斯顿","caption":"David Johnston","created":"20230102063518315","creator":"马不前","modified":"20230102063617082","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! David Johnston\n[[github|https://github.com/Brennall]]"},{"title":"大越正之","caption":"Ogoshi Masayuki","created":"20230102064449026","creator":"马不前","modified":"20230102064530918","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Ogoshi Masayuki \n\n[[github|https://github.com/ogoshima]]"},{"title":"待开始任务列表","created":"20220527054205299","creator":"林一二","modified":"20220527054227582","modifier":"林一二","tags":"社区建设","type":"text/vnd.tiddlywiki","text":"<$macrocall $name=table-dynamic caption=\"共建待办列表\" filter=\"[tag[任务]]-[tag[done]]\" fields=\"title tags\" class=\"w-100\"/>"},{"title":"戴夫·吉福德","caption":"Dave Gifford","created":"20230102050914590","creator":"马不前","modified":"20230114153203238","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Dave Gifford\n\n社区活跃参与者\n\n他不喜欢用github，我就不贴他的github链接了。\n\n"},{"title":"丹尼尔·巴雷特","caption":"Daniel Barrett","created":"20230102065041584","creator":"马不前","modified":"20230102065123062","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Daniel Barrett\n\n[[github|https://github.com/shendaras]]"},{"title":"丹尼洛·罗德里格斯","caption":"Danielo Rodríguez","created":"20230102065442413","creator":"马不前","modified":"20230102065521693","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Danielo Rodríguez\n\n[[github|https://github.com/danielo515]]"},{"title":"单文件版","created":"20231013043258853","creator":"林一二","modified":"20231013043420863","modifier":"林一二","tags":"基础知识","text":"整个知识库就是一个 HTML 文件，到哪都能打开，也方便分享给其他人作为电子书查看！\n\n可以随时从[[多文件版]]里使用保存功能导出（可以用[[筛选器]]仅导出想分享的部分），也可以通过[[TidGi太记]]导入成多文件版，随时来回转换。"},{"title":"单文件版本保存到github","created":"20230904041609365","creator":"马不前","modified":"20230904041609365","modifier":"马不前","tags":"如何保存","text":"!!!保存到 GitHub \n\n使用 GitHub 在线保存、访问、修改和备份 TiddlyWiki。ps: 可能需科学上网\n\n#在 TiddlyWiki 里填入以下信息 <br>[img[https://pic1.zhimg.com/v2-5a078b8340f46fc38edadba7fc7147c4_r.jpg]]\n#在 GitHub 上创建一个名为 wiki 的仓库，所有步骤都默认（可参考：https://docs.github.com/cn/repositories/creating-and-managing-repositories/creating-a-new-repository ）。再创建一个令牌并复制保存在本地（参照 https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token）\n#回到步骤一的 TiddlyWiki ，将令牌填入，点侧边栏的红色按钮保存成功，按钮变灰。\n#回到第二步的GitHub ，可见 index.html 已存入 wiki 库，但无法在线访问。需再创建一个 wiki 库的 GitHub 网站（参照 https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site），实现在线访问。\n#打开刚刚创建的网站网址，可在修改在线 TiddlyWiki后，按步骤三将令牌填入，实现在线修改并保存。"},{"title":"单页面HTML","created":"20211011140301448","creator":"林一二","modified":"20211011140351244","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"太微可以以一个单独的 HTML 文件形式被保存和分发，只需要一个浏览器就能打开和编辑其内容。"},{"title":"当前位置（Breadcrumbs）","created":"20221126142954151","creator":"WhiteFall","modified":"20230516133050206","modifier":"马不前","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：\n* 描述：Tiddler Breadcrumbs Template条目名称可以更改，但更改时需要连带修改条目内容中的具有相同名称的字段。apex_tag字段表示虚拟目录树的根目录（起始目录），例如太记中的Index或者太微中文教程的首页。length_limit表示显示的目录深度。如果一个条目有多个标签的话（属于多个目录）就会显示多个路径。\n* 使用方法：第一种，你可以拖放Tiddler Breadcrumbs Template条目到你的wiki，然后钉上标注的标签即可；第二种，复制标题、字段与内容，到你的wiki中，确保无误之后然后保存。最后根据''描述''修改字段，使条目为你工作。\n* 注意：根目录条目不能添加根目录标题的标签，只有根目录标题的标签不行，其它标签都可以。安装了钓鱼插件也不建议使用，因为钓鱼插件会为条目打上`?`标签来进行复习，会影响Breadcrumbs的显示。\n\n\n```\n依赖插件：无\n标签：$:/tags/ViewTemplate\n字段：\n\tapex_tag: Contents\n\tlength_limit: 3\n\tlist-after: $:/core/ui/ViewTemplate/title\n\tuse_apex_tag: true\n```\n\n<$let selected-tiddler=\"Tiddler Breadcrumbs Template\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n"},{"title":"当天减一天","created":"20230603032442883","creator":"马不前","modified":"20230603032641801","modifier":"马不前","tags":"自定义字段内容","type":"text/vnd.tiddlywiki","text":"! 更复杂的情况\n\n```\nTimeform={{{ \n[<now \"0DD\">] \n+[subtract[1]]\n+[addprefix[-]]\n+[addprefix<now \"0MM\">]\n+[addprefix[2023-]]\n}}}\n```\n\n上面代码是我想做一个按钮，新建条目Timeform的值是当前日期减一天。也就是本来会生成的日期值，减去一天，并重新再生成类似的值。当然这个用quicker是可以很方便实现的，但太微里并没有这么方便。当然也可以有方便的方式，就是直接减去一大堆数值，不过我这里是作为演示来说明的。\n\n一步步来看，三个花括号不用再解释，这个是为了动态嵌入值。第一个`[<now \"0DD\">]`也不用解释了，这个是调用now宏，嵌入其日期的值。第二步`+[subtract[1]]`，这个subtract筛选器会把之前的输出内容当作数值进行减法计算，也就是-1。第三步`+[addprefix[-]]`这个是加上`-`作为前缀。那么假设当天的值是23，那么前面三个步骤得到的结果是什么呢？答案是“-22”。\n\nok，上面的如果能想明白，后面就很简单了。第四步`+[addprefix<now \"0MM\">]`增加一个前缀，其值是日期里的月份，不够两位用0补齐。假设是5月，那到这一步是“05-22”。第五步，`+[addprefix[2023-]]`加上一个“2023-”的前缀，最后就会拼接成“2023-05-22”，当天是“2023-05-23”。\n\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title=<<now \"YYYY年0MM月DD日0hh:0mm:0ss\">> \n\nTimeform={{{ \n[<now \"0DD\">] \n+[subtract[1]]\n+[addprefix[-]]\n+[addprefix<now \"0MM\">]\n+[addprefix[2023-]]\n}}}\n\ntags={{{ [<now \"0WW\">] +[addprefix<now \"0DD\">] }}}\nIsOtherText=\"time\" \nTimeNumber=\"30\" />\t\n\t当天减一天\n</$button>\n\n上面的代码还有一个问题，就是本来是02减1的，结果是1，但这个1在日期里应该要补齐的，但没有补充，除非再写一个判断式，但那就很麻烦了，所以后面还是要把这个补齐给删除，或者换其他方式。\n"},{"title":"当我想找一篇文章，它一定在这里。","created":"20230820032734246","creator":"WhiteFall","modified":"20230820102900101","modifier":"马不前","tags":"笔记思维","text":"''软件多少是伪命题，真相在集中存储''\n\n关于All in one还是什么N+1的争论一直没停下过。\n\n但实际上这不是问题，问题是：你必须能在一个地方，尽可能找到你储存的全部信息。\n\n“当我想找一篇文章，它一定在这里。”\n\n有这种感觉就够了。\n\n\"\"\"\n''多看supermemoguru网（如果让我选择一套文章印成经书，我愿意发行supermemoguru，改名叫《SM真经》）\n好了，学习科学，间隔重复，效率工具的探索就到这里吧。\n再研究下去，恐怕就是那句话了：\n“我最喜欢的浪费时间的项目，就是阅读提高效率的文章。”''\n\"\"\"\n\n—— 来自supermemo频道。点击链接查看QQ频道帖子【【渡劫飞升】（完）】：https://pd.qq.com/s/61m2o05on?shareSource=5\n\n选择tiddlywiki的一大好处在于，你会比使用其他笔记软件更熟悉你的笔记。因为不熟悉笔记和其中的数据结构是很难写出合格的筛选器并展示出来的。在这一点上，甚至不需要再依赖supermemoo记忆笔记。"},{"title":"导入印象笔记内容","created":"20230731065342830","creator":"林一二","keywords":"evernote enex","modified":"20230731075622914","modifier":"林一二","tags":"插件使用 从其它笔记软件迁移","text":"!! 把笔记从印象笔记中导出，生成enex格式\n\n使用[[vzhd1701/evernote-backup|https://github.com/vzhd1701/evernote-backup]]项目，安装方法见其 Readme。需要懂英文和使用命令行，不懂的可以配合AI解释。通用的安装方法为命令行里执行：\n\n```sh\npip install --user evernote-backup\n```\n\n安装完毕后，命令行里执行\n\n```sh\nevernote-backup init-db --backend china --force\n```\n\n然后按提示输入用户名密码，这个是开源项目，不会窃取你的信息，一般可以放心。\n\n输入完毕后，使用它把数据同步下来：\n\n```sh\nevernote-backup sync\n```\n\n然后导出成 enex 文件，以 MacOS 系统为例是这样，你可以把 `~/Downloads/` 替换成你自己的别的保存路径：\n\n```sh\nevernote-backup export ~/Downloads/\n```\n\n现在这个文件夹里就会有很多个待导入太微的 enex 文件了，每个相当于一个印象笔记的笔记本，包含了图片和文本。\n\n!! 导入太微\n\n由于[[https://github.com/Jermolene/TiddlyWiki5/issues/3176#issuecomment-1657853596]]这个 bug，目前导入太微后图片和文本会分开来，建议等它修复了再进一步导入。"},{"title":"德温·韦弗","caption":"Devin Weaver","created":"20230102060048519","creator":"马不前","modified":"20230102060153308","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Devin Weaver\n\n[[github|https://github.com/sukima]]"},{"title":"钓鱼插件","created":"20211017152824570","creator":"TiddlyGitUser","modified":"20220216132649775","modifier":"oflg","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"基于 TiddlyWiki 的[[渐进学习|https://www.yuque.com/supermemo/wiki/incremental_learning]]程序。''终身知识，深入脑海。''\n\n<<<.tc-big-quote\n[[钓鱼插件|https://oflg.github.io/fishing/]]使用理论上超 Anki 赶 SuperMemo 的 [[FSRS 自由间隔重复调度|https://zhuanlan.zhihu.com/p/454932406]]算法，把''笔记条目''作为[[抽认卡|https://www.zhihu.com/topic/21535352/intro]]进行渐进学习，并结合双链自动设置前置重要知识的优先级，以提升渐进学习体验。\n\n既然在 TiddlyWiki 中 ''Tiddler''（笔记条目）的形象说法是故事河中的小鱼，那么就把将其勾入脑海中的插件叫做钓鱼。\n<<<"},{"title":"钓鱼手册","created":"20211017162253448","creator":"oflg","modified":"20211017162352629","modifier":"oflg","tags":"钓鱼插件","type":"text/vnd.tiddlywiki","text":"https://oflg.github.io/fishing/"},{"title":"调试筛选器","created":"20211216162500468","creator":"林一二","modified":"20220118030151952","modifier":"林一二","tags":"筛选器 插件开发","type":"text/vnd.tiddlywiki","text":"!! 用清单直接显示\n\n结合 [[清单宏|https://bramchen.github.io/tw5-docs/zh-Hans/#ListWidget]] 和 [[currentTiddler 变量|https://bramchen.github.io/tw5-docs/zh-Hans/#currentTiddler%20Variable]]，可以在页面上展示出筛选器表达式的结果。\n\n```tw5\n<$list filter=\"[{!!title}addprefix[我是前缀哈哈哈]]\">\n<<currentTiddler>>\n</$list>\n```\n\n效果如下↓\n\n<$list filter=\"[{!!title}addprefix[我是前缀哈哈哈]]\">\n<<currentTiddler>>\n</$list>\n\n!! 用 Log 显示在开发者工具里\n\n[[log 微件|https://bramchen.github.io/tw5-docs/zh-Hans/#LogWidget]] [[使用带调用位置的Log微件|https://talk.tiddlywiki.org/t/set-let-a-word-of-advice/1842/7]]\n"},{"title":"定义输入框与变量","created":"20230901013833414","creator":"WhiteFall","modified":"20230901015914234","modifier":"WhiteFall","tags":"Wiki编程的定义","text":"<div class=\"tc-search tc-advanced-search\" style=\"margin-bottom:-12px;\">\n    <!-- negative margin for displaying matches -->\n    Combo search &nbsp;<$edit-text tiddler=\"$:/temp/commander/search-box\" type=\"search\" tag=\"input\" default=\"\"\n        placeholder=\"enter keywords or make a filter search e.g. [tag[myTag]]\"\n        focus={{$:/plugins/kookma/commander/config/AutoFocus}} />\n</div>\n<br>\n\n你可以通过筛选器`[<searchboxTid>get[text]]`，获取输入框输入的内容。`<searchboxTid>`变量代指`$:/temp/commander/search-box`条目。\n\n你也可以使用`<$set name='myvar' tiddler='$:/temp/commander/search-box'>`定义变量，并从指定条目中读取值并作为变量的值。\n\n```html\n<div class=\"tc-search tc-advanced-search\" style=\"margin-bottom:-12px;\">\n    <!-- negative margin for displaying matches -->\n    Combo search &nbsp;<$edit-text tiddler=\"$:/temp/commander/search-box\" type=\"search\" tag=\"input\" default=\"\"\n        placeholder=\"enter keywords or make a filter search e.g. [tag[myTag]]\"\n        focus={{$:/plugins/kookma/commander/config/AutoFocus}} />\n</div>\n```"},{"title":"定义微件和微件参数","created":"20230831044558847","creator":"WhiteFall","modified":"20230901021015899","modifier":"WhiteFall","tags":"Wiki编程的定义 微件","text":"示例：Text微件，JS类封装方式。\n\n微件属性(参数)的对应不同情况的多种指定方式：https://bramchen.github.io/tw5-docs/zh-Hans/#Widget%20Attributes\n\n```js\n/*\\\ntitle: $:/core/modules/widgets/text.js\ntype: application/javascript\nmodule-type: widget\n\nText node widget, <$text text=\"string\">\n\n\\*/\n(function () {\n\n\t/*jslint node: true, browser: true */\n\t/*global $tw: false */\n\t\"use strict\";\n\n\tvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\n\t/**\n\t * Inherit from the base widget class\n\t */\n\tclass TextNodeWidget extends Widget {\n\t\tconstructor(parseTreeNode, options) {\n\t\t\tsuper(parseTreeNode, options);\n\t\t}\n\n\t\t/**\n\t\t * Render this widget into the DOM\n\t\t * @param parent \n\t\t * @param nextSibling \n\t\t */\n\t\trender(parent, nextSibling) {\n\t\t\tthis.parentDomNode = parent;\n\t\t\tthis.computeAttributes();\n\t\t\tthis.execute();\n\t\t\t\n\t\t\t//定义微件参数 text，并通过this.getAttribute()方法获取参数。\n\t\t\tvar text = this.getAttribute(\"text\", this.parseTreeNode.text || \"\");\n\t\t\ttext = text.replace(/\\r/mg, \"\");\n\t\t\t\n\t\t\tvar textNode = this.document.createTextNode(text);\n\t\t\tparent.insertBefore(textNode, nextSibling);\n\t\t\tthis.domNodes.push(textNode);\n\t\t}\n\n\t\t/**\n\t\t * 计算 widget 的内部状态\n\t\t */\n\t\texecute() {\n\t\t\t// 文本节点无事可做\n\t\t}\n\n\t\t/**\n\t\t * 在需要时选择性地刷新 widget。如果需要重新渲染 widget 或其任何子控件，则返回 true\n\t\t */\n\t\trefresh(changedTiddlers) {\n\t\t\tvar changedAttributes = this.computeAttributes();\n\t\t\tif (changedAttributes.text) {\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\texports.text = TextNodeWidget;\n})();\n```\n\n使用widget编译指示定义微件\n\n```tw\n\\widget $my.widget(attribute:\"Default value\")\nThis is the widget, and the attribute is <<attribute>>.\n\\end\n```"},{"title":"多布局切换功能","created":"20230926084011139","creator":"林一二","modified":"20230926084600614","modifier":"林一二","tags":"基础知识","text":"!! Layout 目前翻译为「布局」。\n\n<<<\n之前也曾叫它「视图」，但是容易和 View 混淆。[[在繁体中文里翻译为「版面」|https://bramchen.github.io/tw5-docs/zh-Hans/#Alternative%20page%20layouts]]。\n<<<\n\n!! 常用视图\n\n!!! 白板\n\n[img[https://pic1.zhimg.com/80/v2-73dfc44959d9f793b6746910ea08ed58_1440w.webp]]\n\n!!! 日历（内容为林一二新冠一周病情日记）\n\n[img[https://pic2.zhimg.com/80/v2-bc2f1bea0dd0016a212bf004782c4431_1440w.webp]]\n\n!!! 默认故事流\n\n[img[https://pic2.zhimg.com/80/v2-13aa858ca7467849ce71f581546209f1_1440w.webp]]\n\n!! 视图切换\n\n可以用页面工具栏里的 Layout switcher 来打开视图列表切换\n\n[img[https://pic1.zhimg.com/80/v2-2cd7d142e8c902e2acf1dcac0523563c_1440w.webp]]\n\n快捷键：ctrl+shift+L\n\n[img[https://pic2.zhimg.com/80/v2-a257f0df025ea661ba60949ec009c9c5_1440w.webp]]\n\n有的视图插件也向页面工具栏提供了新按钮，例如这个一键切换到日历的按钮\n\n[img[https://pic2.zhimg.com/80/v2-993ca6a4b8a0acc2232518956486a67d_1440w.webp]]\n\n!! 开发新布局\n\n目前教程在 https://zhuanlan.zhihu.com/p/601040724，之后搬过来。"},{"title":"多文件版","created":"20231013042349244","creator":"林一二","modified":"20231013043156317","modifier":"林一二","tags":"基础知识","text":"基于 NodeJS 技术的版本，在大型知识库上启动和保存速度更快，经实践表明可以支持 1GB 的图片相册库、3万条目的时间记录日记库等等。\n\n会将每个笔记和笔记的标签等元信息都在硬盘上保存成文本文件，可以直接打开查看和编辑内容。[[添加图片]]也会直接把图片放在文件夹里，可以直接查看和编辑。\n\n!! 相关启动器\n\n# 一键启动：[[TidGi太记]]\n# 服务器部署：也可以用[[TidGi太记]]，或[[按官网教程安装 NodeJS|https://bramchen.github.io/tw5-docs/zh-Hans/#Installing%20TiddlyWiki%20on%20Node.js]]"},{"title":"翻译内容","created":"20230623160818638","creator":"林一二","modified":"20230623161320712","modifier":"林一二","tags":"高级知识","text":"经过多次讨论，目前还没有很好的翻译框架，详见：\n\n# [ext[How to translate 3rd party plugin?|https://talk.tiddlywiki.org/t/how-to-translate-3rd-party-plugin/5435]]"},{"title":"凡尘芥之","created":"20230513070322597","creator":"WhiteFall","modified":"20230513070348507","modifier":"WhiteFall","tags":"","type":"text/vnd.tiddlywiki","text":"凡尘芥之，一个并没有什么典故的名字，但包含了我的现在和未来，“凡尘”有我现在的名字，“芥之”则会成为未来的常用名，所以也就诞生了两层含义:\n\n# 现实中的我，包括现在和未来\n# 尘世中的草芥，平凡且自由\n\n[[个人数字花园|https://fcjz.github.io/notebox]]\n\n[[Github|https://github.com/fcjz]]"},{"title":"反向链接","created":"20211003072101507","creator":"林一二","modified":"20211003083619574","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"太微内置了反向链接基础能力，插件开发者一般是通过[[筛选器]]来使用它们开发不同展示方式的反向链接插件（例如本知识库内置的[[反向链接插件|$:/plugins/linonetwo/inverse-link-and-folder]]），而普通用户在安装反向链接相关插件后，笔记底部（或插件定义的其它位置）就会出现反向链接内容。\n\n!! 笔记底部的反向链接\n\n最直观的反向链接就是此笔记底部的 `链入 (other)-[]->(this)` 了，它给出了所有通过 `[[xxx]]` 链接语法引用了当前笔记的其它笔记。\n\n而在太微里还有一种引用其它笔记的方法，[[嵌入]]，如果有其它笔记嵌入了当前笔记，当前笔记的底部就会显示 `嵌出 (other)-{}->(this)` ，显示嵌入了当前笔记的其它笔记。\n\n太微里还常用[[标签]]功能来表示文件夹结构，所以笔记底部还会出现 `此文件夹中的文件`，显示有哪些其它笔记用当前笔记的标题作为标签。相反地，`此文件所在的文件夹` 显示了当前笔记加了哪些标签，其实等价于笔记标题下面显示的当前笔记的标签列表。"},{"title":"反向链接嵌入嵌出例子","created":"20211003082002788","creator":"林一二","modified":"20211003082023682","modifier":"林一二","tags":"反向链接","type":"text/vnd.tiddlywiki","text":"{{反向链接}}"},{"title":"返回默认版面","created":"20230226013317471","creator":"林一二","modified":"20230305122817289","modifier":"林一二","tags":"开发新版面 版面","type":"text/vnd.tiddlywiki","text":"通过把 `$:/layout` 系统状态条目的内容置空，就能返回默认版面了。\n\n\n```\n<$action-setfield $tiddler=\"$:/layout\" text=\"\"/>\n```\n\n包装成按钮的效果详见[[Github上的PR|https://github.com/Jermolene/TiddlyWiki5/pull/7197/commits/2852d849dd125dcaa9412c059ca1b802c758d7c4#diff-7ded7e93c04fc75d42148f2068baaf7a51a6d76c4bd48741c8a30e92c74a4755]]\n\n```\ntitle: reset-layout\ntags: $:/tags/PageControls\ncaption: {{$:/core/images/reset-layout-button}} {{$:/language/Buttons/ResetLayout/Caption}}\ndescription: {{$:/language/Buttons/ResetLayout/Hint}}\n\n\\whitespace trim\n<$button tooltip={{$:/language/Buttons/ResetLayout/Hint}} aria-label={{$:/language/Buttons/ResetLayout/Caption}} class=<<tv-config-toolbar-class>>>\n\t<$action-setfield $tiddler=\"$:/layout\" text=\"\"/>\n\t<$list filter=\"[<tv-config-toolbar-icons>match[yes]]\">\n\t\t{{$:/core/images/reset-layout-button}}\n\t</$list>\n\t<$list filter=\"[<tv-config-toolbar-text>match[yes]]\">\n\t\t<span class=\"tc-btn-text\"><$text text={{$:/language/Buttons/ResetLayout/Caption}}/></span>\n\t</$list>\n</$button>\n```"},{"title":"范本与文本引用","created":"20230821050637305","creator":"WhiteFall","modified":"20231001115003468","modifier":"WhiteFall","tags":"嵌入","url":"https://bramchen.github.io/tw5-docs/zh-Hans/#Transclusion%20with%20Templates","text":"! Transclusion with Templates\n\n范本和文本引用有很大相关性。为某个范本指定文本引用所指向的目标条目名称。文本引用，引用的谁？这个谁，就是目标条目。\n\n文本引用，描述一个 【文本片段】（字符串）为 一个条目的字段，或一个数据条目内的一个索引。\n\n文本引用或许可以解释为用于引用某个具体的文本内容。比如说引用某个条目的某个字段的文本内容。\n\n文本引用就是指代某个条目或者某个条目的某个字段，比如说，这个，这个条目的某个东东，那个的某个东东。此文本引用也包括currentTiddler、thisTiddler等变量。\n\n\n范本条目：[[html-tiddler|$:/core/templates/html-tiddler]]\n\n* `{{A||$:/core/templates/html-tiddler}}`，嵌入范本条目的简单理解。范本条目中最重要的核心 功能实现 是文本引用。\n* 首先指定一个通用的文本（比如说任意的一段话），不指定具体是什么内容（使用文本引用，为内容留空用于放入内容）。这就像作文模版一样，指定一个作文模版格式，但不指定放入的内容。\n* 然后为这个范本指定A条目作为文本引用的具体条目对象，这时候文本引用有了具体内容（条目A），也有了通用的文本（比如说任意的一段话），这样就形成了一个完整的内容。\n* 最后在嵌入到当前条目中。\n* 似乎像似：范本引用条目A的数据，这两个条目叠加在一起，最后嵌入到条目中。\n\n\n!! 示例\n\n!!! 一个预先定义好的范本，可漂亮地呈现标签\n\n您可以套用系统范本 ``$:/core/ui/TagTemplate`` 到一个标签，即可看到一个有下拉选菜单的标签丸：\n\n```\n{{Transclusion in WikiText||$:/core/ui/TagTemplate}}\n```\n\n显示为 {{Transclusion in WikiText||$:/core/ui/TagTemplate}}\n\n!! 用法\n\n经由范本嵌入就像套用遮罩：假设来源条目包含通用的参照（如遮罩中的眼孔），这些将被替换为目标条目内容（像是戴面罩的人的眼睛）。\n\n范本可以套用于任何条目，不一定是当前条目。完整标记语法为 `{{<目标>||<范本>}}`。缺省的 <目标> 是当前条目 （我们使用于上面的示例中）。\n\n!! TemplateTiddlers范本条目\n\n范本条目实际上并非一个条目类型，它是一个可用于条目的角色。\n\n范本是一种重复使用 WikiText 区块的方法。\n\n借由嵌入范本结合两个条目扩充嵌入的基本功能：\n\n* 包含要显示 WikiText 的范本条目。它可以包含嵌入的引用字段于当前条目\n* 当解析参考的字段时，目标条目即标识为当前条目\n\n范本化的最佳示例是 TiddlyWiki 的主要故事河。每个开启中的条目呈现，通过 ViewTemplate 指定如何呈现每个字段。"},{"title":"访问本地文件：route路由模块","created":"20230602020350788","creator":"WhiteFall","modified":"20230602052213463","modifier":"WhiteFall","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"备忘录。\n\n慢慢修改：\n\nroute模块，使用正则匹配URL路径，然后这个路径可以专用于任意用途，比如用正则匹配/files路径，全拼https://xxx.xxx.xx:port/files/<绝对路径>\n可以获取到本地的任意文件。然后你可以使用 XMLHttpRequest().open()发送请求，其中参数填具体URL路径，比如专用的/files路径。也就是route的真正含义。\n这个路径你可以使用route模块自己定义，你可以定义为/md路径，并为他分配访问该路径时相应的动作或方法。然后使用XMLHttpRequest().open()发送请求，执行方法。\n\n这个东西就像端口一样，分配和访问不同的程序。一个端口一个程序，route则是一个路径定义分配一个相应响应处理方式。\n\n\n微件，需要配合 nodejs 那边的 route ，它们才能操作 nodejs 端的文件系统能力。\n\n在 route 里用 fs，服务端才能用fs，所以要在route里用。参考routes/get-file.js。\n\nroutes/get-file.js赋予的能力：可以直接写绝对路径访问本地文件：`http://192.168.66.21:5213/files/D:/Dropbox/21-Sandox/10-Picture/wine.png`\n\n[[$:/core/modules/server/server.js|https://bramchen.github.io/tw5-docs/zh-Hans/#%24%3A%2Fcore%2Fmodules%2Fserver%2Fserver.js]]\n\n[[$:/core/modules/server/routes/get-file.js|https://bramchen.github.io/tw5-docs/zh-Hans/#%24%3A%2Fcore%2Fmodules%2Fserver%2Froutes%2Fget-file.js]]\n\n\n如何使用Widget访问route模块？\n\n可以使用 Ajax 请求访问该路由。\n\nhttps://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/dom/http.js\n\nhttps://github.com/Jermolene/TiddlyWiki5/blob/68a7655396d295d5070c46822d9022e264a37d09/plugins/tiddlywiki/tahoelafs/saver.js#L24\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open\n\nChatGPT的回答：\n\n要在 TiddlyWiki 的 Widget 中使用 `$:/core/modules/server/routes/get-file.js`，您可以使用 Ajax 请求访问该路由。下面是一个例子：\n\n```js\n// 创建一个新的 XMLHttpRequest 对象\nvar xhr = new XMLHttpRequest();\n\n// 指定请求类型和 URL\nxhr.open('GET', '/routes/get-file.js?file=yourfilename', true);\n\n// 当请求完成时执行以下回调函数\nxhr.onreadystatechange = function() {\n    if (this.readyState === 4 && this.status === 200) {\n        // 响应内容已准备好，可以使用 xhr.responseText 访问它\n        console.log(xhr.responseText);\n    }\n};\n\n// 发送请求\nxhr.send();\n```\n\n请注意，上述代码中的 `'/routes/get-file.js?file=yourfilename'` 需要替换为您实际想要访问的文件名。\n\n此外，如果您要访问的文件需要登录才能访问，您可能需要在请求中包含您的身份验证信息，例如 HTTP Cookie 或授权令牌。具体方法取决于您的身份验证系统。\n\n\n!!! 参考官方链接\n\nhttps://tiddlywiki.com/#WebServer\n\nhttps://tiddlywiki.com/#WebServer%20API%3A%20Get%20File\n\nhttps://tiddlywiki.com/#Using%20the%20integrated%20static%20file%20server\n\nhttps://tiddlywiki.com/#WebServer%20API"},{"title":"非线性笔记对知识管理系统的要求","created":"20220108101010863","creator":"林一二","modified":"20220108102503660","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"* 能充分利用过去的长尾输入\n** 如果过去的积累沉底钓不上来了\n** 那么输出能力在当前的邻域里（能想得起的少数近期的卡片）依然近似是线性的\n* 方法：各种PKM流程+半自动化执行，形成赛博协同系统；\n** 例如[[钓鱼插件]]自动调度对关键的老笔记的复习。\n** PKM流程很容易找，而半自动化执行就需要一个强大的知识管理系统开发框架（例如太微）了。"},{"title":"浮华的黑板","created":"20230417041239680","creator":"WhiteFall","modified":"20230417043437913","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"一个比较有意思的现象：有时候人们往往对自己的目标熟视无睹，而对目标以外的东西吹毛求疵。\n\n经典的案例大概就是“漂亮的黑板”，其实对于内容创作，一块普通的黑板加上几盒粉笔就已经足够使用了，甚至可以更加简陋一点。而某些情况下，却会要求使黑板更好看，为黑板装好看的花边和其他有趣的装饰，为每一个粉笔装上特制的粉笔套筒。对于这些工具的装饰其实到没什么。但比较难受的是将用于授课或书写的黑板变成用于欣赏和占用大量时间的消遣工具。\n\n（待修改，欢迎修改补充）\n"},{"title":"复选框或代办插件","created":"20230519035209261","creator":"WhiteFall","modified":"20230519035903416","modifier":"WhiteFall","tags":"插件使用 插件列表","type":"text/vnd.tiddlywiki","text":"\n!! tw5-checklist\n\n* https://tgrosinger.github.io/tw5-checklist/\n* https://github.com/tgrosinger/tw5-checklist\n\n!! TW-Karya\n\n* https://github.com/adithya-badidey/TW-Karya\n* https://github.com/kookma/TW-Kara\n\n!! TWE-Mehregan\n* https://kookma.github.io/TWE-Mehregan/\n\n\n!! todotxt-TW5\n* https://github.com/todotxt/todo.txt\n* https://github.com/michaeljmcd/todotxt-TW5\n* https://michaeljmcd.github.io/todotxt.html#%24%3A%2Fplugins%2Fmichaeljmcd%2Ftodotxt\n\n!! nico/projectify\n\n"},{"title":"改进太微教程","caption":"改进太微教程","created":"20140820151051019","modified":"20220402130228487","tags":"Community","type":"text/vnd.tiddlywiki","text":"任何人都可提交改进在 https://tiddly-gittly.github.io/TiddlyWiki-Chinese-Tutorial/ 上的太微教程。（改进核心代码，必须使用一个更复杂的过程，因为在提交前，需要在浏览器和 Node.js 环境下测试更改）。\n\n# 若尚无 ~GitHub 帐号，请于 https://github.com 创建一个\n# 于 https://tiddly-gittly.github.io/TiddlyWiki-Chinese-Tutorial/, 在您要改善的条目上点击 \"编辑\"\n# 您应该会看到一个粉红色的横幅与文本： //您能帮我们改进这个文档吗？了解如何 // \n# 点击该外部链结 ...''编辑在 ~GitHub 上的此条目''\n## 会提示您 \"you need to fork this repository to propose changes\"。\"fork\" 是你自己的存储库副本中包含了您建议的更改\n# 应该会开启新的浏览器标签，准备编辑该在 github.com 的条目\n# 在该条目文本的编辑框下面，你应该可以看到一个标示 ''Propose file change''\n# 输入一个简短的标题来解释此更改（例如， \"Clarify attribute syntax instability\"）\n# 必要时，也可输入更详细的描述\n# 点击标示 ''Propose file change'' 的绿色按钮\n# 再接下来的画面，点击标示 ''Create pull request'' 的绿色的按钮\n\n[[@linonetwo|https://github.com/linonetwo]]、[[@Gk0Wk|https://github.com/Gk0Wk]]、[[@oflg|https://github.com/oflg]]或其他核心开发者可能会合并你的请求，以便将其合并到 https://tiddly-gittly.github.io/TiddlyWiki-Chinese-Tutorial/ 的下一个版本。"},{"title":"盖尔定律","created":"20230820032638222","creator":"WhiteFall","modified":"20230820032711697","modifier":"WhiteFall","tags":"插件开发","text":"!! 定义\n\n\"All complex systems that work evolved from simpler systems that worked. [And conversely...] A complex system designed from scratch never works and cannot be patched up to make it work.\"\n\n所有切实可行的复杂系统势必是从切实可行的简单系统发展而来的。一个一开始就设计复杂系统永远无法运行，也无法通过修补使其工作。你必须从一个简单的系统开始。\n\n盖尔定律说明了设计高度复杂的系统很可能会失败。它们很难一蹴而就，更多的是从简单的系统逐渐演变而来。\n\n!!阐述\n\n仔细观察可以发现，无论是一个互联网软件系统的架构，还是一个城市的建设，载人航天飞机的建造，都不是一开始就事无巨细设计好的，没有任何人可以模拟真实场景中的各种内外部因素，也就是说在一个系统逐步成熟和复杂化的过程中，是不断对外部无数变量进行响应和调整的过程"},{"title":"高级知识","created":"20230603022655867","creator":"马不前","modified":"20230603023120071","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"新增一个条目，放在[[基础知识]]的后面。新增的原因在于我发现基础知识里的有些条目并不十分基础，有时也是需要讲解才能明白的。\n\n基础知识是一定要掌握的，高级知识是要尽可能掌握的。而其他像[[自动化]]、[[排查问题]]、[[使太微更易用]]则是在前面两个基础上实现的。\n\n当然有编程经验的可以直接参考[[太微原理]]。"},{"title":"给插件配置提供预置值","created":"20230623170534562","creator":"林一二","keywords":"default config 默认 设置","modified":"20230721080150312","modifier":"林一二","tags":"写插件配置页面","text":"可以新建文件 `config.multids` 来提供一系列默认值， 内容类似：\n\n```tw5\ntitle: $:/config/ExternalAttachments/\n\nEnable: yes\nDisableForImage: yes\nUseAbsoluteForDescendents: no\nUseAbsoluteForNonDescendents: yes\n```\n\n这样就可以在运行时批量生成四个条目 `$:/config/ExternalAttachments/Enable` 等等，并带有相应的值 `yes` 等等。\n\n\n"},{"title":"根据条件展示内容","created":"20220120171433301","creator":"林一二","modified":"20230603023622159","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"Reveal 的 default 参数是一个值，不过我们可以通过 `{{{ }}}` 语法来使用筛选器表达式。\n\n```xml\n<$reveal  default={{{ [] }}} >\n\t\n</$reveal>\n```\n\n此外 list 可以直接传入筛选器表达式。 \n\n```xml\n<$list filter=\"[all[current]backlinks[]first[]sort[title]]\">\n\t满足条件时才会展示\n</$list>\n\n<!-- show search bar if there are at least one template -->\n<$list filter=\"[all[tiddlers+shadows]tag[$:/tags/TextEditor/Template]!is[draft]count[]compare:number:gt[0]]\">\n  <$edit-text tiddler=\"$:/state/search-template-list/input\" default=\"\" placeholder=\"search template name\" tag=input class=\"linonetwo-template-list-search\" />\n</$list>\n```"},{"title":"更多用户评论","created":"20220118094326045","creator":"林一二","modified":"20220118094418595","modifier":"林一二","tags":"他们是这样评价太微的","type":"text/vnd.tiddlywiki","text":"<<<.tc-big-quote\n我觉得 TiddlyWiki 的掌握可以分阶段来，从 wikitext、transclude 到 macro、自定义 css ，再到 widget、viewtemplate 、pagetemplate，甚至去读源码…\n逐渐从基础的使用到可以越来越熟练地运用 tw 给的强大工具来根据自己的需求进行定制。毕竟自己定制的才是最香的。\n如果能把 TiddlyWiki 作为长期笔记使用，比如4到5年，每次参考一点他人的 plugin 以及定制方法，日渐精进，最后都能成为资深用户吧。\n<<<集智俱乐部注意力与知识管理群群友-田涛"},{"title":"更细粒度的链接","created":"20230603061307186","creator":"马不前","modified":"20230603064838500","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"虽然在太微里，条目是越原子化越好，拆分成多个条目，然后再运用各种方式组合起来，但我还是希望有一种更细粒度的链接方式。类似于epub电子书里的注释，点击可以跳转到另一页面去，再点击又可以跳转回来。我之前好像有做到过，但文档后面被我删除了大概，所以现在也找不到了。\n\n我一直尝试着可以实现这个功能，然后包装成宏，但试了很多次还是没有解决。只能先记录在这里了。\n\n我尝试做了一个宏，但我发现这只有在两个条目同时都在故事河中，才能相互跳转。除非我们把这个条目命名为html文件，这样才能当两个条目有一个不在故事河时正常跳转过去。感觉这个还是好麻烦啊，得等官方来修复了。\n\n我本来想多加一个参数，也就是条目名称来传递，结果跳转到了一个空的html文件中，无法修复了。这就很麻烦了。所以只能等官方下手来解决了。"},{"title":"更新插件","created":"20211028155640037","creator":"林一二","modified":"20211028155905930","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"首先，是像[[使用插件源]]里的操作一样，打开控制面板-插件-获取更多插件，然后打开插件源的弹出窗口：\n\n[img[更新插件-截图.png]]\n\n打开「更新」标签页，点击「更新 xx 个插件」即可。"},{"title":"公开你的Wiki时可能的心理障碍","created":"20230512030328565","creator":"WhiteFall","modified":"20230513070525629","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":";[[WhiteFall]]\n:我有想过公开自己的wiki，但我克服不了两种心理关卡。因为我太在意它们了。所以其一是怕被指责，其二是不安全感。\n\n\n;[[FSpark]] 2023/5/11 18:59:17\n:其实我也一样，但我也得试着去Open了\n\n:要想留下痕迹，被judge就不可避免，我深受这种因噎废食之害，与其内耗到被自己都遗忘，不如开放再迭代共同成长，能在途中收获zm那种不期而遇更是美事一桩\n\n;[[zm]]\n:我更新wiki的内驱力完全来自我自己内心，不期而遇是锦上添花，是一个没有白做这件事的证明\n\n\n;zm 2023/5/11 19:12:52\n:原本wiki是私人的，后来发现别人做的很有意思，又读了几篇数字花园的文章，就决定直接公开化了\n\n;王涛 2023/5/11 19:13:02\n:不会玩，先逛你们的花园，看看花花草草\n\n;王涛 @zm\n> 原本wiki是私人的，后来发现别人做的很有意思，又读了几篇数字花园的文章，就决定直接公开化了\n:这个是成长型笔记，这个概念我很喜欢。\n\n;FSpark 2023/5/11 19:18:09\n:其实也跟网络环境有关，现在太多戾气和时空警察，很少有耐心与宽容了，被攻击第一反应都是查成分翻史册抠字眼的，难顶\n\n\n;机杼 2023/5/11 19:37:24\n:其实不用太担心\n\n:我写了这么多也没谁给我发邮件\n\n:@zm 你经常收到这类邮件吗？\n\n:想写就写一下，不想写或者懒得写就不写，反正很自由的状态。至于别人的看法，一般都没人关注的，哪有什么看法。我觉得这和在知乎这类平台上发表要好。\n\n:别人得有github账号，然后专门去仓库里提issue评论才行。\n\n:唯一要考虑的就是公开之后，基本上就类似于开源了。这个是不可逆的。\n\n---\n\n[[FSpark]]的每个人都是一本书条目节选\n\n<<<.tc-big-quote\n我希望每个人死后尸体都能自动变成一本书，书的内容就是死者一生。\n\n这样一来，\n\n有人成了名著，有人成了禁书，\n\n有人变成菜谱，有人变成地图，\n\n有人是美图秀秀使用手册，有人是小旅馆的开房登记薄……\n\n整个世界就是一个巨大的图书馆，\n\n我们读着别人，写着自己，等着被读。\n<<<\n\nref:[[每个人都是一本书|https://wiki.fspark.me/#%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%98%AF%E4%B8%80%E6%9C%AC%E4%B9%A6]]\n\n\n;[[凡尘芥之]]\n:顺便说说我个人的想法，之前学业繁忙没能来得及参与讨论:我也有whitefall的两点障碍，但是可以克服，因为个人比较擅长辩论和展示自我，如果碰上有人质疑我我也会认真回复（不一定是反驳），并且我以前有过在其它平台认识的笔友，我知道自己所发表的这些并不会引起他们的愤怒，至于其他访客，我并不十分在意，毕竟我无论怎么做都不会让所有人满意，并且我没有设置评论（目前已经没有了），只留了邮件的联系方式和一个匿名留言板，如果有人通过留言板辱骂我，我可以反驳或者清除，这对我无法造成影响；如果是邮件，嗯，如果一个人能对我一个条目写的内容如此上心甚至不惜在国内这个邮件没落的时代发信来认真辱骂我，我觉得自己也是乐意和他探讨的。\n"},{"title":"官方插件","created":"20221213072313240","creator":"马不前","modified":"20230429134547801","modifier":"WhiteFall","order":"5","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"\n! TiddlyWiki官方插件介绍\n\n<<<\n''共62个插件：47 + 15（CodeMirror附加组件）。''\n\n''大部分官方插件都是为了开发新的内容，所以一般用户可能暂时用不上，但新的插件代表着新的可能。我们期待tiddlywiki发展更好。''\n<<<\n\n!常用插件\n;tiddlywiki/highlight-legacy\n:为传统浏览器提供Highlight.js语法高亮功能。\n;tiddlywiki/menubar\n:该插件提供了一个具有多个功能的菜单栏。\n;tiddlywiki/evernote\n:Evernote迁移工具。这个插件包含协助从Evernote ENEX文件迁移内容的工具。\n;tiddlywiki/dynannotate\n:Dynannotate插件允许创建和显示文本内容的注释。这是钓鱼插件的配套插件，推荐安装。\n;tiddlywiki/bibtex\n:BibTeX导入器，BibTeX插件提供了一个反序列化器，可以将.bib文件中的书目条目转换为单独的tiddlers。\n;tiddlywiki/qrcode\n:二维码插件提供了一个宏，使任何文本都可以被呈现为二维码。智能手机可以使用或内置QR码阅读器，使其成为在设备间传输信息的便捷手段。\n;tiddlywiki/codemirror\n:CodeMirror编辑器及附加组件AddOns，这个插件提供了一个基于CodeMirror的增强型文本编辑器组件。基本配置被设计成尽可能的轻量级，大小只有235kb左右。其他功能可以通过插件库中的CodeMirror AddOns来安装。\n;tiddlywiki/highlight\n:这个插件使用Ivan Sagalaev的highlight.js的11.4.0版本提供代码块的语法高亮。这个插件不能在不完全支持JavaScript ES6（2015）的浏览器上运行。\n;tiddlywiki/katex\n:用于数学排版的KaTeX库。这是一个用于数学和化学排版的TiddlyWiki插件，基于Khan Academy的KaTeX（v0.16）和通过Katex扩展的mhchem。它是完全独立的，不需要互联网连接就能工作。它可以在浏览器和Node.js下工作。\n;tiddlywiki/markdown\n:这是一个用于解析Markdown文本的TiddlyWiki插件，使用Remarkable库。如果安装了KaTeX TiddlyWiki插件，就可以使用 remarkable-katex Remarkable插件来启用KaTeX支持。它是完全独立的，不需要互联网连接就能工作。它在浏览器和Node.js下都能工作。\n;tiddlywiki/external-attachments\n:TiddlyDesktop的外部附件，这个插件提供了对作为外部附件导入tiddlers的支持。这意味着不是将二进制文件作为独立的tiddlers导入，而是将其作为 \"瘦小的 \"tiddlers导入，通过_canonical_uri字段引用原始文件。这减少了wiki的大小，从而提高了性能。然而，这确实意味着维基不再是完全独立的。\n\n! tiddlywiki探索插件\n;tiddlywiki/internals\n:用于探索TiddlyWiki内部的工具.\n;tiddlywiki/tw5.com-docs\n:来自tiddlywiki.com的文档\n;tiddlywiki/twitter\n:Twitter嵌入工具\n;tiddlywiki/savetrail\n:自动下载修改过的tiddlers，并保存为JSON。\n;tiddlywiki/help\n:浮动的帮助面板，这个插件在窗口的右下方提供了一个覆盖式帮助面板。\n;tiddlywiki/github-fork-ribbon\n:这个插件提供了一个横跨窗口角落的对角线丝带。它类似于GitHub的 \"Fork me on GitHub \"色带的设计。\n;tiddlywiki/stacked-view\n:堆叠卡片故事视图，这个插件提供了一个新的故事可视化，以一叠卡片的形式显示各个花絮。它目前是实验性的，不完整的。\n;tiddlywiki/dynaview\n:动态滚动和缩放效果，这个插件使得建立用户界面成为可能，它可以通过滚动或缩放动态地响应浏览器视口的变化。\n;tiddlywiki/freelinks\n:这个插件增加了自动生成链接到tiddler标题的功能。请注意，当有大量的tiddlers时，自动生成链接的速度会非常慢。\n;tiddlywiki/consent-banner\n:用于GDPR等的同意书横幅，它会显示一个横幅，邀请用户接受或拒绝cookie，并在本地存储中跟踪他们的同意，以便在后续访问时隐藏该横幅。\n;tiddlywiki/powered-by-tiddlywiki\n:这个插件添加了一个 \"Powered by TiddlyWiki \"的横幅，链接到https://tiddlywiki.com。目前它非常基本，但我们计划通过使它更容易定制来改进它。\n;tiddlywiki/classictools\n:TiddlyWiki经典工具，这个插件提供了与TiddlyWiki Classic一起工作的设施。它被用于TiddlyWiki Classic的构建过程。它的附加功能有，一个用于读取TiddlyWiki Classic .recipe文件的tiddlerdeserializer模块。用于构建TiddlyWiki Classic的模板。更多细节见https://github.com/TiddlyWiki/tiddlywiki.com。\n;tiddlywiki/text-slicer\n:将文本切成片段的工具，依赖于tiddlywiki/sax插件。这个插件包含一些工具，帮助将长文本切成单独的小块。它目前可以直接处理XHTML文档，并通过转换为HTML处理与Microsoft Word兼容的DOCX文档。\n;tiddlywiki/xlsx-utils\n:XLSX电子表格实用工具，依赖插件tiddlywiki/jszip。这个插件提供了一种灵活的方式来从Excel文件中导入tiddlers。它基于js-xlsx库。\n;tiddlywiki/innerwiki\n:截图和测试的内部维基，总的来说是在wiki中嵌入wiki（这个wiki称之为innerwikis）。在浏览器中，innerwikis是以嵌入式iframe的形式显示。在Node.js中，谷歌的Puppeteer被用来将innerwikis加载为屏幕外的网页，然后将其快照为PNG图像。\n;tiddlywiki/cecily\n:可缩放的故事视图（塞西莉），这个实验性的插件提供了一个新的故事可视化，在一个无限的画布上以可调整大小的瓷砖形式显示单个的Tiddlers。Cecily是基于TiddlyWiki Classic的一个早期插件：http://jermolene.com/cecily。Cecily目前处于开发的早期阶段，还没有实现什么功能。\n;tiddlywiki/share\n:通过URL共享tiddlers。这个实验性插件提供了通过URL共享tiddlers的工具，包括：在启动时从浏览器位置哈希中加载一组提示符的能力，用向导和模板从一组提示符中创建URLs\n\n\n! 供开发者参考的插件\n;tiddlywiki/tw2parser\n:TiddlyWiki经典解析器。\n;tiddlywiki/xmldom\n:xmldom库，这个插件将xmldom打包供其他插件使用。它不提供任何终端用户可见的功能。\n;tiddlywiki/comments\n:主题式标签的评论，这个插件提供了一个简单的手段来为tiddlers添加线程评论。\n;tiddlywiki/railroad\n:这个插件提供了一个`<$railroad>`部件，用于将铁路图生成为SVG图像。\n;tiddlywiki/async\n:async.js库，这个插件将async.js打包供其他插件使用。它不提供任何终端用户可见的功能。\n;tiddlywiki/tahoelafs\n:Tahoe-LAFS saver，这个插件提供了一个保存模块，用于保存Tahoe最小权限文件系统下的更改。\n;tiddlywiki/nodewebkitsaver\n:个插件提供了一个保存模块，用于在NW.js（以前称为node-webkit）下直接使用TiddlyWiki时保存更改。\n;tiddlywiki/hammerjs\n:HammerJS触摸手势库，这个插件将HammerJS打包供其他插件使用。它不提供任何终端用户可见的功能。\n;tiddlywiki/jszip\n:JSZip library，这个插件提供了处理Zip文件的基元。它还使JSZip库可以被其他插件使用。\n;tiddlywiki/sax\n:这个插件将sax.js打包供其他插件使用。它不提供任何终端用户可见的功能。\n;tiddlywiki/blog\n:博客发布工具，这个插件包含帮助发布博客的工具。用于建立静态HTML页面和文章的模板和工具。\n;tiddlywiki/d3\n:D3插件是一个与D3.js数据可视化框架（http://d3js.org）整合的概念验证演示。它目前还没有达到可以用于任何有用的状态。\n;tiddlywiki/mobiledragdrop\n:移动拖放式垫片，这个插件提供了一个 \"垫片\"，可以在移动浏览器上实现HTML 5兼容的拖放操作，包括iOS和Android。安装该插件后，有必要第二次保存HTML文件，才能完全启用。\n;tiddlywiki/googleanalytics\n:来自谷歌的网站访问者统计数据，这个插件使你能够使用谷歌分析来跟踪访问你的在线TiddlyWiki文件。基于谷歌的官方代码。\n;tiddlywiki/filesystem\n:将变化从node.js服务器同步到本地文件系统上。文件系统插件在Node.js下使用，将tiddler的变化同步到文件系统。在浏览器中使用时，它是惰性的。\n;tiddlywiki/tiddlyweb\n:将变化从浏览器同步到TW5（node.js）或TiddlyWeb服务器上，这个插件在浏览器中运行，以同步TiddlyWeb兼容的服务器（包括TiddlyWiki 5本身，在Node.js上运行）的tiddler变化。在Node.js下运行时，它是惰性的。由于该插件提供了与服务器同步设置的机制，所以通过浏览器禁用该插件不能被撤销。\n;tiddlywiki/browser-sniff\n:浏览器特征检测，这个插件增加了一些$:/info/ tiddlers，包含了关于当前浏览器的信息。它允许你创建的内容以响应不同浏览器的方式呈现。例如，https://tiddlywiki.com 使用这个插件，根据用户的浏览器，为其提供最佳的入门选项。\n;tiddlywiki/browser-storage\n:浏览器中的本地存储，这个插件使TiddlyWiki能够在浏览器本地存储中保存tiddlers。这意味着变化被储存在浏览器中，并在重新加载基本维基时自动重新应用。在启动时，该插件从本地存储中读取tiddlers。任何与文件中内置的tiddlers相同的都会从本地存储中删除。一旦wiki启动并运行，任何tiddler的变化都会直接写入本地存储中。请谨慎地使用这个插件。有一些未解决的问题和开放性问题。\n;tiddlywiki/aws\n:亚马逊网络服务的扩展和工具，这个插件提供了几个与亚马逊网络服务合作的工具。用于将TiddlyWiki保存为ZIP文件中的单个JavaScript文件的模板，可以作为AWS Lambda函数执行。在这种形式下，TiddlyWiki是一个自包含的单一文件，同时包含代码和数据，就像独立的HTML文件配置一样。在TiddlyWiki的Node.js和Lambda配置下，可用于与AWS服务互动的命令。一个新的 \"aws-encodeuricomponent \"过滤器，其作用与核心的 \"encodeuricomponent \"过滤器类似，只是它对单引号字符进行了额外编码。"},{"title":"官方单文件版本","created":"20231001020450171","creator":"马不前","modified":"20231013043242816","modifier":"林一二","tags":"TiddlyWiki发行版本介绍","text":"只包含中文语言插件的[[单文件版]]，可以在[[TiddlyDesktop]]中使用。\n\n[[下载|https://bramchen.github.io/tw5-docs/zh-Hans/#GettingStarted]]"},{"title":"管理私有内容的可见性","created":"20211008054938916","creator":"林一二","modified":"20211008055423854","modifier":"林一二","tags":"保存私有内容","type":"text/vnd.tiddlywiki","text":"* 可见性等级一：不知道自己不知道\n** 通过加 Tag 的方式，用[[TW-Locator]]在父文件夹里动态地展示子条目，这样子条目不可见时，动态文件夹列表里就不会展示子条目\n** 通过反向链接的方式，隐私条目里加上到某个公开条目的链接，这样有权限时，在公开条目底部的反向链接里可以看到隐私条目，无权限时，反向链接里不会有隐私条目\n* 可见性等级二：知道自己不知道\n** 公开条目里加上到某个隐私条目的链接，这样不管有没有权限，都看得到引用了一个别的条目，无权限时，点进条目会显示该条目不存在\n* 可见性等级三：公开条目\n** 如果你所有的条目都放在一个文件夹里，那它们就都处于可见状态 "},{"title":"国际社区Newsletter","created":"20230515132248865","creator":"林一二","modified":"20230515132304174","modifier":"林一二","tags":"B站直播 任务","type":"text/vnd.tiddlywiki"},{"title":"宏","created":"20211011135955909","creator":"林一二","modified":"20230603023551979","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"宏就类似于[[嵌入]]，是帮你自动化地复用内容用的，宏可以复用任意WikiText内容，例如用来展示UI的[[微件]]，所以群里有人说：\n\n<<<\n插件提供多个宏，宏里边提供微件供使用\n<<<\n\n是基本没错的，只不过宏里面包含的是「对微件的调用」，毕竟相当于自动化的复用了别人使用微件的WikiText笔记内容。\n\n* 微件：`<$xxx/>`\n* 宏：`<<xxx>>`\n\n宏和微件的语法都是尖括号包裹，注意别搞混了。"},{"title":"宏变量筛选器嵌入连用","created":"20221127072055723","creator":"林一二","modified":"20221127072102606","modifier":"林一二","tags":"筛选器","type":"text/vnd.tiddlywiki","text":"详见[[变量在不同情况下的多种写法]]和[[嵌入在不同情况下的多种写法]]。"},{"title":"宏定义表格","created":"20221216015655721","creator":"WhiteFall","modified":"20230817085341437","modifier":"马不前","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：Stephen\n* 描述：这是一个用宏自定义的自动表格，当条目中钉上特定的标签时会自动收集到这个表格中，同时如果条目中有字段，那么字段的内容也会出现在表格中。[[My Table.json]]文件包含了作者对这个宏的说明，是一系列条目文件的集合，需要保存到本地然后拖放文件到wiki中，导入其中的条目。感兴趣可以看看。\n* 使用方法：拖放[[宏自动表格]]条目到你的wiki中。在条目中钉上`表格字段`标签会自动在这个表格中增加一行。你可以自定义[[宏自动表格]]条目的filtertag字段，修改成你需要的标签名。\n\n\n\n\n<$let selected-tiddler=\"宏自动表格\">\n\t<$macrocall $name=\"code\" language=\"html\" src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n"},{"title":"宏与微件及插件概述","created":"20220817024219376","creator":"Miao","modified":"20230603030437315","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"! 一、宏\n\n!! 宏调用\n\n\n宏本身是一些文本片段（比如`<<colour code-border>>`宏文本片段）。它包含宏名称、参数名称、参数。使用尖括号嵌入宏，这种嵌入方式被称为 ''调用宏''。\n\n[[宏调用语法|https://bramchen.github.io/tw5-docs/zh-Hans/#Macro%20Call%20Syntax]]：`<<两个尖括号>>`。\n\n```\n变量的使用：<<名称 空格 参数值>>\n每个参数值的语法：参数名称 空格 : 空格 参数值 空格\n\n```\n\n\n\n<br><br>\n\n<<<\n''list-links 宏（示例）''\n\n此示例列出名称开头为 J 的所有条目：\n\n```\n<<list-links filter:\"[prefix[J]]\">>\n```\n\n显示结果：\n\n<<list-links filter:\"[prefix[J]]\">>\n\n说明：list-links是宏的名称，filter是名称为筛选器的参数名称，后面跟的字符串是参数值，其中的prefix是筛选器操作符，J 是筛选器参数。参数值[prefix[J]]的意思是筛选出名称开头为J的所有条目。\n\n所以list-links宏的意图是列出链接并使用filter设置筛选范围，范围限定在\"[prefix[J]]\"。\n<<<\n\n<br><br>\n\n[[更多的宏|https://bramchen.github.io/tw5-docs/zh-Hans/#Core%20Macros]]：`<<tag>>`（标签宏）、`<<tabs>>`（选项卡宏）、`<<timeline>>`（时间线宏）、`<<now YYYY年0MM月0DD日>>`（当前时间宏）、`<<tree>>`(树状视图宏)、`<<thumbnail>>`（可链接缩略图宏）、`<<Table-of-Contents Macros>>`（目录宏）、`<<toc>>`等等非常有用的宏。\n\n!! 宏定义\n\n如果你知道一个宏的名字，那可以通过高级搜索-默认条目找到这个宏的定义条目。\n\n一个宏是用一个 \\define 编译指令定义的。像所有编译指令一样，这只能出现在条目的开始。（字面意义上的，如果前面有普通文本内容（不是宏定义），调用宏将会失效）\n\n```\n\\define 宏名称(tag,sort:\"\",参数名列表)\n<$微件></$微件>\n\\end\n```\n\n\n宏可以对很多小工具进行封装以达到某个特定的功能，解决我们的问题。即站在实用的角度来看插件里有多个宏，宏里提供微件被使用；\n\n最好的例子：在`$:/core/macros/toc`系统条目中，搜索toc-selective-expandable关键词可以找到该宏的完整定义。\n\n\n[img[toc-selective-expandable宏定义.png]]\n\n\n[[宏定义详细链接(包含访问变量、参数、范围以及更多详细的描述)|https://bramchen.github.io/tw5-docs/zh-Hans/#Macro%20Definitions%20in%20WikiText]]\n\n\n<br><br>\n我们对宏的总结是这样的：\n\n* 宏是对微件的调用，自动化地复用内容的；\n\n* 宏可以封装 WikiText 的重复片段（例如timeline时间线宏可以将已有的条目按照时间创建先后顺序显示出来），以便您可以轻松地重复使用它们。\n\n比如在条目中嵌入目录（目录宏），并且指定sort参数名对目录排序.例如\n\n```\n<<toc-selective-expandable '目录' sort : \"sortan[]\">>\n```\n\n! 二、微件Widget小工具\n\n微件（[[小工具|https://bramchen.github.io/tw5-docs/zh-Hans/#Widgets]]）是页面渲染的基本组成部分。即页面可见的部分。比如列表微件、标题微件、链接微件、按钮微件。\n\n<<<\n按钮微件的例子：`<$button message=\"tm-navigate\" to=\"HelloThere\">打开 ~HelloThere</$button>`（复制此文本片段并保存到新的条目中将会生成一个【打开 HelloThere】按钮，点击按钮将会打开标题为HelloThere的条目。）\n<<<\n\n微件的使用语法：\n\n```\n<$xxx>特殊的HTML标签</xxx>\n```\n\n说明：小工具提供 WikiText 更丰富的功能。它们与 HTML 元素 使用相同的标记方式，但是标记的名称前包含一个 $ 符号。\n\n\n就像HTML标签一样，它们也可以拥有自己的属性。比如上述Button微件它自己的to属性以及\"HelloThere\"属性值。\n\n\n[[维基文本中的小工具|https://bramchen.github.io/tw5-docs/zh-Hans/#Widgets%20in%20WikiText]]：action、button、set、browse等等。大概64个小工具。\n\n\n\n\n\n! 三、插件\n\n一个插件就是一组条目的集合，它将众多相互关联的为实现特定功能的条目封装在一起，成为一个以 $:/ 开头的系统条目。\n\n\n!! 将用户配置封装为插件\n\n把一些常用的设置都放到一个插件里，以插件的形式加载存储。便于携带和安装。\n\n使用[[Gatha|https://talk.tiddlywiki.org/t/gatha-plugin-experimental-release/2272]]插件，可以直接在任何Wiki里把一些条目打包成插件。它也可以管理做到一半的插件的草稿。\n\nGatha：https://talk.tiddlywiki.org/t/gatha-plugin-experimental-release/2272\n"},{"title":"宏自动表格","created":"20170501172211267","creator":"Stephen","field1":"first_name","field2":"deceased","field3":"full_name","field4":"link","filteritem":"title","filtertag":"表格字段","modified":"20221216060955386","modifier":"WhiteFall","notitem":"","sortby":"last_name","sortdir":"forward","tags":"宏定义表格","type":"text/vnd.tiddlywiki","text":"\\define FieldThing(name:\"current_address\")\n{{FieldsData##$name$}}\n\\end\n\n\\define FieldChoice(name:\"title\")\n<$select field=$name$ default='title'>\n    <option value=\"\">none</option>\n    <$set name=\"currentTiddler\" value=\"FieldsData\">\n        <$list filter=\"[all[current]indexes[]]\" variable=\"fieldName\">\n            <option value=<<fieldName>>>\n                <$macrocall $name=\"FieldThing\" name=<<fieldName>> />\n            </option>\n        </$list>\n    </$set>\n</$select>\n\\end\n\n<style>\n    .styled-select {\n        overflow: hidden;\n    }\n\n    .styled-select select {\n        -moz-appearance: none;\n        -webkit-appearance: none;\n        background-color: <<colour table-header-background>>;\n        font-size: 14px;\n        border: 0px;\n    }\n\n    .styled-input {\n        border: none;\n        border-color: transparent;\n    }\n\n    .noborder,\n    .noborder td {\n        border-width: 0px;\n        background-color: <<colour background>>\n</style>\n\n<div class=\"styled-select\">\n    <table class=\"noborder\">\n        <tr>\n            <td>\n                搜索: <$edit-text tiddler=\"$:/config/Manager/Filter\" tag=\"input\" default=\"\" placeholder={{$:/language/Manager/Controls/Search/Placeholder}} />\n            </td>\n            <td>\n                Sort by: <<FieldChoice sortby>>\n            </td>\n            <td>\n                <$checkbox field=\"sortdir\" checked=\"reverse\" unchecked=\"forward\" default=\"forward\"> Descending </$checkbox>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                Must Have: <<FieldChoice filteritem>>\n            </td>\n            <td>\n                Must NOT Have: <<FieldChoice notitem>>\n            </td>\n            <td>\n                Required Tag\n                <$select field=\"filtertag\" default=\"\">\n                    <option value=\"\">none</option>\n                    <$list filter=\"[tags[]!is[system]sort[title]]\" variable=\"tag\">\n                        <option value=<<tag>>><$text text=<<tag>>/></option>\n                    </$list>\n                </$select>\n            </td>\n        </tr>\n    </table>\n\n    <$set name=\"var1\" value={{!!field1}}>\n        <$set name=\"var2\" value={{!!field2}}>\n            <$set name=\"var3\" value={{!!field3}}>\n                <$set name=\"var4\" value={{!!field4}}>\n                    <table id=\"myTable2\">\n                        <tr>\n                            <th>Title</th>\n                            <th>\n                                <<FieldChoice field1>>\n                            </th>\n                            <th>\n                                <<FieldChoice field2>>\n                            </th>\n                            <th>\n                                <<FieldChoice field3>>\n                            </th>\n                            <th>\n                                <<FieldChoice field4>>\n                            </th>\n                        </tr>\n                        <$list\n                            filter=\"[!is[system]!is[shadow]has{!!filteritem}!has{!!notitem}search{$:/config/Manager/Filter}tag:strict{!!filtertag}sort{!!sortby}order{!!sortdir}]\">\n                            <tr>\n                                <td>\n                                    <$link>{{!!title}}</$link>\n                                </td>\n                                <td>\n                                    <$edit-text class=\"styled-input\" tiddler=<<ThisTiddler>> field=<<var1>>/>\n                                </td>\n                                <td>\n                                    <$edit-text class=\"styled-input\" tiddler=<<ThisTiddler>> field=<<var2>>/>\n                                </td>\n                                <td>\n                                    <$edit-text class=\"styled-input\" tiddler=<<ThisTiddler>> field=<<var3>>/>\n                                </td>\n                                <td>\n                                    <$edit-text class=\"styled-input\" tiddler=<<ThisTiddler>> field=<<var4>>/>\n                                </td>\n                            </tr>\n                        </$list>\n                        <tr>\n                            <td>count</td>\n                            <td>\n                                <<ColumnCalc myTable2 count 2 -1 all>>\n                            </td>\n                            <td>\n                                <<ColumnCalc myTable2 count 2 -1 all>>\n                            </td>\n                            <td>\n                                <<ColumnCalc myTable2 count 2 -1 all>>\n                            </td>\n                            <td>\n                                <<ColumnCalc myTable2 count 2 -1 all>>\n                            </td>\n                        </tr>\n\n                    </table>\n                </$set>\n            </$set>\n        </$set>\n    </$set>\n</div>\n\n条目总数: <$list filter=\"[!is[system]!is[shadow]has{!!filteritem}!has{!!notitem}search{$:/config/Manager/Filter}tag:strict{!!filtertag}sort{!!sortby}order{!!sortdir}count[]]\"/>\n\n使用方法：在条目中钉上`表格字段`标签会自动在这个表格中增加一行。你可以自定义本条目的filtertag字段，修改成你需要的标签名。\n"},{"title":"欢迎来到太微！","class":"autonumhead","created":"20210902044836979","creator":"林一二","icon":"🎉","list":"太微背景介绍 幻灯片 如何保存 基础知识 高级知识 自动化 排查问题 资源链接 插件开发 插件使用 笔记思维 社区建设 徽章列表 使太微更易用 问题以及想法 欢迎来到太微！","modified":"20230904042250782","modifier":"马不前","page-cover":"https://pic4.zhimg.com/v2-881f391ae052f85939fcfeb40bc2056c","type":"text/vnd.tiddlywiki","text":"{{徽章列表}}\n{{$:/config/oeyoews/info}}\n\n{{Gallary}}\n\n!! 如何浏览此知识库\n\n# 可以翻阅右边的[[文档目录|TW-Locator例子：当前知识库的目录]]，注意查看[[文档目录的使用帮助|$:/plugins/linonetwo/itonnote/Help/TW-Locator基于标签生成的文件夹目录结构使用方法]]\n# 查看每个[[条目]]底部的[[反向链接]]\n# 点击右边栏上的 {{$:/core/ui/Buttons/CommandPalette}} 按钮来打开搜索框（或直接点击 {{$:/core/ui/Buttons/CommandPalette}} ！）\n\n!! 如何开始使用太微\n\n# 查看[[如何保存]]来下载相关应用程序，创建你自己的知识库。\n# 访问 [ext[可离线版本|/offline.html]] 可以让你点击侧边栏上的下载按钮__把网页下载为单个HTML文件__离线阅读。也可以在网页上直接修改此知识库试试，放心，[[你不会真正修改到我们数据库里的内容|如何保存内容到社区仓库里]]。\n# 对TiddlyWiki进行功能分级，大概可以分成四个方面：[[开发框架/知识管理操作系统|太微与太记的区别]] > [[插件开发]] > [[Wiki编程|Wiki编程的定义]] > [[WikiText笔记与写作|WikiText笔记与写作（进一步的可能）]]。\n# 你可以在[[资源链接]]里找到''其它社区资源链接''、[[TiddlyWiki教程|教程链接]]、[[知识链接|知识链]]与正在使用的[[个人太微Wiki示例|TiddlyWiki中文网站示例]]，还有常用的[[插件介绍|插件列表]]（包括TidGi预制插件）、一份__TiddlyWiki游戏__和[[TiddlyWiki的全平台软件|全平台软件和存储方式]]以及工作流程。\n\n\n!! 背景介绍\n\n<<reuse-tiddler \"太微背景介绍\">>\n\n!! 如何更新此文档\n\n<<reuse-tiddler \"如何保存内容到社区仓库里\">>\n\n<<reuse-tiddler \"快速创建新笔记按钮\">>\n\n!! 我们的计划\n\n<<reuse-tiddler \"社区建设\">>\n\n\n[[中文教程最近更新动态|最近更新状态]]\n\n\n"},{"title":"幻灯片","created":"20220105142012545","creator":"林一二","modified":"20220217093939000","modifier":"林一二","tags":"欢迎来到太微！ 太微背景介绍","type":"text/vnd.tiddlywiki","text":"为方便宣讲，我们在此提供几类幻灯片，对应不同的宣讲场景：<$list filter=\"[tag[幻灯片]sort[title]]\" />\n\n!! 编辑内容\n\n如果你想编辑幻灯片，或想为中文教程添砖加瓦，可以查看[[如何保存内容到社区仓库里]]以及[[如何保存]]。\n\n点击某个幻灯片的标签，打开该幻灯片的条目，添加属于该标签的子条目，即可让子条目加入新的幻灯片页面。在点击标签打开的列表里拖动条目可以排序！"},{"title":"徽章列表","created":"20211028175214742","creator":"林一二","modified":"20230113082027844","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"<<dbadge 笔记应用 \"[[TGNote|https://github.com/tiddly-gittly/TiddlyGit-Desktop]]\" info>> <<dbadge 部署 \"[[Github Actions|https://github.com/tiddly-gittly/TiddlyWiki-Chinese-Tutorial/actions]]\" success>> <<dbadge 双向链接 \"[[支持|反向链接]]\" \"danger\">>\n\n<a href=\"https://app.netlify.com/sites/tw-cn/deploys\">\n<$image source=\"https://api.netlify.com/api/v1/badges/2d87784e-fe3b-47a2-ae73-7a2f266f74a8/deploy-status\" />\n</a>\n<a href=\"https://github.com/tiddly-gittly/TiddlyWiki-Chinese-Tutorial/discussions\" target=\"_blank\">\n<img src=\"https://img.shields.io/badge/太微中文讨论区-black.svg?style=flat-square&logo=tiddlywiki\" alt=\"太微中文讨论区\" >\n</a>\n"},{"title":"基本button代码","created":"20230603032321429","creator":"马不前","modified":"20230603032558284","modifier":"马不前","tags":"自定义字段内容","type":"text/vnd.tiddlywiki","text":"! 简单的开始\n\n看完了上面文式编程的概念，我们可以从读代码的内容，然后再理解代码。先看一个简单的代码，用来实现添加新条目，同时添加一些标签和字段内容。\n\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title=<<now \"YYYY年0MM月DD日0hh:0mm:0ss\">> Timeform=<<now \"YYYY-0MM-0DD\">> tags=\"学习 太微相关\" IsOtherText=\"time\" TimeNumber=\"30\" />\t\n\t太微相关\n</$button>\n\n\n```\n<$button>\n<$action-sendmessage $message=\"tm-new-tiddler\" title=<<now \"YYYY年0MM月DD日0hh:0mm:0ss\">> Timeform=<<now \"YYYY-0MM-0DD\">> tags=\"学习 太微相关\" IsOtherText=\"time\" TimeNumber=\"30\" />\t\n\t太微相关\n\t</$button>\n```\n\n上面代码中，先是button小工具，后面接一个action动作，发送一个消息，`action-sendmessage`嘛，不就是发送消息的动作，然后这个消息是什么呢？是新建一个条目，也就是`tm-new-tiddler`，前面的tm可能是tiddlywiki messages的简写。后面就是一个新条目的意思。新建一个条目最重要的就是标题，这里的标题我用了now宏，后面接一个now宏的格式参数。后面的timeform也是如此，只是格式换了一下。再后面tags就是标签的意思。这里添加标签就是直接指定了。当然有两个或以上的标签时，需要空格区分开来。如果英文标签里有两个以上的单词时，就需要添加`[[]]`来区分开来。\n\nok，以上就基本上是新建一个自定义的按钮的基本操作了。当然还可以做一些优化，具体可见[[如何做一个合格的按钮|https://dongrentianyu.github.io/WENAI/#%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E5%90%88%E6%A0%BC%E7%9A%84%E6%8C%89%E9%92%AE]]。\n\n现在我们要开始讲复杂的内容了。不过也是在上面的基础展开的。"},{"title":"基础知识","created":"20210902045831297","creator":"林一二","modified":"20230207160827487","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"对官方文档基础知识的延伸解释和简单补充，也包含一些新手常见的问题。\n\n如果你有编程经验，可以之后去看看[[太微原理]]。\n\n!! 筛选器、宏、变量、界面级联？\n\n* 筛选器：用类似 DataLog / SQL 的语法执行 JS 的 map、filter 等函数，筛选出笔记库里的笔记\n* 宏：在编译期替换文本，再提供给维基语法解析器\n* 变量：保存文本内容，在用维基文本写低代码应用时，实现类似提供上下文的功能\n* 界面级联：像 CSS 一样，允许插件提供的界面覆盖应用本身的界面"},{"title":"级联","created":"20220503074321238","creator":"林一二","modified":"20230603023634648","modifier":"马不前","tags":"B站直播 高级知识","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1CM411K7uW/","text":"级联，在国际社区讨论中称为 Cascade。它可以在条目带有某个字段或标签时，自动给条目加上一些内容，类似宏。也可以设置一些和默认模板并置的新模板。通过筛选器来控制不同条目显示不同内容或者以不同的样式显示。\n\n!! 使用方法\n\n[[论坛讨论|https://talk.tiddlywiki.org/t/how-to-add-a-new-template-body-cascade/3188]]\n\n<!--我这里用我的网站内容来介绍，因为要把里面的内容转移过来挺麻烦，就给个链接了--->\n[[具体介绍|https://dongrentianyu.github.io/WENAI/#%E7%BA%A7%E8%81%94]]\n\n级联最新用法有更新，视频里的内容仅参考，很有可能出现[[嵌入导致的死循环以至页面卡顿]]的情况。"},{"title":"极客和Wiki编程","created":"20230430132454489","creator":"马不前","modified":"20230901071746443","modifier":"WhiteFall","tags":"太微背景介绍 B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1TX4y1h7rp","text":"极客英文是geek。极客一般用来指追求技术的人，依赖社区，同时也非常专注，对其他事物不太感兴趣。活跃于开源软件和社区里。\n\n太微是一款[[开源软件|笔记软件开源不开源有什么区别]]，社区也非常活跃。因而里面也有很多极客。\n\n对TiddlyWiki进行功能分级，大概可以分成四个方面：[[开发框架/知识管理操作系统|太微与太记的区别]] > [[插件开发]] > [[Wiki编程|Wiki编程的定义]] > [[WikiText笔记与写作|WikiText笔记与写作（进一步的可能）]]。TiddlyWiki整体看和[[文学编程工具|文学编程与TiddlyWiki]]Jupyter notebook有些相似，是一种编程与写作的工具，更是一种“开发框架/知识管理操作系统”。\n\n在太微里，有很多内容都是可以自定义的，拓展性非常高。极客们就经常根据自身能力使用WikiText提供的编程能力搞各种“骚操作”，甚至可以像emacs那样，想怎么使用就怎么使用。但对于一般人，我并不推荐像极客一样去搞各种“骚操作”。只有非常需要时，才应该去折腾，不然浪费各自的时间。\n\n太微虽然[[接近操作系统的形式|太微与太记的区别]]，但WikiText提供的编程方式与其他编程语言是不太通用的，其没有调试代码的工具。这就非常麻烦了，只能依赖筛选器测试输出、经验和文档内容去判断代码什么地方写错了。这对没有编程经验的人来说，是一个天坑。既使有编程经验也会导致后期的学习成本大幅增加。一般的思路就是用到什么再去查官方文档，或者去论坛里问，看别人的例子。如果一个用法之前都没有人摸索过，那么恭喜你，这个问题要么由你来解决，要么交给下一个人来解决。\n\n极客思维固然有其好处，但对于以后不接触编程这方面的人来说，只需要会使用[[太记|TidGi太记]]，掌握基本的筛选器用法和一些常用插件，就够了。其他的不用太折腾，也没必要。反正只是用来写笔记和复习而已。\n\n对于太微不擅长的，比如大纲笔记，比如白板，如果有需求，最好还是换其他软件去实现，不要在太微上折腾太多时间。实在不行，也可以放弃太微，等过一段时间再看看这个东西有没有价值。任何工具只有对你自己用得方便，能提高你的效率才是工具，不然也没别的办法了。毕竟太微没有客服，也没有任何的售后服务。\n\n另一方面是不太建议和极客讨论。如果不打算深入了解的话，不需要去与极客讨论什么。他们讨论的成果，过后自然会更新发布出来，也不用担心错过。反而去讨论的话，还增加各自的负担，容易产生矛盾冲突。用户不理解，但极客可能觉得很好实现，用户觉得那你为何不帮助我实现呢？极客觉得为什么要帮助你实现，这么简单的东西你看一看文档不就行了吗？你又不付费，为什么要花时间在这上面呢？一般来说，付费是解决问题最好的方式。\n\n当然上面只是描述一个极端情况，但往往这是最后很有可能发生的情况。因而，要使用太微，最好还是自己先多了解掌握。至少把文档大致看一遍。了解什么想法可以实现，什么想法不可以实现。这样就比较好。当然实在有问题，也是可以问的，只是描述清楚问题。或者在[[直播|B站直播]]时去问。\n\n以上内容，只代表[[个人|马不前]]意见。"},{"title":"计算机缓存层级图","text":"classDiagram\nCPU <|-- SRAM\nSRAM <|-- DRAM\nDRAM <|-- Disk\n\nCPU: 通用寄存器\nCPU: 最小、取用最快\nCPU: 成本最高\n\nSRAM: 高速缓存\nSRAM: KB-MB量级，成本高\n\nDRAM: 主运行内存\nDRAM: GB量级\n\nDisk: 本地二级存储\nDisk: TB量级\nDisk: 更大、更慢、成本最低，访问消耗百万CPU循环\n\n额叶 <|-- 更广的神经环路\n更广的神经环路 <|-- 常用笔记\n常用笔记 <|-- 长尾笔记互联网和书籍\n\n额叶: 工作记忆\n额叶: 最小、取用最快\n额叶: 容纳平均7个组块\n\n更广的神经环路: 长时记忆\n更广的神经环路: 介导学习、判断价值、执行行为\n\n常用笔记: 赛博协同系统\n常用笔记: 做好读时优化、写时优化方便下次使用\n常用笔记: 知道去哪查、快速查、参与决策\n\n长尾笔记互联网和书籍: 回源查找\n长尾笔记互联网和书籍: 甄别摘录渐进阅读\n长尾笔记互联网和书籍: 查询分析慢，访问消耗大量占意","type":"text/vnd.tiddlywiki.mermaid","created":"20211011025306832","creator":"林一二","modified":"20220108042405215","modifier":"林一二","tags":"用自动化对抗惰性"},{"title":"记日记或手账","created":"20220527053220050","creator":"林一二","modified":"20220527053257925","modifier":"林一二","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"如果有一种极简单的方式做记录和整理，会让新用户更容易入门，也容易坚持使用。感觉每天写日记就是一个不错的方式。"},{"title":"记忆相关的插件","created":"20220108055811492","creator":"林一二","modified":"20220108060215841","modifier":"林一二","tags":"入门幻灯片 插件使用","type":"text/vnd.tiddlywiki","text":"!! 钓鱼\n\n我们知道太微里的一条笔记叫做[[条目]]，因为Tiddly指一条小鱼，那么[[钓鱼插件]]就是把太微看做一个鱼塘，使用钓竿我们可以将养肥了的鱼钓出来放进脑海里，没养肥的放回去继续养。\n\n详见[[钓鱼手册]]。\n\n!! Anki同步插件\n\n[[TiddlyRemember|https://sobjornstad.github.io/TiddlyRemember/]] 可以将你散落在各个条目里的 QA 搜集同步到 Anki 里，方便跨平台复习。"},{"title":"间隔重复各个字段的涵义","created":"20230908042432379","creator":"马不前","modified":"20230908042458838","modifier":"马不前","tags":"钓鱼插件","text":"* review，复习时间\n* due，下次复习时间\n* grade，评分\n* interval，间隔天数\n* lapses，连续错误次数\n* reps，复习次数\n* difficulty，难度\n* retrievability，可提取性\n* stability，稳定性"},{"title":"剪藏网页","created":"20230613084608671","creator":"林一二","modified":"20231013043254089","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"!! 剪藏网页内容\n\n!!! 「太微搜藏」浏览器插件\n\n主要用于[[多文件版]]。\n\n[img[https://talk.tiddlywiki.org/uploads/default/optimized/2X/f/f1fc9bb40133ba6683d1a2d363ceca698bdaa56d_2_1380x642.png]]\n\n安装和使用方法详见 [[太记功能手册/剪藏网页|https://tidgi.fun/#%E5%A4%AA%E8%AE%B0%E5%8A%9F%E8%83%BD%E6%89%8B%E5%86%8C%2F%E5%89%AA%E8%97%8F%E7%BD%91%E9%A1%B5]]\n\n太微搜藏（Tiddlywiki Collector）浏览器插件对太记、NodeJS版 Wiki 的支持最好，之后可能还会支持网页上展示双链、搜索栏搜索笔记等等功能。\n\n!!! Tiddlyclip\n\n主要用于[[单文件版]]。\n\n[ext[官网介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#TiddlyClip%20by%20buggyjay]]\n\n[ext[国际论坛上的 Tiddlyclip 教程|https://talk.tiddlywiki.org/t/how-many-people-here-love-tiddlyclip-plug-in/2099]]\n\n[ext[Workflow using Tiddlyclip + html2tw macro + Section editor|https://talk.tiddlywiki.org/t/workflow-using-tiddlyclip-html2tw-macro-section-editor/4587]]\n\n这个仅能用于在浏览器上打开的 Wiki，例如你先用太记启动，然后右键「在浏览器打开」。或者用其它[[timimi浏览器扩展安装和使用]]等允许你在浏览器中打开的保存方式。\n\n!! 剪藏链接\n\n!!! Tiddloid\n\n# 在列表页长按你的 Wiki，将这个 wiki 勾选设置为「默认 Wiki」\n# 在其它 Android 应用里使用系统的分享功能，分享链接给 Tiddloid，即可将链接插入为一个新条目"},{"title":"简单饼图与圆环图","created":"20230816142914296","creator":"马不前","modified":"20230822151537578","modifier":"马不前","tags":"自定义宏类","text":"* [[Tiddlywiki 中的圆环图与动画|https://talk.tiddlywiki.org/t/donut-chart-in-tiddlywiki-with-animation/535]]\n* [[TiddlyWiki 中的简单进度饼图|https://talk.tiddlywiki.org/t/simple-progress-pie-chart-in-tiddlywiki/505]]\n\n这两个图表比较简单，也挺好用。"},{"title":"简化标签添加过程","created":"20230530152314447","creator":"马不前","modified":"20230530152641354","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"这个是我之前经常谈论的一个问题，但现在我也不怎么管这个问题了，不过还是想记录一下。\n\n条目的标签是很重要的，但点击添加标签时，往往就会有很长地一条单子，然后再去选。也就是说，如果对一个wiki不是很了解的话，那么做起笔记来是很不方便的。这时我的建议是不要打标签，不如等下次复习时再去打标签。\n\n当然我更希望的是可以简化添加标签的过程。比如自动识别出来应该会添加什么标签。或者再简单一点，在添加标签时，下面可供选择的内容是最近添加过的标签内容。这样就能更简单地添加标签了。"},{"title":"将md文件放到太微中","created":"20230614130913849","creator":"WhiteFall","modified":"20230904065852869","modifier":"WhiteFall","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"总览：就是在tiddlers文件夹下面，新建一个文件夹，然后再在此新建的文件夹下面新建一个tiddlywiki.files文件，然后把markdown文件全部和tiddlywiki.files放一起。重启服务就搞定了。\n\nTiddlyWiki知识库目录树（“.”为根目录）\n\n```\n.\n├─.github\n│  └─workflows\n├─plugins\n│  └─github-external-image\n├─public\n├─scripts\n└─tiddlers\n    └─mdocs\n```\n\n在tiddlers文件夹下建立一个mdocs文件夹。如目录树所示。\n\n在mdocs文件夹中创建tiddlywiki.files文件。文件内容如下：\n\n```json\n{\n    \"directories\": [\n        {\n            \"path\": \".\",\n            \"filesRegExp\": \"^.*\\\\.md$\",\n            \"isTiddlerFile\": false,\n            \"isEditableFile\": true,\n            \"searchSubdirectories\": true,\n            \"fields\": {\n                \"title\": {\"source\": \"basename\"},\n                \"created\": {\"source\": \"created\"},\n                \"modified\": {\"source\": \"modified\"},\n                \"type\": \"text/markdown\"\n            }\n        }\n  ]\n}\n```\n\n再将markdown类型的文件放到mdocs文件夹中，之后重启服务就可以看到太微中出现md的文件条目了。条目名为基本文件名，无后缀。\n\n\n推荐使用，导入Obsidian Vault插件（Import Obsidian Vault in TiddlyWiki5）：https://github.com/tiddly-gittly/tidgi-obsidian-manager —— [[Obsidian-Vault插件：导入Ob库到你的TiddlyWiki中]]"},{"title":"交互式查看API","created":"20220215123643886","creator":"林一二","modified":"20220215123651368","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"可以右键打开开发者工具，在控制台里输入 `$tw.` 来交互式地看太微提供了哪些 API。\n\n例如通过输入 `$tw.wiki.render` 我们可以发现自动补全出了 `$tw.wiki.renderText` 函数，根据名字可以猜测它是用来把 Wiki Text 渲染成最终文本用的。\n\n它有哪些参数，可以通过直接回车来打印出函数源码来简单得知：\n\n```js\n> $tw.wiki.renderText\n< ƒ (outputType,textType,text,options) {\n\toptions = options || {};\n\tvar parser = this.parseText(textType,text,options),\n\t\twidgetNode = this.makeWidget(parser,options);\n\tvar container = $tw.fakeDocument.c…\n```\n\n返回值直接尝试执行一次即可\n\n```js\n> $tw.wiki.renderText('text/html', 'text/vnd.tiddlywiki', '试一试{{$:/language/Buttons/NewJournal/Hint}}')\n< '<p>试一试创建一个新的日志条目</p>'\n```"},{"title":"教程链接","created":"20230101093054869","creator":"马不前","modified":"20230930153816115","modifier":"马不前","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"! 教程链接\n* [[TiddlyXP 教程站 - 全面的入门、进阶教程|TiddlyXP]]\n* TiddlyWiki简易指南（一份线性教程）\n** [[PDF版|https://github.com/tiddly-gittly/TiddlyWiki-Easy-Guide-to-TiddlyMemo-Edition/releases/latest/download/TiddlyWiki-Easy-Guide.PDF.pdf]]\n** [[知乎文章|https://zhuanlan.zhihu.com/p/555893660]]\n** [[TiddlyWiki简易指南、简易指南之墨屉钓鱼版源仓库|https://github.com/tiddly-gittly/TiddlyWiki-Easy-Guide-to-TiddlyMemo-Edition]]\n*  TiddlyWiki舞-基础文档简体中文教程：\n** [[文档网址|https://bramchen.github.io/tw5-docs/zh-Hans/]]\n** [[tiddlyhost备份|http://tw5-zh-hans.tiddlyspot.com/]]\n** [[TiddlyWiki网页服务器|https://bramchen.github.io/tw5-docs/zh-Hans/#WebServer]]运行于NodeJS，有关身份验证和授权的内容在这儿。\n* 太微中文教程——太微共建知识库\n** [[netlify|https://tw-cn.netlify.app/]]\n** [[github|https://tiddly-gittly.github.io/TiddlyWiki-Chinese-Tutorial/]]\n** [[vercel|https://tiddly-wiki-chinese-tutorial.vercel.app/]]\n** 这是三种不同的部署方式，内容是一样的\n* [[太微翻译文档]]\n* [[Grok TiddlyWiki|https://groktiddlywiki.com/read/]] 最强 Tiddlywiki 学习手册，没有之一\n* ''B站太微视频教程（丰富）''[[巨夜的主页|https://space.bilibili.com/372302442]]\n* [[TW-Scripts - 资深用户总结的各种写法方案|https://kookma.github.io/TW-Scripts/]]\n* [[太微里的正则教程|http://tw-regexp.tiddlyspot.com/]]\n* [[TiddlyWiki太微在线的思维导图（包含四个主题）|https://www.zhixi.com/view/70759713]]\n* 英文资源\n** [[Tiddlywiki Links]] 英文资源聚合器（也有部分其他语言），包含十年间积累的大量教程网站\n** [[Tiddlywiki工具地图|https://dynalist.io/d/zUP-nIWu2FFoXH-oM7L7d9DM]] 用 dynalist 写的很全的工具列表，不过目前插件部分没有[[CPL插件源|安装CPL插件源]]齐全，链接部分没有[[Tiddlywiki Links]]全，但各内容都有简单的介绍文本\n** 建议使用[ext[沉浸式翻译|https://immersivetranslate.com]]阅读，不要被语言障碍隔开\n\n---\n''说明''\n\n* 建议按照给出教程的顺序来学习，从简单到深度使用，从系统到定制化使用。\n* 同一教程往往有不同部署或者发行方式，挑自己能用或者喜欢的方式就可以\n* 不同教程内容上会有重叠，但各自有其特点。细节上的处理也不尽相同。不妨多学习一下。\n* 不看教程，上手至少需要一个月起步，看教程最多一周就可以实现个人定制化。"},{"title":"杰里米·拉斯顿","caption":"Jeremy Ruston","created":"20230102045439389","creator":"马不前","modified":"20230102062128382","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Jeremy Ruston\n\n''tiddlywiki的创始人''\n\n[[github|https://github.com/Jermolene]]\n\n[[个人网站|https://www.jermolene.com/]]"},{"title":"介绍debug-log-filter","created":"20230528100149614","creator":"马不前","modified":"20230528100312339","modifier":"马不前","tags":"B站直播 任务","type":"text/vnd.tiddlywiki","text":"这个插件貌似可以有debug功能，但之前没用过，也没什么经验，就等林一二直播来分享一下好了。\n\n`$：/plugins/yaisog/debug-log-filter`"},{"title":"进入安全模式","created":"20220416104718037","creator":"林一二","modified":"20220416104954408","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"用某个插件导致页面无法打开了，这时候想要把这个插件关掉该怎么办？详见[[中文官网-安全模式|https://bramchen.github.io/tw5-docs/zh-Hans/#SafeMode]]，安全模式会在禁用所有插件的情况下进入知识库，这时候你就可以进入控制面板，把这个插件关掉了。\n\n把 `/#:safe` 拼在地址后面就行了，类似 `http://0.0.0.0:5212/#:safe`。\n\n不过有时候会变成打开 `safe` 条目，再按一次回车，多试几次就能进去了。"},{"title":"卡梅隆-菲舍尔","caption":"Cameron Fischer","created":"20230102071214469","creator":"马不前","modified":"20230102071312995","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Cameron Fischer\n\n''relink插件开发者''\n\n[[github|https://github.com/flibbles]]"},{"title":"开发新版面","created":"20230226012955815","creator":"林一二","modified":"20230305123004076","modifier":"林一二","tags":"插件开发 版面","type":"text/vnd.tiddlywiki","text":"详见[[Talk论坛上的教程|https://talk.tiddlywiki.org/t/tutorial-a-basic-alternative-layout/5138]]，或了解其背后的原理[[版面切换]]。"},{"title":"开始:桌面端浏览器中的太微","created":"20220815050627222","creator":"Miao","modified":"20230516134615637","modifier":"马不前","tags":"如何保存 编程知识类","type":"text/vnd.tiddlywiki","text":"!! 在桌面端使用你的浏览器作为太微的主力工具吧！\n\nTiddlyStow（创建）、Timimi（回写保存文件）、 FSA Uploader（太微插件，基于File System Access API的上传器）、Kopia（定时备份）\n\n\n''使用方式：''\n\n# 创建一个文件夹存储所有的TiddlyWiki文档，这个文件夹可以当做太微文件列表，然后使用Kopia定时备份这个文件夹，Timimi回写文件数据，Tiddlystow用已有的太微模板新建太微。\n# 像Word文档一样使用，你可以使用[[TiddlyStow|https://twpub-book.netlify.app/tiddlystow.html]]中的TiddlyWiki模板创建太微文档并开始记录内容。\n\n!! TiddlyWiki开始，使用TiddlyStow创建或保存你TiddlyWiki文档\n\n\n''TiddlyStow链接：''https://twpub-book.netlify.app/tiddlystow.html\n\n\nTiddlyStow可以作为在桌面浏览器中使用TiddlyWiki的起点，你可以使用侧边栏中的模板创建TiddlyWiki文档。其它三个组件分别为Timimi（保存与备份）、FSA Uploader（自动上传图片到本地文件夹）、kopia（定时备份）；在没有任何用于保存TiddlyWiki的工具的情况下，点击TiddlyWiki中的保存变更按钮你的浏览器将下载一份更新后的TiddlyWiki。\n\n你可以把创建的TiddlyWiki当做在任意位置可以阅读但只能在电脑上使用浏览器修改的Word文档使用。\n\n仅支持的桌面浏览器：`Edge/Chrome版本大于86`，`Safari版本大于15.2`，`Opera版本大于72`。\n\n[img[TiddlyStow预览.png]]\n\n[img[TidGi-HTML预览.png]]\n\n\n\n\n"},{"title":"科普-大纲","created":"20220106135958640","creator":"林一二","modified":"20220107134642029","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"本次分享将从以下几个角度来介绍太微：\n\n# 太微（TiddlyWiki）有哪些独特之处？\n# 什么是非线性的笔记本？我们为何需要非线性的笔记管理工具？\n# 利用它可以定制出哪些知识管理流程？\n# 如何快速入门并上手使用它？（见[[入门幻灯片]]）"},{"title":"科普幻灯片","created":"20220106131419260","creator":"林一二","list":"科普幻灯片封面 科普-大纲 为什么叫「太微」 太微独特之处-技术部分 太微独特之处-蒯因 太微独特之处展开 太微中的非线性笔记 非线性笔记对知识管理系统的要求 知识管理流程罗列 用自动化对抗惰性 快速配置出自动化操作的能力，让你未来更少地考虑流程本身，而专注于学习和工作上 提供自动化聚合整理的能力，让你从更抽象的角度上整理笔记，而不用亲手整理 数据自有 太微如何实现数据自有 如何参与社区和获得帮助","modified":"20230207151038981","modifier":"林一二","tags":"幻灯片","type":"text/vnd.tiddlywiki","text":"<div id=\"科普幻灯片\">\n<<presenter tag:\"科普幻灯片\" template:\"\"  loop:\"no\" footer:\"太微科普宣传 | 太微中文社区\" theme:\"roya\">>\n<style>\n#科普幻灯片 .tamasha-slide-content {\n\tmax-width: unset;\n\tfont-weight: bolder;\n}\n</style>\n</div>"},{"title":"科普幻灯片封面","created":"20220107005824413","creator":"林一二","modified":"20220107010622982","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"\n太微（TiddlyWiki）是一个独特的非线性笔记本，用于截取、整理和复用复杂的信息，自定义你的数字化“第二大脑”。\n\n<img src=\"https://user-images.githubusercontent.com/3746270/148070803-bb1885f1-bc96-4f8c-863f-d9f90df24fbf.png\" style=\"width: 50%; float: right;\" />\n\n\n利用它，你可以记录每个闪过您脑中的想法，创建一个灵活和反应迅速的博客网站。\n\n太微的核心代码完全开源，数据本地存储并可同步，是一个完全由自己把控的永久记忆系统。"},{"title":"可配置内容","created":"20220103160645861","creator":"林一二","modified":"20220103160846141","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"太微很多可配置内容暴露在了控制面板里。点击右上角[[页面工具栏]]里的 {{$:/core/images/options-button}} 按钮，打开[[控制面板|$:/ControlPanel]]，可以看到很多可配置项。\n\n不过也有一些配置项没有暴露成配置项，需要你手动修改相关条目，或者在Github上给插件作者提issue，请求开发者将其暴露成配置项。"},{"title":"可是我的插件还是空的","created":"20211112091421145","creator":"Sttot","modified":"20220207045519608","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"前置阅读：[[如何在NodeJS里写一个TW插件]]\n\n万事开头难，我们已经成功创建了一个插件，可喜可贺！不过...如何为插件添加内容呢？直接在文件夹内创建文件就可以吗？如何排除掉不想包括的文件？我们继续来探究。\n\n!! 最简单的方法：直接在文件夹内添加文件\n\n尝试在`plugins/XiaoMing/abc/`下添加一个叫`readme.tid`的文件，文件的内容为：\n\n```tiddlywiki5\ntitle: $:/plugins/XiaoMing/abc/readme\n\nHello!\n```\n\n会发现插件`$:/plugins/XiaoMing/abc`里多了一个`$:/plugins/XiaoMing/abc/readme`的shadow tiddler，说明添加成功了！所以以最简单的方式就是直接添加`.tid`文件。\n\n现在尝试添加一些别的，比如添加一张`example.png`的图片，会发生什么？\n\n图片确实被加载进来了，不过其对应的shadow tiddler的名字变成了文件的绝对路径...我认为这绝不是我们想看到的。事实上`.js`、`.css`等文件也会出现一样的状况。同时，这些文件没法附带元数据(例如标题、tags、类型和各种field)，这肯定是不行的，所以必须用别的办法为其添加元数据。\n\n最简单的办法是，将其改为`.tid`后缀，然后用`.tid`的格式在开头定义元数据，同时定义`type`，最后把本来的内容作为`.tid`的文本内容。\n\n但这样做的弊端也很大，首先就是不便于编辑；其次对于二进制还需要转换为base64格式，这是很麻烦而且占空间的做法。\n\n!! 我想保留原始后缀名，但也想为其加上元数据...\n\n如果你观察过`tiddlers`文件夹，你会看到一种`.meta`格式的文件，没错，它们就是对非`.tid`格式的文件进行辅助说明的元数据文件。\n\n假如，对于上文提到的`example.png`，我们希望能够将其命名为`$:/plugins/XiaoMing/abc/exmaple.png`，并且带上一个叫`12345`的标签，我们可以在同目录下创建一个`example.png.meta`，它会自动与`esample.png`绑定，我们在里面写上：\n\n```properties\ntitle: $:/plugins/XiaoMing/abc/exmaple.png\ntype: image/png\ntags: 12345\n```\n\n好，这次舒服多了！\n\n!! 目录套目录？\n\n如果在`lugins/XiaoMing/abc/`下面再加一个`1`目录，会发生什么呢？动手试一下会发现，什么都没有；但是如果在`1`中再加一个文件，就会发现被添加的文件出现在了插件中。\n\n因此插件内是可以继续套目录的，只不过最终读取的是文件而不是目录，所以如果目录为空，那么什么都不会有。\n\n!! `tiddlywiki.files`: 这个目录下，我说了算！\n\n如果我想要排除掉一些文件和文件夹，该怎么办？可以在想要排除文件的那一层目录下创建一个`tiddlywiki.files`文件。当TiddlyWiki解析插件时，如果看到目录下面有`tiddlywiki.files`，就不会继续搜索该文件夹下的其他文件和文件夹，在这一个文件夹下面，`tiddlywiki.files`一个人说了算！\n\n`tiddlywiki.files`文件描述了在这个文件夹下，应当加载哪些文件，以及哪些子文件夹下的哪些文件，而且可以为文件添加元数据信息，接下来我们来看看它怎么用。\n\n注意`tiddlywiki.files`也是JSON文件，以下是一个例子：\n\n```json\n{\n\ttiddlers: [\n\t\t{\n\t\t\t\"file\": \"example/example1.tid\",\n\t\t\t\"isTiddlerFile\": true,\n\t\t\t\"type\": \"text/vnd.tiddlywiki\",\n\t\t\t\"fields\": {\n\t\t\t\t\"title\": \"$:/plugins/XiaoMing/abc/example/example1\",\n\t\t\t\t\"tags\": [\"MyExample\"],\n\t\t\t\t\"type\": \"text/vnd.tiddlywiki\",\n\t\t\t\t\"created\": { \"source\": \"created\" },\n\t\t\t\t\"file\": {\n\t\t\t\t\t\"source\": \"filename\",\n\t\t\t\t\t\"prefix\": \"[Prefix]\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"prefix\": \"\",\n\t\t\t\"suffix\": \"\"\n\t\t}\n\t],\n\tdirectories: [\n\t\t\"dir1\",\n\t\t{\n\t\t\t\"path\": \"dir2\",\n\t\t\t\"filesRegExp\": \"\\\\.jpe?g$\",\n\t\t\t\"isTiddlerFile\": false,\n\t\t\t\"fields\": {\n\t\t\t\t\"type\": \"image/jpg\"\n\t\t\t},\n\t\t\t\"isEditableFile\": false\n\t\t},\n\t\t{\n\t\t\t\"path\": \"i18n/zh-Hans\",\n\t\t\t\"filesRegExp\": \"\\\\.tid$\",\n\t\t\t\"isTiddlerFile\": true,\n\t\t\t\"fields\": {\n\t\t\t\t\"title\": {\n\t\t\t\t\t\"source\": \"basename\",\n\t\t\t\t\t\"prefix\": \"$:/plugins/XiaoMing/abc/i18n/zh-Hans/\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n看起来有点复杂，但很多字段都是可选的，我们按层级来一个一个解读：\n\n* `tiddlers`【可选】：包含的tiddler，没有出现在里面的，就是被排除的；\n** `file`【必填】：以`tiddlywiki.files`所在文件夹为根目录，被包括的tiddler的相对位置。\n** `isTiddlerFile`【可选】：是不是原生的TiddyWiki文件类型(如`.tid`)，如果不是或者不填，则会自动根据文件后缀名来判断文件到底是纯文本还是二进制，从而选择使用`utf8`编码读入或者`base64`读入。不会影响到`type`。\n** `fields.type`【可选】：写在`fields`中，指tiddler的类型，如果不写就根据文件后缀名做推断，推断不出来就视为`text/plain`。\n** `fields`【可选】：就是字段了。字段接受三种类型：字符串、数组(等同于为以空格分隔的字符串)以及对象，这里说一下对象，虽然不常用，但是或许用的上：\n**: [[fields中的对象类型数据|tiddlywiki.files/fields中的对象类型数据]]\n**: <<alert danger \"''注意：''无论有无`fields`，TiddlyWiki都会尝试寻找文件对应的`.meta`元数据文件，最后会将`fields`和`.meta`内的元数据合并作为tiddler的元数据；对于同名的field，`.meta`会覆盖`fields`的。\">>\n** `prefix`【可选】：为tiddler的内容添加前缀，等价于在`fields`中写：\n**: <div>\n\n```json\n\"text\": { \"prefix\": \"xxx\" }\n```\n</div>\n** `suffix`【可选】：为tiddler的内容添加后缀，等价于在`fields`中写：\n**: <div>\n\n```json\n\"text\": { \"suffix\": \"xxx\" }\n```\n</div>\n\n* `directories`【可选】：包含的子路径，如果没有出现在里面的子文件夹就是被排除的；`directories`数组内可能有两种类型的数据：\n** 如果是字符串类型，那么就是包含对应名称的文件夹；\n** 如果是对象类型，就说明是指定了要读取子路径下的指定文件，其内可能有如下字段：\n*** `path`【必填】：要读取的子路径(相对路径)；\n*** `filesRegExp`【可选】：子路径下要包含的文件，基于正则表达式筛选，不写就是全部文件；\n*** `isTiddlerFile`【可选】：同`tiddlers.isTiddlerFile`，会应用到子路径下所有匹配的文件上；\n*** `fields`【可选】：同`tiddlers.fields`，会应用到子路径下所有匹配的文件上，也会去寻找`.meta`文件，规则同上；\n*** `isEditableFile`【可选】：如果为`true`，那么这个tiddler就不是shadow tiddler，修改它就会变更插件对应的文件，而不是创建一个新的tiddler来覆盖它。\n\n---\n本教程为原创，主要阅读了[[boot.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js]]内的以下函数：\n\n* `$tw.loadTiddlersFromSpecification`\n* `$tw.wiki.deserializeTiddlers`\n* `$tw.utils.extend`"},{"title":"克雷格·库克","caption":"Craig Cook","created":"20230102065828858","creator":"马不前","modified":"20230102065905807","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Craig Cook\n\n[[github|https://github.com/BoyCook]]"},{"title":"克里斯·萨格登","caption":"Chris Sugden","created":"20230102064617677","creator":"马不前","modified":"20230102064703704","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Chris Sugden\n\n[[githu|https://github.com/csugden]]"},{"title":"库克马(穆罕默德•拉赫马尼)","caption":"Mohammad Rahmani","created":"20230102065953751","creator":"马不前","modified":"20230102070459054","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Mohammad Rahmani\n\n[[github|https://github.com/kookma]]\n\n''库克马插件库的作者''\n\n他创造了很多实用的插件，像设拉子插件，指挥者插件。非常推荐安装库克马插件库。他对tiddlywiki的贡献不亚于[[杰里米·拉斯顿]]。"},{"title":"蒯恩","created":"20230108093633018","creator":"林一二","modified":"20230603024630271","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"创造一个能编辑自己的笔记：\n\n```\n  Text1:\n  <$edit-text\n    field=\"text\"\n    class=\"tc-edit-texteditor tc-edit-texteditor-body\"\n    default=\"\"\n    placeholder={{$:/language/EditTemplate/Body/Placeholder}}\n    tabindex=-1\n    focus=false\n    cancelPopups=\"yes\"\n    fileDrop=no\n    minHeight=\"30px\"\n  />\n```"},{"title":"块茎思维","created":"20230328091811173","creator":"WhiteFall","modified":"20230430121257474","modifier":"马不前","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"能够进一步说明块茎思维的是德勒兹在《千高原》中归纳出来的块茎的四个特征：\n\n! 其一，连接性和异质性原则。\n\n块茎是可以任意生成与中断的平面，平面上没有起点，也没有终点，“块茎上任意两点都能被连接，也必须能被连接。”传统树状模式有一个固定的起点，块茎没有秩序，也就没有起点。块茎不但能够随时连接，而且它可以将A与异质性的B连接——这是块茎最需要注意的原则。块茎的寻求并非发生于同类之间，它更像是将各式各样形式汇聚成一条符号链的推动力，涉及艺术、社会斗争、语用学等诸多领域的融合。\n\n! 其二，多样性原则。\n\n“多样性是块茎式的，揭穿了树状伪装（多样性）的假象”，这里的“多”是块茎思维下的发散性。块茎是真正的“多”，不依附于某一个起点，随时连接与中断。\n\n! 其三，断裂原则。\n\n指“一个根茎可能会在其中一条线上断开，但又会重新在这条线或新的线上展开游牧”。这意味着，块茎的游牧是随时可以展开或断裂的，块茎的断裂也不是彻底的断开，它可能会中断，但随时能沿着原来的线或别的线重新开始。形形色色的线构成了一个块茎，当其中一条线断裂，它会被其他线自由地连接，形成新的线。因此，块茎路线繁多，毫无规律。\n\n! 其四，绘图和印花原则。\n\n绘图指绘制地图。在德勒兹看来，地图是一个灵活的平面，绘图便是在上面进行创造与生成的活动。树状逻辑是模仿古典的逻辑，块茎逻辑的绘图打破这种无意识编码行为，转向不断地创造；树状逻辑是一个踪迹，我们可以寻根到它的生成点，块茎逻辑则相反，它是一张地图，任何地点都是它的起点，在这里，所有维度都可以被连接。\n\n!!!!! 以上内容来自论文《无器官身体：论德勒兹身体美学的生成》。"},{"title":"快速创建新笔记按钮","created":"20210902045426600","creator":"林一二","modified":"20230311141630653","modifier":"林一二","tags":"自动化","type":"text/vnd.tiddlywiki","text":"<fieldset>\n\t<legend>快速添加</legend>\n\n\t<$button>\n\t\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"xxx\" text=\"\"\"<$macrocall $name=\"locator-view\" baseTitle=<<currentTiddler>> />\"\"\" tags=\"欢迎来到太微！\" />\n\t添加新类别\n\t</$button>\n\n\t<$button>\n\t\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"xxx\" tags=\"基础知识\" text=\"!! \" />\n\t添加新基础知识\n\t</$button>\n\t\n\t<$button>\n\t\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"xxx\" tags=\"插件使用\" text=\"!! \" />\n\t添加新插件使用教程\n\t</$button>\n\t\n\t<$button>\n\t\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"新任务\" tags=\"任务\" text=\"\" />\n\t添加社区共建待办\n\t</$button>\n\n</fieldset>\n\n此外，你还可以先找到想作为文件夹的笔记，然后使用笔记顶部的 {{$:/core/images/new-here-button}} {{$:/language/Buttons/NewHere/Caption}} 来创建新笔记。这将把新笔记放入文件夹内，文件夹系统的原理详见[[TW-Locator]]。"},{"title":"快速配置出自动化操作的能力，让你未来更少地考虑流程本身，而专注于学习和工作上","created":"20220106144058274","creator":"林一二","modified":"20220108103518526","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"* 自定义模板按钮，在各分类下快速新建卡片笔记，并带上元信息字段：[[快速创建新笔记按钮]] （当然也可以通过命令菜单来添加）\n* 自定义卡片上的按钮，将卡片一键转移到其它分类、归档、设为常用、修改状态 [[Projectify的任务例子|https://projectify.wiki/demo.html#Design%20initial%20mockup:%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fui%2Fbuttons%2FToggleTodo%20%5B%5BDesign%20initial%20mockup%5D%5D]]\n* 将常用模板（九宫格/晨间日记/项目流程）添加为[[文本片段]]，通过 `/` 打开菜单快速添加"},{"title":"快速在Github上部署静态TW页面","created":"20230414101339233","creator":"WhiteFall","modified":"20230516134615638","modifier":"马不前","tags":"编程知识类","type":"text/vnd.tiddlywiki","text":"参考：https://github.com/tiddly-gittly/TW5-T-ONLINE"},{"title":"懒加载效果如何？","created":"20230530102543169","creator":"马不前","modified":"20230530120455770","modifier":"WhiteFall","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"最新版本的太记已经适配了懒加载，但好像效果不是特别好。而且会清除个人自定义的级联和字体。具体可见[[issue|https://github.com/Jermolene/TiddlyWiki5/issues/7502]]。\n\n懒加载也称延迟加载，具体可见[[文档|https://bramchen.github.io/tw5-docs/zh-Hans/#LazyLoading]]。\n\n或者懒加载未来会改善太微的性能。\n\n补充：懒加载性能还可以，近两万条目加载起来，会比原来快很多，较少有卡顿感。"},{"title":"林一二","created":"20210902045321148","creator":"林一二","modified":"20230222052151515","modifier":"林一二","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"''太记开发者'' 太微中文爱好者群群主，开发了大量美化和简化入门的插件。\n\n通过推广预置这些插件的[[太记|TidGi太记]]，来降低新人入门的门槛。\n\n[[个人网站|https://onetwo.ren/wiki/#林一二]]\n\n[[github|https://github.com/linonetwo]]"},{"title":"浏览类插件","created":"20230101081123956","creator":"马不前","modified":"20230617091342981","modifier":"WhiteFall","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"* respawn 复位，当故事河（river）为空时打开默认的tiddlers。\n* Epub转TWpub：https://github.com/tiddly-gittly/Epub2twpub\n* TWPUB、Fishing\n* 目录插件Gk0Wk/page-toc\n* 脑图tidgraph\n* 链接弹出预览 preview glass\n* 调整侧边栏 siderbar resizer\n* 仿浏览器网页栏 tabstory\n* ❤️PPT演示文稿\n** [[sukima/reveal-js|https://sukima.github.io/tiddlywiki-reveal-js/ ]] CPL搜索reveal-js安装。\n** [[tamasha|https://kookma.github.io/TW-Tamasha/]] CPL搜Tamasha安装，就是提供了个宏。\n*  仿浏览器条目栏tabstory\n* 图书追踪器 library tracker\n* [[TiddlerSets|https://tiddlersets.tiddlyhost.com/TiddlerSets]]\n* ❤️inverse-link-and-folder，双链插件。\n* ToC generic\n* 随机条目漫游：[[RandomTiddlerButton|https://sonephetr2.github.io/]] + [[random|https://tobibeer.github.io/tw5-plugins/#random]] 这两个插件要一起安装使用。\n* [[tiddlyremember|https://github.com/sobjornstad/TiddlyRemember]]（tw5与anki）和anki结合，有闪卡、增强阅读、问答题等附在⽂章下⾯。\n* 条目加密（Encrypt Tiddler Plugin）\n**[[demo|https://danielorodriguez.com/TW5-EncryptTiddlerPlugin/]]\n**[[主页|https://github.com/danielo515/TW5-EncryptTiddlerPlugin]]\n* 条目别名tw5插件[[alias|https://github.com/hfichtenberger/tiddlywiki-aliasplugin]]\n* [[为tw加上rss|https://techlifeweb.com/tiddlywiki/tw5tribalknowledge/static/RSS%2520and%2520Atom%2520Feeds%2520for%2520your%2520TiddlyWiki.html]]\n* ❤️Locator：文件目录插件[[TW-Locator|https://tw-cn.netlify.app/#TW-Locator]]\n*  TiddlyTools网站中的时间工具[[timer|https://tiddlytools.com/timer.html]]  其中包括日历、时钟、计时器等等一些有趣的关于时间的工具。而且日历工具可以按时间日期显示条目。"},{"title":"浏览器搜索同步展示","created":"20231013023456329","creator":"林一二","modified":"20231013023848071","modifier":"林一二","tags":"插件使用","text":"安装地址：[ext[OpenUserjs - Combine_TW5_and_search_engine_results|https://openuserjs.org/scripts/linonetwo/TiddlyWiki5_Combine_TW5_and_search_engine_results]]\n\n（请先搜索「油猴脚本」如何安装）\n\n会在 Google / Bing / 百度 Baidu 搜索结果同步展示各种[[剪藏|剪藏网页]]过的内容，以及自己的笔记。\n\n[[论坛讨论|https://talk.tidgi.fun/topic/12/]]"},{"title":"论坛示例","created":"20230603032532030","creator":"马不前","modified":"20230603032532030","modifier":"马不前","tags":"自定义字段内容","type":"text/vnd.tiddlywiki","text":"! 论坛示例\n\n下面论坛里有一个提问的，里面也跟今天的用法基本类似。可以用来学习。\n\n[[论坛链接|https://talk.tiddlywiki.org/t/days-operator-having-problems-with-supplying-parameter-from-a-tiddler-field/7152]]\n\n\n```\n<$button>Review\n<$action-setfield $tiddler=\"$:/StoryList\"\n   list={{{ [all[tiddlers]!is[system]!tag[z hidden]has:field[last-reviewed3]]\n      :filter[!days:last-reviewed3{!!interval3}]\n      +[sort[last-reviewed3]format:titlelist[]join[ ]] }}}/>\n</$button>\n```\n\n这个代码还挺复杂的，不过多少也可以了解。首先是设置`$:/StoryList`条目里的lsit的值。然后是一个超长的动态筛选器，先是排除所有系统条目，再排除有标签`z hidden`的，再判断其中得有`last-reviewed3`字段。\n\n然后在这个基础上通过`filter`筛选器，里面有一个days筛选，筛选出`last-reviewed3`超过`interval3`天数的。也就是`last-reviewed3` 至少为`interval3`{未来|过去}天。当然这个因为没有实际的例子，不好直接理解。这好像是钓鱼插件里用来控制间隔天数的字段。\n\n后面对筛选出来的条目进行排序，按`last-reviewed3`字段排序，格式是`titlelist`，也就是以标题清单的形式显示。后面的`join[ ]`是指，如果标题里含有空格，就用`[]`包含起来，不过我感觉这个效果不是很好的样子。\n\n大概是这样，不过我觉得他为什么不直接用钓鱼插件里来控制间隔天数，搞这么复杂。"},{"title":"马不前","created":"20230102045329999","creator":"马不前","modified":"20230530102436466","modifier":"马不前","type":"text/vnd.tiddlywiki","text":"* [[机杼|https://dongrentianyu.github.io/WENAI/]]\n\n<<code src:\"以上内容，只代表[[个人|马不前]]意见。\" language:\"xml\" title:\"\">>"},{"title":"马尔·甘布尔","caption":"Mal Gamble","created":"20230102064903016","creator":"马不前","modified":"20230102064937098","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Mal Gamble\n\n[[github|https://github.com/malgam]]"},{"title":"马里奥·皮奇","caption":"Mario Pietsch","created":"20230102054428624","creator":"马不前","modified":"20230102054635788","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Mario Pietsch\n\n''论坛管理员之一''\n\n[[github|https://github.com/pmario]]"},{"title":"迈克尔·福格尔曼","caption":"Michael Fogleman","created":"20230102064950183","creator":"马不前","modified":"20230102065027086","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Michael Fogleman\n\n[[github|https://github.com/mwfogleman]]"},{"title":"毛里齐奥·波利奥","caption":"Maurizio Pollio","created":"20230102064329803","creator":"马不前","modified":"20230102064421787","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Maurizio Pollio\n\n[[github|https://github.com/mpollio]]"},{"title":"美化滚动条样式","created":"20221216002610102","creator":"WhiteFall","modified":"20230516132121024","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：kookma\n* 描述：滚动条样式，浏览器垂直滚动条样式。支持的浏览器：Firefox，Chrome, Edge\n* 使用方法：按下列提示创建条目，保存后即可显示效果。\n\n\n```\n条目标题：mysettings/scrollbars\n标签：$:/tags/Stylesheet\n条目类型：text/vnd.tiddlywiki\n```\n\n```css\n\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n\nhtml {\n  --scrollbarBG: <<color page-background>>;\n  --thumbBG: <<color sidebar-tiddler-link-foreground>>; /*other candidate colors: foreground, sidebar-tiddler-link-foreground */\n}\n\n/* only for Twilight palette use <<color sidebar-muted-foreground>> */\n\n/* Works on Firefox */\n* {\n  scrollbar-width: thin;\n}\n/* for Chrome, Edge */\n::-webkit-scrollbar,\n  scrollbar-width {\n  width: 8px;\n  height:8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--scrollbarBG);\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  border: 1.5px solid var(--scrollbarBG);\n  background-color: var(--thumbBG) ;\n}\n```"},{"title":"美化相关的插件","created":"20220108060308675","creator":"林一二","modified":"20220108094132617","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"!! 可视化\n\n* [[Echarts可视化插件]]提供了对[[Echarts可视化系统|https://echarts.apache.org/examples/zh/index.html]]的调用能力，可以从上百种可视化效果中挑选出适合自己笔记系统的样例，稍加改造后用[[微件]]的形式接入你的条目里。\n* [[TiddlyMap|http://tiddlymap.org/]]提供了可拖动编辑的图谱，也可以通过筛选器表达式自动生成图谱。\n\n!! 样式美化和主题\n\n* [[TW-Shiraz|https://kookma.github.io/TW-Shiraz/]] 就像一个前端库，包含了各种样式微件。\n* [[Itonnote]] 是一个仿 Notion 的主题。\n* [[TiddlySeq|https://gk0wk.github.io/TiddlySeq/]] 是一个仿 LogSeq 的主题。"},{"title":"命令菜单","created":"20220124120523826","creator":"林一二","modified":"20220124120847851","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"!!! 如何回到上一个/之前查看的条目\n\n通过链接，或者标签跳转到其他的条目之后，如何快捷返回之前的内容呢？\n\n命令菜单插件可以 `ctrl + tab` 切换回历史记录中的其它条目。\n\n# 请按住 `ctrl + tab`，这时历史记录展示出来，然后松开 `tab` 键、保持按住 `ctrl` 键，让历史记录保持展示并刷新。\n# 再次快速按下松开 `tab` 可以让选中的历史记录变化，变成选中更早的历史记录。\n# 松开 `ctrl` 键后，将会打开选中的条目。"},{"title":"模仿太记官网样式","created":"20230603045303611","creator":"马不前","modified":"20230610045822029","modifier":"马不前","tags":"自定义样式修改类 B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1EM4y1Y7mc","text":"太记官网样式挺好看的，可以模仿一下。\n\n首先是安装官方主题插件里的`$:/themes/tiddlywiki/starlight`，这个会直接附带一个英文字体和一个背景图片。然后再安装一个主题插件`$:/themes/tiddlywiki/hidefurniture`，这个好像cpl里找不到，可以去[[太记官网|https://tiddly-gittly.github.io/TidGi-Official-Website/#:Index]]上拖过来。外观主题里选择`$:/themes/tiddlywiki/starlight`。\n\n再然后是编辑`$:/themes/tiddlywiki/starlight/styles.tid`条目。把下面的代码剪切出来，形成一个新条目，并加上`$:/tags/Stylesheet`标签。这是因为如果修改了原条目的话，有可能造成里面的内容溢出。\n\n```\nhtml body, .tc-sidebar-scrollable-backdrop {\n\tfont-family: \"Arvo\", \"Times\";\n\tbackground: url(<<datauri \"$:/themes/tiddlywiki/starlight/ltbg.jpg\">>);\n}\n\n.tc-page-controls svg {\n\t<<filter \"drop-shadow(1px 1px 2px rgba(255,255,255,0.9))\">>\n}\n```\n\n如果觉得背景图片不好看，太单调肃穆了，可以把上面代码里的`background: url(<<datauri \"$:/themes/tiddlywiki/starlight/ltbg.jpg\">>);`删去。这样就不会有背景图片了。\n\n然后再安装一个中文字体，参考[[如何添加在线字体]]。或者直接把[[霞鹜文楷]]条目拖到你的wiki里。\n\n然后再修改上面的代码其中fnot-family，修改为`font-family: \"Arvo\",\"LXGW WenKai Lite\", \"Times\";`，这里是用上面的霞鹜文楷字体，当然也可以换成其他字体格式。\n\n然后因为这个主题按钮特别大，可以在设置-主外观-主题调整里，是否置顶按钮，选择否。"},{"title":"模块：JS宏定义","created":"20230903002115372","creator":"WhiteFall","modified":"20230903003054672","modifier":"WhiteFall","tags":"Wiki编程的定义","text":"例子：$:/core/modules/macros/now.js\n\n其中exports.name为宏名称，exports.params为宏参数定义，exports.run为宏执行的方法。\n\n```js\n/*\\\ntitle: $:/core/modules/macros/now.js\ntype: application/javascript\nmodule-type: macro\n\nMacro to return a formatted version of the current time\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"now\";\n\nexports.params = [\n\t{name: \"format\"}\n];\n\n/*\nRun the macro\n*/\nexports.run = function(format) {\n\treturn $tw.utils.formatDateString(new Date(),format || \"0hh:0mm, DDth MMM YYYY\");\n};\n\n})();\n```"},{"title":"墨屉","created":"20231001020344912","creator":"马不前","modified":"20231001020431808","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[官网|https://oflg.me/Tidme/manual/zh-Hans]]"},{"title":"墨屉：怎么才算挖空成功","created":"20220815050114878","creator":"Miao","modified":"20230516134755936","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"!! 怎么才算挖空成功？\n\n当标题变小时，说明样式已经生效。这时就表示挖空成功了。\n\n[img[墨屉怎么才算挖空成功.png]]\n\n!! 为啥没显示空白遮盖效果？\n\n在经过一次实验模拟到期之后发现：要学习过一次,才会有空白遮盖的效果。\n\n只有在学习的时候，才会有空。平常是下划线\n\n\n\n凹夫几：填空题，只要是在学习的时候（条目折叠状态下）就会有挖空，不学习过也行\n"},{"title":"默认隐藏侧边栏设置","created":"20230607074720211","creator":"WhiteFall","modified":"20230607122414010","modifier":"WhiteFall","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"`$:/state/sidebar`条目用于保存侧边栏隐藏显示状态。\n\n此条目内容一般有两种选项，“no”为隐藏，“yes”为显示。\n\n也可以根据下面的内容创建一个条目，实现仅在移动端模式下隐藏侧边栏并置顶标题。\n\n```\ntags: $:/tags/StartupAction\ntitle: $:/config/neotw/mobile-setup\ntype: text/vnd.tiddlywiki\n\n<$list filter=\"[[$:/info/browser/is/mobile]get[text]else[no]match[yes]]\"> \n<$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/options/stickytitles\" text=\"no\"/>\n<$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n</$list>\n```\n"},{"title":"目录导航栏","created":"20221216014548991","creator":"WhiteFall","modified":"20230516132933328","modifier":"马不前","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：机杼\n* 描述：目录导航栏，又名卡片图书。可以自定义卡片高度、图书的根条目（根目录，可以参考[[目录导航栏实例]]理解根条目的意思）。本目录下有三个条目，目录导航栏使用说明、Tabs加强版、目录导航栏实例。\n* 使用方法：参考[[目录导航栏使用说明]]、[[目录导航栏实例]]，拖放宏[[tabs加强版]]到你的wiki中。\n\n\n```\n条目标题：tabs加强版\n标签：$:/tags/Macro\n条目类型：text/vnd.tiddlywiki\n```\n\n\n<$let selected-tiddler=\"tabs加强版\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n\n<$let selected-tiddler=\"目录导航栏实例\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>"},{"title":"目录导航栏实例","created":"20221216014636662","creator":"WhiteFall","modified":"20221216014832342","modifier":"WhiteFall","tags":"目录导航栏","type":"text/vnd.tiddlywiki","text":"<style>\n<!-- 修改下面的max-height数值就可以看到效果了-->\n<!-- 技术来源于EricShulman，我是在论坛上看到他的回答保存下来的。-->\n.colortext\n   { font-variant:small-caps; color: red; }\n.myTOC .tc-table-of-contents, .myTOC .tc-tabbed-table-of-contents-content\n   { max-height:400px; overflow: hidden auto; }\n</style>\n<span class=\"myTOC\">\n<$macrocall\n\t$name=\"navx\"\n\ttag=\"使太微更易用\"\n  selectedTiddler=\"$:/temp/toc/selectedTiddler\"\n\tunselectedText=\"<p>选择目录中的一个主题，点击箭头可展开主题。</p>\"\n\tmissingText=\"<p>佚失条目。</p>\"/>\n</span>"},{"title":"目录导航栏使用说明","created":"20221216032202403","creator":"WhiteFall","modified":"20230516131456281","modifier":"马不前","tags":"目录导航栏","type":"text/vnd.tiddlywiki","text":"! 使用\n除了名称修改了一下，使用和正常的目录宏导航栏没有区别。\n\n```\n<$macrocall\n    $name=\"navx\"\n    tag=\"xxx\"\n  selectedTiddler=\"$:/temp/toc/selectedTiddler\"\n    unselectedText=\"<p>选择目录中的一个主题，点击箭头可展开主题。</p>\"\n    missingText=\"<p>佚失条目。</p>\"/>\n```\n\ntag里面的可以随便修改。一些tabs里的参数我没有去修改。就直接用默认的水平风格的了。这个参数好像应该也可以搞一个判定就是如果子条目数量大于多少数值，然后就是竖排的，不然就是水平的。一般只有数量很多的时候才需要搞竖排的。\n\n然后我看官方文档里目录导航栏只有微件的形式，没有宏的形式。我就不再尝试了。\n\n! 修改部分\n除了改了一下名称。名称是我本来在后面加一个x的，但发现很容易与官方的相混，我就把前面的删除了，留下后面四个。\n\n代码部分就在下面。\n\n```\n <h1><$link><<toc-caption>></$link></h1>\n<$transclude mode=\"block\">$missingText$</$transclude>\n<<tabs \"[tag<currentTiddler>]\" \"tc-vertical\">>\n```\n\n第一行是加上了链接。第二行不变，是原本的代码。第三行是加上tabs宏。除了筛选器里的不要动外，其他的参数可以自己设置。和tabs宏的参数设置是一样的。\n\n! 排序\n有两种方式，一种是在条目下加一个list字段。然后把其中子条目的顺序放进去。这种基本上每一个章节都需要去调整。如果只是简单的，可以这样做。\n\n另一种方式就是给当前条目下的所有条目都加上一个字段order，然后每一个条目都添加一个值。然后到上面第三行代码中修改成 `[tag<currentTiddler>sort[order]]`大概就能成功。\n\n! 感受\n做了一个晚上，当然也不算长，估算起来也就三四个小时吧。主要是加了一个链接。不过是跳转到外面的。因为我一开始用的模板就是用外面的。用内部跳转的代码里面引用了外部跳转的代码。也就是必须先修改外部的代码才能去改里面的。\n\n链接加上去之后，我又想能不能加上tabs。因为我学会用tabs这个宏之后，我就想着把目录宏的功能和tabs宏的功能结合起来。也就是在''一张卡片上展示一本书的所有内容''。我相信这应该是目前只有太微能做到的。像我这样经常要整理教材的人，会有很多层级，每一个都自己手动去添加tabs宏那就太麻烦了。\n\n我觉得编程很神奇，其实我什么也不会，就靠一个个试过去。链接那个还好，虽然也花了一个多小时，但想到了就立即实现了。之前我一直忘记加系统宏的标签，一直没有效果，浪费了挺多时间。第二个tabs宏就更麻烦了，特别是那个tag，看上去也不难想到，但不知道为什么我卡住了。本来想着实在不行就算了。明天去问一下别人。没想到一试，成功了！\n\n我有些担心就是会不会影响tiddlywiki的性能。但这种太深层的内容，我来不及考虑了。"},{"title":"内森·该隐","caption":"Nathan Cain","created":"20230102055820722","creator":"马不前","modified":"20230102055904471","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Nathan Cain\n\n[[github|https://github.com/natecain]]"},{"title":"能编辑自己的笔记","created":"20230108093703829","creator":"林一二","modified":"20230108093832664","modifier":"林一二","tags":"蒯恩","type":"text/vnd.tiddlywiki","text":"  Text（试着在这里打一个1):\n  <$edit-text\n    field=\"text\"\n    class=\"tc-edit-texteditor tc-edit-texteditor-body\"\n    default=\"\"\n    placeholder={{$:/language/EditTemplate/Body/Placeholder}}\n    tabindex=-1\n    focus=false\n    cancelPopups=\"yes\"\n    fileDrop=no\n    minHeight=\"30px\"\n  />"},{"title":"排查问题","created":"20220223140933658","creator":"林一二","modified":"20230517051435519","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"QQ群里常问的bug（但一时又没空去解决的）可以放到这里。\n\n具体请看下面「文件夹中的文件」"},{"title":"排查nodejs加载慢","created":"20220416104241253","creator":"林一二","modified":"20220416140935979","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"首先进到一个 tw npm 包文件夹里，例如\n\n```shell\ncd /xxx/TiddlyGit-Desktop/node_modules/@tiddlygit/tiddlywiki\n```\n\n然后加载一个wiki文件夹，以 `/xxx/wiki/wiki` 为例就是\n\n```shell\nnode -prof ./tiddlywiki.js +plugins/tiddlywiki/filesystem +plugins/tiddlywiki/tiddlyweb /xxx/wiki/wiki --listen root-tiddler=$:/core/save/lazy-images\n```\n\n注意是用 node 去执行 tiddlywiki 的入口 JS 文件，你也可以写成 `node --prof-process --preprocess ./node_modules/tiddlywiki/tiddlywiki/tiddlywiki.js` 之类的。\n\n这会在之前 cd 进去的文件夹 `node_modules/@tiddlygit/tiddlywiki` 里生成一个名字如 `isolate-0x7faf7ea00000-58485-v8.log` 的文件，我们需要把它转换成火焰图文件：\n\n```shell\nnode --prof-process --preprocess  /xxx/isolate-0x7faf7ea00000-58485-v8.log > ~/Desktop/out.json\n```\n\n然后把生成出来的文件拖到 [[https://mapbox.github.io/flamebearer/]] 里就可以查看啦！"},{"title":"配置TiddlyDesktop调试环境","created":"20221120072838658","creator":"Miao","modified":"20221120125019130","modifier":"Miao","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"\n<<<\n系统环境：Win10 64位\n\n需要软件：VScode、在vscode中安装Debugger for NWjs插件。\n<<<\n\n\n# 下载最新版TiddlyDesktop-win64-v0.0.15，解压后仅保留html、images、js、tiddlywiki四个文件夹以及package.json文件。\n\n# 下载nwjs-sdk-v0.69.1-win-x64，放入`C:\\Users\\你的用户名\\.nwjs`文件夹中并解压。解压后你能在`.nwjs\\nwjs-sdk-v0.69.1-win-x64`文件夹中看到nw.exe程序即可说明正确。（又可以在vscode中使用Ctrl + shift + p调出命令，执行NWjs Install命令，选择版本安装）\n\n# 使用vscode打开TiddlyDesktop-win64文件夹。\n\n# 修改package.json文件中的\"main\"字段为 \"html/main.html\"\n\n# 点击调试，选择nwjs，自动创建laugh.json配置文件（不需要修改）。然后点击开始就可以调试啦。"},{"title":"批量给图片加标签","created":"20230310072029869","creator":"林一二","modified":"20230612093730182","modifier":"WhiteFall","tags":"自动化","type":"text/vnd.tiddlywiki","text":"有时候我们可能会拖很多个图片到一个条目下，给一个文章配图。我们希望给这些图片都加上文章的标题作为标签，因为[[太微里标签就有文件夹的意思|太微中标签的用法]]。\n\n!!! 首先用系统自带的重命名工具给图片批量重命名，带有同一个前缀\n\n以 Mac 为例，多选文件后，右键就有「批量重命名」功能，给它们加上同一个前缀。\n\n[img[批量重命名Mac功能.png]]\n\n!!! 图片拖入太微\n\n在编辑模式下可以把多个图片直接拖到编辑器里，就会弹出窗口自动导入图片。并保留他们的文件名，作为条目名。\n\n!!! 用 Commander 插件批量操作\n\n通过页面工具栏按钮里的 {{$:/plugins/kookma/commander/images/commander.svg}} ，打开[[TW-Commander|TW-Commander：批量操作条目]]插件。\n\n[img[对批量重命名的文件批量用commander插件操作.png]]\n\n在顶部的搜索栏（Combo Search）里，使用 [[`prefix`|https://bramchen.github.io/tw5-docs/zh-Hans/#prefix%20Operator:%5B%5Bprefix%20Operator%5D%5D%20%5B%5Bprefix%20Operator%20(Examples)%5D%5D]] [[筛选器操作符]]来搜以特定文本开头的条目。\n\n然后在底部选择 Tag 标签页，选择「Add remove tags」子标签页，然后在 「New tag」输入框里填入想作为标签加到图片上的条目标题。\n\n最后，点击「Add new tag」按钮即可。"},{"title":"批量删除","created":"20220331025954186","creator":"林一二","modified":"20230612093710399","modifier":"WhiteFall","tags":"自动化","type":"text/vnd.tiddlywiki","text":"! 自带功能\n\n在太微里，使用自带的高级搜索{{$:/core/images/advanced-search-button}}，搜到东西之后可以直接批量删除。\n\n!! 案例\n\n!!! 批量删除草稿\n\n[img[批量删除草稿.jpg]]\n\n! 使用插件\n\n此外也可以使用[[TW-Commander|TW-Commander：批量操作条目]]插件来批量删除、增删字段。"},{"title":"批量使用details展示内容","created":"20230523151459342","creator":"马不前","modified":"20230523151816638","modifier":"马不前","tags":"筛选器类","type":"text/vnd.tiddlywiki","text":"\n```\n<$list filter=\"[tag[Widgets]]\">\n\n<$macrocall $name=\"details\" label={{!!title}} src={{!!text}} />\n\n</$list>\n```\n\n上面的代码用到了设拉子插件，但不用这个插件也是可以实现的，就是自己写details标签的语法。然后里面的内容也是用`{{!!title}}`来嵌入实现的。当然上面的语法还是用5.3.0版本之前的，后面的版本也能用，但更推荐在5.3.0版本之后使用下面的代码。\n\n\n```\n<$list filter=\"[tag[Widgets]]\">\n\n<$transclude $variable=\"details\" label={{!!title}} src={{!!text}} />\n\n</$list>\n```\n\n效果是一样的，可能后者性能还更快一点。里面筛选器部分就自己修改成需要筛选的内容了。设拉子的插件是可以选择样式的，也自己选择就行了"},{"title":"其他常见版本","created":"20231001022321698","creator":"马不前","modified":"20231001024042638","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"* [[Mehregan|https://kookma.github.io/TWE-Mehregan/]]，由[[库克马|库克马(穆罕默德•拉赫马尼)]]开发的"},{"title":"其它红框报错排查","created":"20230517051350943","creator":"林一二","keywords":"内部的javascript错误 javascript 错误 js error","modified":"20230719120012117","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"右键-开发者工具，在里面的 Console 标签里，看看是哪个插件报的错。不懂的话完整截图问群友。\n\nConsole 标签在汉化版的开发者工具里也叫「控制台」。\n\n详见下图：\n\n[img[红框报错开发者工具实例.png]]\n\n看到其中的 `plugins/linonetwo/slate-write` 就知道是一个名叫 `slate-write` 的插件报错了。如果一直报错可以暂时禁用，如果刷新后不报错了只是偶尔触发报错，也可以注意用法，下次不要那样用触发了。\n\n"},{"title":"启动器","created":"20231013041918525","creator":"林一二","modified":"20231013042059006","modifier":"林一二","tags":"如何保存","text":"[[太记|TidGi太记]]就是一个桌面版启动器，可以用于启动太微 TiddlyWiki。\n\n启动器可以帮你自动保存、自动备份等等，太微的其它启动器还有[[Tiddloid]]等，详见[[官方中文文档-开始使用|https://bramchen.github.io/tw5-docs/zh-Hans/#GettingStarted]]。\n\n太记默认会使用一个自带的仿 Notion 的发行版，但它也可以用于加载[[更多发行版|TiddlyWiki发行版本介绍]]。"},{"title":"嵌入","created":"20211003082451263","creator":"林一二","modified":"20211003083304362","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"首先阅读[[中文官方文档的教程|https://bramchen.github.io/tw5-docs/zh-Hans/#Transclusion]]。\n\n嵌入和链接都是避免复制黏贴笔记内容的方法。\n但此处我们只能通过链接引用官方文档，这是因为太微还不支持嵌入其它网站的笔记，只有两篇笔记在同一个 Wiki 内时，才能嵌入对方。"},{"title":"嵌入导致的死循环以至页面卡顿","created":"20230525163413046","creator":"马不前","modified":"20230530053813699","modifier":"马不前","tags":"排查问题 B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Pg4y1F77Y","text":"没有任何报错，然后又无法点击跳转过去的链接，并且整个页面卡顿了。那么问题可能就是某个条目其内容一直在循环重复加载，也就需要退出程序才能运行。\n\n因为我一直有在尝试通过级联的方式来自定义页面模板，但我就像写普通条目一样写内容，忘了应该要区分[[不同文本解析式模式的|https://bramchen.github.io/tw5-docs/zh-Hans/#WikiText%20Parser%20Modes]]。\n\n我在给级联模板的条目加上`code-body`字段后，其值设为`yes`，就能够正常链接跳转了。具体可见[[论坛讨论|https://talk.tiddlywiki.org/t/a-bug-without-any-reporting-of-errors/7105]]。\n\n这是5.3.0版本的新变化，之前都是直接显示“嵌入失败”，也就是常见的红色方框，但这次允许嵌入，导致一直重复加载，死循环。核心里的模板会显示出红色方框，然后不显示其他了。但级联模板却不会这样，即使两个地方代码一样。具体我也说不上来是为什么。"},{"title":"嵌入内容挤成一团","created":"20230623160147109","creator":"林一二","modified":"20230623160731989","modifier":"林一二","tags":"排查问题 在列表微件中使用筛选器","text":"如果你发现使用 List 微件和嵌入时，内容挤成了一团，只要加上空行就行了\n\n```tw5\n<$list filter=\"[<lang>search[zh]]\">\n\t{{readme/zh-Hans}}\n</$list>\n```\n\n改为这样就修好了：\n\n```tw5\n```tw5\n<$list filter=\"[<lang>search[zh]]\">\n\n{{readme/zh-Hans}}\n\n</$list>\n```"},{"title":"嵌入在不同情况下的多种写法","created":"20220124151755853","creator":"林一二","modified":"20221127072212225","modifier":"林一二","tags":"嵌入","type":"text/vnd.tiddlywiki","text":"!! 双花括号\n\n一般为这样，类似：\n\n```tid\n<$let title={{!!title}} type={{!!type}} key={{!!key}}> \n```\n\n!! 单花括号\n\n[[筛选器]]里 `{{}}` 嵌入要写为 `{}`，`{!!type}` 是 `{title!!type}` 的简写，意思是字段type的值。\n\n!! 三花括号\n\n详见[[官方嵌入文档中的|https://bramchen.github.io/tw5-docs/zh-Hans/#Transclusion%20in%20WikiText]]筛选器嵌入部分，在动态创建嵌入内容时，需要用三花括号。\n\n例如：\n\n```tid\n<$let target=<<currentTiddler>> targetTitle={{{ [<target>get[draft.title]] ~[<target>get[title]] }}} search={{{ [[$:/state/search-template-list/input]get[text]] }}} draftOf={{{ [<target>get[draft.of]] }}} >\n```\n\n以及[[在微件参数中使用筛选器]]。\n\n这里用筛选器动态创建出了内容。"},{"created":"20230102065334603","creator":"马不前","text":"! Jon Lister \n\n[[github|https://github.com/jayfresh]]","tags":"Tiddlywiki贡献者","title":"乔恩·李斯特","modified":"20230102065421156","modifier":"马不前","type":"text/vnd.tiddlywiki","caption":"Jon Lister "},{"title":"切换中英文的页面按钮","created":"20230623160837845","creator":"林一二","modified":"20230623160945990","modifier":"林一二","tags":"翻译内容","text":"参考[[CPL插件源|安装CPL插件源]]网页上的按钮：\n\n```tw5\nlist-after: $:/core/ui/ViewTemplate/tags\ntags: $:/tags/ViewTemplate\ntitle: LanguageSwitcher\ntype: text/vnd.tiddlywiki\n\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n<$list filter=\"[<lang>search[zh]]\">\n<$button set=\"$:/language\" setTo=\"$:/languages/en-GB\" style=\"\">🇬🇧 Switch to English</$button>\n</$list>\n<$list filter=\"[<lang>!search[zh]]\">\n<$button set=\"$:/language\" setTo=\"$:/languages/zh-Hans\" style=\"\">🇨🇳 切换至中文</$button>\n</$list>\n</$list>\n```\n\n效果类似\n\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n<$list filter=\"[<lang>search[zh]]\">\n<$button set=\"$:/language\" setTo=\"$:/languages/en-GB\" style=\"\">🇬🇧 Switch to English</$button>\n</$list>\n<$list filter=\"[<lang>!search[zh]]\">\n<$button set=\"$:/language\" setTo=\"$:/languages/zh-Hans\" style=\"\">🇨🇳 切换至中文</$button>\n</$list>\n</$list>"},{"title":"区块模式转内联模式","created":"20230601161938676","creator":"马不前","modified":"20230602120310144","modifier":"WhiteFall","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"最近遇到一个问题，就是在和details标签一起使用summary标签时，再次使用维基语法里的表格语法，不起作用。研究了一下官方文档才明白是因为已经从区块模式转向内联模式了。\n\n<<<\n如果在解析器处于内联模式时，遇到上述类型的维基文本符号，它将被忽略，并按原样输出。^^[[文档链接|https://bramchen.github.io/tw5-docs/zh-Hans/#Block%20Mode%20WikiText]]^^\n<<<\n\n可以进一步参考文档里的[[维基文本解析器模式|Wiki书写文本的解析器模式]]。\n\n至于上面的问题如何解决，用设拉子插件里的details，可以解决。当然在5.3.0版本里，应该还可以用其他嵌入语法解决，但目前还没有足够的示例。"},{"title":"去中心化笔记体系","created":"20230628144113127","creator":"马不前","modified":"20230628144453743","modifier":"马不前","tags":"笔记思维","text":"! 去中心化笔记概念\n\n去中心化笔记是目前笔记软件的趋势。大部分笔记软件不愿意让自己的笔记架构停留在纸笔目前式的结构上。纸笔是受物理因素的限制，而无法展开太多，当然卢曼卡片笔记法这类特殊的例外。除了目录式结构，另外常见的结构还有流程式的。比如某一项目的开始和结束，整个项目的核心是什么，可以分为几个环节，时间上是怎样安排的，分别由谁负责等。\n\n但正如上面所描述的那样，任何结构都天然地拥有中心。中心未必是一个，也可以是三个中心，三位一体嘛。或者四个部分。这些其实都意思着中心。万事万物的存在都是为了中心服务的。如果不能与中心有所联系，那么就很容易被排除在外。但现实并不只是如此。完全可以有去中心化的思维方式，类似子弹笔记或者原子笔记。但子弹笔记和原子笔记又过于简略。关键词也是如此，无法为整个系统所承担。\n\n去中心化笔记也是一个系统，这和常见的笔记系统并不冲突，相反应该是相辅相存的。但我一般只用这一个系统，而不用其他的。同样，我也只用tiddlywiki来演示去中心化笔记的概念及其他内容，但并不意味着只能用tiddlywiki来实现。\n\n按照我的理解，去中心化笔记可以从四个角度来理解，分别是链接、嵌入、非线性叙事、概念叙述。其中链接和嵌入是文本的外部内容，非线性叙事与概念叙述则属于文本的内部。但两者也会有交叉重合部分。以下逐一讨论。\n\n! 链接\n\n链接相当于留一个传送门，可以传送到其他地方去。如果能从同一个传送门，来回传送，我们可以称之为双链。目前大部分笔记软件都支持双链，但支持的细粒度不一样。本文暂不详细讨论这一点。但支持双链其实是近几年的事情。之前的笔记软件大部分只支持单向链接，只能跳转过去，不能跳转回来。类似于注解那样。这是因为当时的考虑还没有完全区分文档与笔记系统之间的区别。\n\n!! 文档与笔记系统的区别\n\n文档可以分为两种，一种是简单的word文档，一种是数据库大量的文档。文档与笔记系统是两种完全不同的东西。其最关键的就在于打印。有些人可能不理解为什么是打印这个特点？笔记系统也可以打印出来啊？\n\n这是因为打印的目的往往涉及到版权。就像打官司需要打印大量文件一样，文档的目的其实是为了可以打印出来保存。文档对应的其实是文章。而文章就容易受到版权的影响，也就是我们引用其他文章的内容需要注明来源。这不是说笔记系统里引用其他文章不需要注明来源，而是说文档的打印特点决定了会产生文章的版权性质。而笔记系统完全不需要考虑这一点。笔记系统不管是纸质的，还是电子的，其目的不是为了打印和复印，而是为了更好地呈现笔记内容和组织信息。\n\n之间的笔记系统只有单向链接就是没有考虑到word文档和笔记系统的区别。以为在笔记系统中，对于不属于当前文章的内容可以只使用注释一类的单向链接传送过去就可以。这就割裂了不同笔记之间的内容，因为需要反复查看。常见的学术书籍，要么把所有注释都放在章节末尾，要么把注释放在引用页码的下面。前者不容易翻阅查找，后者我经常可以看到有一页内容有一半以上都是注释的内容。其实完全可以把注释的内容独立出来。但为了整体（中心）考虑，就没有这样做。一个人的笔记系统不是论文，所以完全不需要这样处理。\n\n而文档的另一类就是数据库。除了工程项目这种需要用到大量图纸的，我并不十分推荐笔记系统里使用图片。但目前笔记软件往往为了迎合用户的需要，允许用户上传附件。然后就产生了同步的费用。其实完全不如买个U盘或者硬盘，专门存放资料。我个人理解的笔记仍然是以语言文字为主的内容，而不是像手帐一样的手工艺品。如果是为了做成手帐那种效果，那直接做实体手帐比较好。\n\n数据库的存在会挤压笔记系统的存在，因为都放附件了，很多内容好像附件就说明了，而不用特意说明一样，似乎完全不需要记笔记了。导致笔记系统进一步萎缩。其实除了自己创造的图片音频或者视频等内容，大部分附件都属于别人的作品，别人的想法和思路。我们之所心要打造我们的笔记系统，就是希望里面的内容尽可能是由我们自身创造的，而较少地由别人创造。如果是要引用别人的成果，也应该尽可能以文字的形式转述。别人的作品有别人的思路和考虑，有别人以为的中心存在，而我们可能并不需要他那个中心，只取我们所需要的内容就好了。\n\n另一方面是其实图片里的内容也是很需要考虑的。因为图片很容易吸引注意力，但图片里的设计又很难说清楚。如果只是为了美化，那大可不必。因为图片的存在会占用美化的空间，也就是会不断专注于图片上的美化而忽略了其他可以美化的空间。图片里的设计是说内容上的引导，但这其实是不自信的一种，如果笔记内容足够好，又为什么需要图片呢？当然为了做自媒体这种，需要参考市场化的规律进行处理，我这里说的只是个人的笔记系统。\n\n很多新手使用tiddlywiki最苦恼的就是不能像其他软件一样更自由地上传附件。我反而因此觉得tiddlywiki这一点要比其他软件要好。\n\n!! 双链\n\n双链确实像是营销笔记软件的一个卖点，也确实解决了之前笔记软件所不能做到的关键。但双链目前还没有一个相对统一的处理方式。比如obsidian的双向链接和tiddlywiki的双向链接就有很大的差异。这导致了当前情况下，构建笔记系统必须依赖一个笔记软件。在tiddlywiki里记的笔记的双链情况在obsidian里还需要重新处理一遍才能正确显示出来，相反也是一样的。未来或许会有类似的插件来解决这一问题。\n\n但如果因为营销过度而就排斥双链，那就得不偿失了。链接的作用其实是为了将不同内容区分开来，好比一个大的空间，要分出客厅、厨房、卫生间、卧室，小孩的卧室等几个部分一样。区分开了，就可以更好地打扫不同区域。而双链则可以让我们“打扫”不同区域两次或多次。“打扫”其实就相当于对笔记的复习整理。当我们从某个笔记的链接传送到另一处时，我们其实既在接受另一处笔记的信息，也能够不断激活之前笔记的信息。相当于对应着来看笔记内容。而这也能在一定程度上激发创造力和想象力。两者的重合与交互在脑海中迅速完成，当有足够的刺激时，就可能碰撞出新思想的火花。\n\n在去中心笔记体系构建中，链接一般就是指双链，而不是单向链接，但排除那种很多附件体量非常大的数据库形式。正是因为了链接的存在，去中心笔记体系才得以实现。不然我们可能得把想要的笔记同时找出来并摆在眼前。\n\n! 嵌入\n\n''嵌入是构建去中心化笔记的关键。''\n\n!! 为什么需要嵌入呢？\n\n嵌入是指把其他笔记内容嵌入到另一笔记中。因为我现在基本上只使用tiddlywiki，并不了解其他笔记软件是如何处理这一点的。所以我只讨论在tiddlywiki中的嵌入。\n\n因为嵌入的存在，笔记体系才可能由自身构建出复合信息。在没有嵌入之前，一个条目里的笔记和其他文本没有什么区别，这条笔记可以以任何形式存在，可以随便复制到其他地方里去。但有了嵌入，这个笔记就和另一个笔记有了更深入的联系了。如果要复制这条笔记，那就需要同时复制另一条笔记，不然这条笔记呈现出来的内容是不完整的。\n\n这是从源码上理解。实际上因为tiddlywiki的渲染机制，我们可以同时复制整个笔记页面渲染出来的内容。在tiddlywiki中，嵌入不仅是嵌入其他笔记，还可以嵌入自身，成为编辑自身的自指程序。示例可见太微中文教程网站上“能编辑自己的笔记”条目。这是技术层面，一般笔记中并不需要做到这个地步。\n\n通过嵌入的方式，而不是用附件文档的方式来重复使用笔记的内容，实现了笔记的复用，从而保证笔记系统的完整性。我们不需要去这里或那里寻找某个笔记内容，某段文字，某个观点，一切都可以记录在这个笔记系统里，无限制地供其他笔记使用。这固然增加了笔记系统的负担，但也使得笔记系统能够最大化地利用起来。也就是说，这样的笔记系统一直处在高速运转中，既不断吞噬一切新的笔记，也不断重组长出枝叶藤蔓，同时又不是混乱无序的，在复杂中承受了时间的重量。如果遭到遗忘的背叛，映射在头脑中的内容会变得混乱，但简单且大量的路径刺激复习，也能迅速掌握笔记系统。而又不会让不熟悉笔记系统的人也如此迅速。\n\n具体来说，我的tiddlywiki花了很多时间去记笔记，去组织信息。如果有一天我遗忘了其中部分笔记，我也能通过嵌入或者链接的形式迅速找回，但其他不熟悉我wiki的人不能迅速找回。我的wiki只对我有效，投入在这上面的时间并不会背叛我。尽管平时笔记中，我也很少用到嵌入，但如果没有嵌入，笔记系统不会如此简洁高效又复杂完整。\n\n!! 嵌入与直接引用及检索\n\n在没有嵌入之前，短一点的内容是直接引用，长一点的就是自己概述，然后给出注释。这种方式虽然简单，但不适合笔记体系。因为这里引用的内容，在另一处可能就是概述了，然后就因为不同的表述而生产出不同的笔记内容了。而当需要时，再检索起来就会很麻烦，因为路径不统一，头脑中就会逐渐只留一个，而放弃另一个，除非两个都加强，这又需要精力，后续维护起来也十分困难。关键是内容还会对不上，因为对应着不同场景，很容易产生记忆错乱。\n\n不管是直接引用还是间接引用，都不利于后续检索，也容易对笔记体系造成混乱，采用嵌入的方式则能最大程度平衡两者。\n\n!! 嵌入与链接应该如何搭配？\n\n对于单个笔记上整体所需要的内容，一般使用嵌入，而不是整体上需要的内容则尽可能使用链接。需要对指向的内容再编辑时，一般用链接。链接比嵌入更明显，更突出，也更容易进入编辑状态。而嵌入相对隐蔽一点。嵌入一般会嵌入对当前笔记有重要价值，且不怎么会更改时的内容。当然这并不是绝对的，链接与嵌入混着用也没问题。\n\n一般的笔记体系是只为个人服务的，也就是你的wiki你做主。但如果需要考虑到公开成博客供其他阅读，就需要组织好嵌入与链接。另一点要考虑到的是，在单个条目里嵌入的内容越多，这个条目加载的时间就越长。所以才会出现嵌入导致的死循环以至页面卡顿的例子。\n\n!! 嵌入与重复\n\n写完上面的内容，我忽然觉得还有些东西没写出来。我抛开常用的论述方式，而以更随意的手法试着把内心的想法进一步写出来。毫无疑问，嵌入是一种重复。一般的看法中，应该要避免重复，要有自己的个性。同时也不能抄袭别人的内容。但嵌入的重复不是一般的重复，这是一种创造性的重复。德勒兹出版的第一本专著，就是《重复与差异》，也就是说嵌入的重复并非简单的重复，而是一种包含着差异的重复，一种突出差异的重复。当我在条目A的第二行引用条目B时，在条目C的第五行引用条目B，条目A与条目C引用了同样重复的内容 条目B，但这两个条目并不是重复的。而且应该说，正是因为在不同条目的引用造就了条目A和条目C分别的独创性。\n\n而这样的例子在伟大的艺术作品是很是常见。比如史铁生的《命若琴弦》里，开头和结尾完全一样。这是重复不错，但这样的重复不仅突出了人物形象，使之有着宿命的意味，更深华了作者表达的主旨，对待命运并不是完全放弃，而仍然有而且必须要有信念的。在电影里，经常会使用同一个镜头，这已经相当常见。为什么要使用同一个镜头，同样的镜头在不同的电影时间里代表了什么？表达了什么？传递了什么？这才是需要引起人们思考的。也就是说，当我们在重复某一个东西的时候，考虑到的并不是重复的内容，而不是重复之外的内容，也就是差异化的内容。什么东西不仅没有因为重复而变得隐藏起来，反而越加突显了？当老人再一次摔倒没人扶起来的时候，我们再一次回想起彭宇案，当我们重复了这个案子时，我们再一次突显了什么？\n\n重复对于差异的塑造是有着多种多样的方式的。这一点在音乐上特别明显。按下一个键位，我们听到一个音符，一个音符搭配着一段空白时间。就可以说是组成了一个音阶。而不同的音阶搭配在一起就组成了一段旋律。而不同的旋律因为不同的赋格，而有了不同的内容。典型的就是巴赫和贝多芬的作品。旋律并不能组成交响乐，但旋律有了这样或那样的重复，在不同的调子上，时间长短的变化中，就创造了伟大了乐曲。\n\n这样说还是过于抽象了，再简单一点，以常见的鬼畜作品为例。很多素材都是重复使用，调不同音调，音高音低，搭配不同的音乐，通过多样的剪辑方式，来表达不同的内容。虽然素材是重复的，甚至二创之后还有三创四创，但其表现的内容是不一样的。当然有人会说，鬼畜作品的内容其精神和审美价值普遍一致。但问题是鬼畜作品的体量摆在那里。甚至我们换一个体量更大的范畴，低俗作品，低俗作品的体量非常大，远超其他任何类型的作品，但这样的作品存在着，在自我重复中不断变化着，在与其他类型作品的差异中，延续了一种谁也无法逃避的生机。我并不是要因此肯定低俗作品，而是说当重复进入了解释学循环中，重复里的差异会不可避免地涌出重复本身，发展出原本重复中所不具备的内涵来。这种内涵有时是可控的，有时是不可控制的，比如梗的传播。\n\n而实际上，如果我们没有有意识地去控制的话，反而会在不自觉中重复了自身表达的内容，这就是为什么会批评一些作家一直在写重复的内容，炒冷饭。重复的技巧是一种比创造更难以学会的技巧，也更难传授的技巧。在未来的某一天，也许比创造的技巧更为珍贵的是重复的技巧。\n\n嵌入不仅是重复，它是对我们掌握知识最基本也最简单的运用，就像拼图一样。如果我们把自身的笔记体系，自己的wiki不完全看作是一个规定好了的程序，而是一件艺术品，像一幅画或者像一部文学作品那样，尽可能发挥自身的创造才华，同时也在尽可能利用起嵌入来重复那些值得被其他笔记所使用的内容，我相信这样的笔记体系应该会是真正意义上的第二大脑。\n\n我并没有认真读完德勒兹的那本书，对德勒兹的哲学理论也不是很了解，我对音乐也不是很了解。以上内容如有错误，还请指证。\n\n! 非线性叙事\n\n链接和嵌入是笔记体系的外部，意味着链接和嵌入的前提是先存在笔记，至少存在两条以上的笔记才有可能用到链接和嵌入的功能。而如何写好第一条笔记，实际上问题就很容易转变成如何写好一条笔记或者如何写好每一条笔记，这就是笔记体系的内部。而笔记体系的内部，则主要是非线性叙事和概念叙述。\n\n叙事很好理解，就是表明了某一件事。比如“国王死了。”这就叙事了一件事情。因为这里是指笔记体系，与理论来源的叙事学有诸多差异。在叙事学理论中，可能并不认为“国王死了。”是叙事，而认为要加上“王后病死了，然后国王伤心死了。”这种具有因果关系的才是叙事。笔记体系里的叙事并不需要有什么因果关系，只需要有这件事存在即可。\n\n叙事可以分为两种，一种是线性叙事，一种是非线性叙事。线性叙事就是按照因果关系和时间关系，甚至同时也按照逻辑关系的前后顺序来描绘事件的方式。比如“今天我七点起床，快迟到了，我就忘了吃早饭，匆忙赶到了学校。快放学的时候，我感到非常饥饿。”整个过程是先起床，然后反应出快迟到了，然后因为匆忙赶着去学校就没吃早饭，所以放学时会感到饥饿。\n\n但非线性叙事会这样写。“今天七点我起床了，不知道为什么好想去学校，路上一个人也没有。快放学的时候，我才发现自己没吃早饭，饿得咕咕叫。”这个过程中，为什么想去学校的原因被隐藏起来了。正常理解是因为上学快迟到了。但也可以反常理解，比如今天本来是周末，不用去学习，但小伙伴约了一起玩，而要去学校。但后面又提示了路上一个人也没有和快放学的时候肚子饥饿，说明还是因为起晚了迟到了且没吃早饭。因果关系，时间关系和逻辑关系三者只需要有一个被打乱了，就可以说是非线性叙事。\n\n事实上，留意一下平时说话表达的内容，就会发现我们表达时用的方式绝大部分都是非线性叙事。因为人脑完全是想一出是一出的，想到什么就开始表达了。反而沉默的人往往是大佬。这很简单，但可以让语言和思维保持一致，可以说是人类长期演化的结果。相反如果与人交流时考虑太多，很有可能传达不了信息。\n\n而我们要做的事情就是让写笔记就像和平时说话一样。想到什么说什么。我给这样的笔记起了一个名字，叫“牢骚笔记”，完全像是在发牢骚一样，想说什么说什么。不管怎么扯，只有一直在打字输入内容，都可以看作是某种笔记。牢骚笔记是为了减轻输入时的心理压力。毕竟写笔记与说话不一样，电脑又不会像同学或者朋友一样做出各种反应。人脑接收不到反馈，就不愿意为此继续投入精力了。\n\n当然也不至于太过于没有头绪，比如“从东罗马的帝国灭亡对21世纪水果罐头销量的影响及如何推动22世纪火星移民的发生”，这个内容就完全超出了笔记的范围。\n\n而非线性笔记搭配上链接与嵌入两个方式，基本上只要有输入内容，就存在需要整理的情况，而且输入内容越多，需要整理的内容就越多。也就是说，笔记体系里的非线性笔记从来不把笔记看作是完成时，当笔记在笔记软件里写下来的时候，就像婴儿刚刚诞生，还需要很多修改整理的步骤。如果我们认为把笔记写下来就足够了，那也完全不需要笔记软件和笔记体系了，直接找朋友聊天不是更好吗？\n\n而整理就需要涉及到我们所说的概念叙述了。\n\n! 概念叙述\n\n整理笔记，从何处开始整理？从概念开始整理。但概念通常会隐藏起来，有时我们也会说出我们不了解的概念，比如“保守主义”，保守主义与自由主义一样，拥有着诸多解释，有很多涵义。如果我们在写笔记的时候，不能清楚地知道在这个语境下，这个概念运用了什么内涵，就永远整理不清楚笔记内容。\n\n去中心化笔记之所要去中心化，就是要给不同的概念取不同的名称。假设“保守主义”这个概念，有五个常见内涵，有三个不常见内涵。那么应该给“保守主义”相关的条目列几条笔记呢？我个人认为至少是七条。一条笔记用来说明保守主义大概有什么内涵，五条笔记分别说明五个常见的内涵，而另外三个不常见的内涵，则可以放在一起。后面研究时经常会用到再分别独立出来。当然还可以有保守主义的历史时期，代表人物，代表文献，当下的发展等等一系列研究内容。\n\n这样平时在写笔记时，就可以区分出某一篇文章在运用保守主义时，到底是指什么内涵，还是说不清楚，只是为了行文方便，随意使用。当然，我上面只是假设，实际上有什么内涵需要通过阅读和查阅相关资料来解决这个问题。而且假如三个不常见的内涵中，有一个内涵你觉得非常重要，可以用来概括当下某个社会现象，那么完全可以把这个内涵独立出来，重点加以阐释。毕竟是在写笔记，不是在写辞典，不需要考虑那么多。论述过程中要有基本的逻辑。\n\n实际上这就是在用独立的条目细化笔记内容。细化笔记内容更常见的是《supermemo二十条规则》，但写笔记也是一样的道理。在细化的过程中，明白概念的内涵与外延，明白如何正确描述一个概念，明白概念的限定条件和具体使用场景。在细化的过程可能有些烦琐，但正是这样脚踏实地一步步走过来，才会明显感觉到掌握了知识，而不是遭遇了知识。\n\n! 未完成的与可持续的阅读与笔记与写作\n\n笔记是未完成的写作，写作是未完成的笔记。笔记与写作都是对方的桥梁，两者就像阴阳相对，都是未完成的状态。实际上，如果我们进一步思考，不仅笔记与写作是未完成的，阅读也是未完成的。\n\n先说笔记与写作的未完成吧。笔记写出来是为写作服务的，也就是我们要用我们的笔记去写作。笔记本身是一种写作，但笔记的写作与我们理解的写作不太一样。前者通常是私密的，后者通常是公开的，甚至是付费的。前者是不成系统的，零散的，后者是成系统的，统一的。前者没有经受别人的检验，后者通常已经得到了一部分人的认可，也经过了编辑的检验。很明显这里的写作是像出版一本书一样的出版写作。\n\n对写作者而言，写完一本书既意味着这本书已经完成，也意味这本书没有完成。因为在写作中一定会有新的问题，新的思路出现。绝不可能出现一本书就把所有世间所有内容都写完了。对于写作者而言，也是如此，他心中肯定还会有其他想法没有表达出来。写完时会感到如释重负，觉得已经完成了。但过了一段时间之后，如果还重新检视这本书的话，一定会感觉到还有很多想法没有补充进去。\n\n没有补充的想法往往又写成了笔记，留待下一本书的写作。所以从这个角度看，笔记也是未完成的。只要在写作，通常是在不断的写作。只有处在不断的写作中，写作才能成为写作的意义本身。而完成了的写作将不再具有写作的意义。一般而言，写作者会享受甚至追求写作的意义。''意义只在实践中产生''。\n\n而上面的过程中也必然包含了进一步的阅读。也就是说不管是在写作前需要写笔记时需要阅读，在写作完成后的写作，也需要写笔记，也就需要进一步的阅读。阅读与笔记与写作三者紧密联系在一起。只要笔记是未完成的，那么阅读也是未完成的。\n\n那么未完成意味着什么呢？未完成其实就是一种可持续的状态，可持续并不是持续的状态。因为持续的状态往往是一个时间段里的持续，比如在学生时代有些人有阅读笔记写作的习惯，但过了学生时代就没有这种感觉了，也没这个习惯了。整个持续的过程中，可以是自发的，也可能是被迫的。\n\n但可持续的状态就意味着这是一种自发的，一直在坚持但又不消耗意志力的状态。并且这个过程可以获得一种享受。一种真正的具有实在性质的意义。\n\n那我为什么又要用“未完成”来描述呢？因为未完成才会有一种紧迫感，一种需要立即去做的感觉，但整个过程又是非常有序的，不是混乱的。更重要的是，未完成会给人一种遗憾的感觉，好像我不这样做，我不去做这件事，我就遗失了什么。而人最想要的就是回到过去改变这种遗憾。于是在当下我们就会想要去完成这种事，这样一种积极的欲望状态就构建出来了。一种`暗示-执行-奖励-暗示`的习惯机制也构建出来了。\n\n这就是为什么一个连续的完整的状态，我却要用“未完成”的概念来表达。''未完成的''的状态在其他编辑器里体验不到这种感觉的。像在obsidian里，或者vs code里，因为我们意识里会把这些看作是写一篇可以结束的文章。所以写完了笔记，就不需要再回看了，而且写的时候特别小心谨慎，但其实那样更消耗意志力。在tiddlywiki里通过''未完成的''写作，我们的写作得以进一步出发。\n\n去中心化笔记并不是什么神奇的东西，也不是什么新奇的概念，而是在结合平时写笔记的经验及在tiddlywiki上的实践总结而来的。想起李小龙的名言。\n\n<<<\n以无法为有法，以无限为有限。\n<<<\n\n笔记方法一类的大概也是如此吧。其中有很多没有考虑到的地方，也有很多没写到的地方，请读者见谅，但这些还是等到未来再补充吧。"},{"title":"全平台软件和存储方式","created":"20221127032909691","creator":"WhiteFall","modified":"20231001120930095","modifier":"WhiteFall","order":"2","tags":"资源链接 如何保存","type":"text/vnd.tiddlywiki","text":"! 使用、存储方式与全平台软件\n\n<<alert-leftbar secondary \"思维导图（左上角）：https://www.zhixi.com/view/70759713 （因子，聚集，自由组合）\" width:60%>>\n\n<<alert info \"''Notes''：TiddlyWiki非常灵活拥有：''HTML文件''与''文件夹'' 2种存储形式；''桌面浏览器''，''服务端软件''，''应用软件'' 3种使用方式。\">>\n\n<$macrocall $name=\"alert\" type=\"primary\" src=\"\n''全平台软件列表：''\n\n* Windows、macOS、Linux ：[[TidGi|TidGi太记]]、[[Timimi|https://ibnishak.github.io/Timimi/]]、[[TiddlyDesktop|https://github.com/TiddlyWiki/TiddlyDesktop/releases]]、[[TiddlyStow|https://twpub-book.netlify.app/tiddlystow.html]]、[[NodeJS|https://nodejs.org/zh-cn/]]\n\n* Android：[[TidGi-Mobile|https://github.com/tiddly-gittly/TidGi-Mobile]]、[[Tiddloid|https://github.com/donmor/Tiddloid]] + [[WebDav_Server_Pro_1.17|https://zhuanlan.zhihu.com/p/543783107]]\n\n* IOS与IPad：Quine2、VPS（虚拟专用服务器）\n\n* VPS与服务器：[[NodeJS|https://nodejs.org/zh-cn/]]、WebDav、[[TiddlyHost|https://tiddlyhost.com]]\n\n* [[GitHub桌面版|https://desktop.github.com/]]、[[Git分布式版本控制系统|https://git-scm.com/]]、[[TidGi默认Wiki知识库模板（GitHub）|https://github.com/tiddly-gittly/Tiddlywiki-NodeJS-Github-Template]]\n\" class=\"bg-transparent\"/>\n\n\n\n\n---\nNodeJS:[[如何启动一个NodeJS的TiddlyWiki项目]]\n\nWebDav: WsgiDAV(python通过PIP安装或者MSI安装程序)，Rclone，IIS WebDav\n\n[[HTML与文件夹的转换]]:tiddlywiki单文件可以解压后提供给nodejs，TidGi使用\n<br><br>\n\n!安卓移动服务器\n\n将手机作为知识库存储位置吧。  \n\n安卓方案：Tiddloid + WebDav_Server_Pro_1.17\n\nWebDav_Server_Pro_1.17安装使用简单，支持太微文档列表、支持为太微在桌面创建快捷方式、支持备份、创建副本，支持其它设备通过浏览器、文件资源管理器和局域网访问，你可以和Tiddloid配合使用，解锁高级功能。\n\nwebdav服务器、系统与浏览器API、nodejs运行环境。移动服务器、桌面服务器、网站服务器、云盘与同步\n\n<br><br>\n\n!Termux与NodeJS\n\n\n* Termux的bash.bashrc文件位置：$PREFIX/etc/bash.bashrc\n* Termux中手机内部存储位置：$HOME/storage/shared   \n* [[在桌面端访问Termux终端]] \n* 在Android中配置NodeJS：[[TiddlyWiki-XP Serving TW5 from Android|https://keatonlao.github.io/tiddlywiki-xp/#Serving%20TW5%20from%20Android]]\n<br><br>\n\n\n!HTML与文件夹的转换\n\n{{HTML与文件夹的转换}}\n"},{"title":"让标题与按钮区分开来","created":"20230323224209645","creator":"马不前","modified":"20230710235953952","modifier":"WhiteFall","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"太微原生的样式里，条目的标题与按钮是放在一起的，在移动端显示就会显示为一分两半，一点也不好看。\n\n```css\n.tc-titlebar h2 {\n\tdisplay: table-header-group;\n\tword-wrap:break-word;\n\tword-break:break-all;\n}\n\n```\n\n上面的代码加上样式标签`$:/tags/Stylesheet`就基本上可以实现标题与按钮区分了。当标题很短时，标题与按钮保持一致，当标题很长时，按钮会在标题的上方。\n\n现已整合到itonnote主题插件中，[[themes/itonnote/settings|$:/themes/linonetwo/itonnote/settings]]。"},{"title":"让导入的图片放在特定目录中","created":"20230520150239624","creator":"马不前","modified":"20230520151014442","modifier":"马不前","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"首先添加一个条目`$:/config/FileSystemPaths`，内容如下： \n\n`[!is[system]has[save-to]get[save-to]] [get[title]search-replace:g:regexp[/|\\\\],[_]] +[join[/]] `\n\n然后在拖入的图片加上`save-to`字段，内容是`images`，这图片就会自动加入`images`文件夹。 \n\n以上方法由群友@徵羽所写，只作简化处理。\n\n上面`save-to`字段和`images`文件夹，都是可以自定义修改的。这应该是用到了太微文件系统特性。具体可看[[文档介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#Customising%20Tiddler%20File%20Naming]]。"},{"title":"人生意义“生き甲斐”是什么？意义之塔插件介绍","created":"20230530053353555","creator":"马不前","modified":"20230530060336194","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Tm4y1471B","text":"用到了[[意义之塔插件|https://tiddly-gittly.github.io/intention-tower-knowledge-graph/]]。并见另一个视频[[意义之塔插件如何管理你的人生意义|https://www.bilibili.com/video/BV17h4y1Z7hy]]。两个视频是讲同一个插件，便不再新建一个条目展示。"},{"title":"日志条目","created":"20220103155952700","creator":"林一二","modified":"20220103160622957","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"你可以每天用太微记录一下日记。通过右侧菜单里（可能需要点击{{$:/core/images/down-arrow}}展开被收起的更多按钮）的添加日志按钮{{$:/core/images/new-journal-button}}即可创建标题类似「2022年01月04日」这样的日志。\n\n你可以在别的待办事项、待思考内容条目里，添加类似`[[2022年01月04日]]`的链接，这样在那一天到来时，反链里就会出现对你的待办事项的引用。"},{"title":"如何把obsidian的笔记转移到tiddlywiki？","created":"20230904042410244","creator":"马不前","modified":"20230904064526162","modifier":"WhiteFall","tags":"如何保存","text":"有不少同学是从obsidian转移到tiddlywiki的，但因为obsidian的markdown格式与tiddlywiki的tid格式不一样。所以本条目就来解答这个问题。\n\n首先推荐的是[[Obsidian-Vault插件：导入Ob库到你的TiddlyWiki中]]，通过这个插件，可以搭配太记，快速导入一个obsidian库。同时导入过来的格式也是markdown的。可以先使用这个插件过渡一下。如果觉得tiddlywiki不适合，也不会影响原来的obsidian库。\n\n其次推荐的是林一二的`$:/plugins/linonetwo/markdown-transformer`，markdown转换插件，需要设置type为`text/x-markdown`，然后点击按钮转换。但这个只适合单个条目。目前还没有直接把多个文件进行转换的。\n\n因为tiddlywiki与obsidian的markdown还不通用，而且未来几年应该也不会支持通用，所以选择何种笔记软件需要自行考虑清楚。而且这个决定基本上是不可逆的，需要谨慎考虑，不然迁移成本非常高。"},{"title":"如何保存","created":"20211005050603937","creator":"林一二","list":"如何保存内容到社区仓库里 保存其他人的Wiki 保存私有内容 timimi浏览器扩展安装和使用","modified":"20231013020922306","modifier":"林一二","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"直接在网页上保存你的改动通常是无效的，[[你的改动不会被保存下来|如何保存内容到社区仓库里]]，有几个常用应用或内置功能可以用于真正地保存和备份你的笔记：\n\n!! 常用应用\n\n!!! 桌面端\n\n[[TidGi太记]]：跨平台桌面版应用，可以同时启动多个Wiki，每个Wiki保存为一个文件夹，文件夹里每条笔记都保存为单独的文件，并通过Git在节约空间的情况下保存多个历史版本备份。推荐使用此应用，可以减少很多折腾和配置的时间，直接用起来。\n\n[[TiddlyDesktop]]：跨平台桌面版应用，也可以同时启动多个Wiki，每个Wiki保存为一整个HTML文件，可以手动备份HTML文件，通过网盘可以让HTML文件在移动端打开。\n\n!!! 移动端/跨平台\n\n推荐 Android 手机用户使用开源免费的 [[太记移动版]] 或 [[Tiddloid]]。其中 [[太记移动版]] 适合太记用户或 NodeJS 版用户，[[Tiddloid]] 适合单文件版用户。\n\niOS 则使用 Quine2 等 AppStore 里的付费应用 。\n\n!! 常用插件\n\n!!! 手机和电脑同步数据\n\n不论使用 Android 还是 iOS 手机、用的是还是[[Tiddloid]]， 都可以使用[[TW-MobiLe-Sync手机tiddloid移动端同步TidGi桌面端插件]]和[[TidGi太记]]同步数据。\n\n详见[[在桌面端和移动端直接同步数据]]。\n\n!! 内置功能\n\n以下是其它高级功能，新手建议只使用太记，在真正上手后再折腾这些高级内容，以免浪费时间和丢失数据。\n\n如果使用单文件版本，并想要通过单文件版本保存到类似github的线上仓库里，请查看[[单文件版本保存到github]]条目内容。"},{"title":"如何保存内容到社区仓库里","created":"20210902045957435","creator":"林一二","modified":"20230603023528343","modifier":"马不前","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"太微是去中心化的知识库，如果你现在是在浏览器里编辑，当点击保存按钮时，太微会自动复制一份完整知识库，并将你的编辑结果放在里面，保存到你的电脑本地（不会保存到社区的中心化的知识仓库里）。这样产生的编辑结果只有你自己能看到，你可以随便修改[[部署版本的知识库|https://tw-cn.netlify.app]]来玩而不会影响 [[Github 上真正的知识库|https://github.com/tiddly-gittly/TiddlyWiki-Chinese-Tutorial/tree/master/tiddlers]]，这防止了有人误操作修改了社区知识仓库的内容。\n\n如果你希望贡献内容到社区 Github 知识仓库里，请点击链接跟随[[我们 Github 仓库里的几步操作|https://github.com/tiddly-gittly/TiddlyWiki-Chinese-Tutorial#%E8%B4%A1%E7%8C%AE%E5%86%85%E5%AE%B9]]，以获得更新权限。\n\n直接找[[林一二]]申请通过就可以了。"},{"title":"如何避免wikitext解析呢？","created":"20230909172704089","creator":"马不前","modified":"20230909173300317","modifier":"马不前","tags":"Wiki书写文本的解析器模式","text":"比如我就是想要两者之间有两个或者更多的空格，那应该如何处理呢？可以使用`&nbsp;`字符串来表示空格。这个字段串如果不是被反引号括起来的话，是一定表示空格的。基本不受css的影响。\n\n另一个是连接符的问题。因为太微会默认把两个连接符号表示为一个中横，把三个连接符号表示为一个破折号。那如果想要保留这些连接符号应该如何处理呢？`&#45;`表示连接符。\n\n这类是一些字符实体。常见的还有`&#60;`表示`<`，`&#62;`表示`>`。其他可以自行搜索了解。"},{"title":"如何参与社区和获得帮助","created":"20220108043957024","creator":"林一二","modified":"20220108050407499","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"<<reuse-tiddler \"社区联系方式\">>"},{"title":"如何测试性能？","created":"20230524141615910","creator":"马不前","modified":"20230524141644586","modifier":"马不前","tags":"B站直播 任务","type":"text/vnd.tiddlywiki","text":"学会了测试性能，就可以自己测试一下。"},{"title":"如何复制解析后的文本呢？","created":"20230909173345697","creator":"马不前","modified":"20230910005354078","modifier":"马不前","tags":"Wiki书写文本的解析器模式","text":"正常复制我们只能复制到源代码内容，并不能复制解析后的内容。那有没有办法可以复制解析后的文本内容呢？\n\n当然可以！这里我们需要使用[[Wikify微件|https://bramchen.github.io/tw5-docs/zh-Hans/#WikifyWidget]]，通过传递解析后的变量到复制领域。\n\n```\n<$vars txt=\"\"\"\n\nHello,\n\nWe're currently doing something with <$text text={{{ [{$:/temp/name}!match[]] ~[[Name]] }}}/>\n\nCould you please confirm?\n\n\"\"\">\n<$wikify name=\"cliptxt\" output=\"formattedtext\" text=<<txt>>>\n<$macrocall $name=\"copy-to-clipboard-above-right\" src=<<cliptxt>>/>\n<div style=\"white-space:pre;\"><<txt>></div>\n</$wikify>\n```\n\n上面是来自[[论坛|https://talk.tiddlywiki.org/t/how-to-feed-text-containing-widgets-to-the-copy-to-clipboard-macro-so-that-it-copies-the-wikified-text/3046/2]]的一个示例。可以弥补官方文档中缺失的示例。\n\n可以把上面的`<$macrocall $name=\"copy-to-clipboard-above-right\" src=<<cliptxt>>/>`\n\n替换成下面的\n\n```\n<$button>\n<$action-sendmessage $message=\"tm-copy-to-clipboard\" $param=<<cliptxt>> />\n复制内容\n</$button>\n```\n\n这样就不是显示在右边的按钮了，按钮上的文本也可以随意更改了。"},{"title":"如何给太微免费部署的博客添加评论区","created":"20230402020508123","creator":"马不前","modified":"20230411125413512","modifier":"马不前","tags":"B站直播 done 插件使用","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Ea4y1M7Xb/","text":"太微（Tiddlywiki）可以通过 Giscus 插件给自己的笔记添加在线评论区，需要 github 账号以及把知识库同步到 github 备份才能使用，在 CPL 里搜 comment 就可以搜到。这个功能应该一直都会是免费的。"},{"title":"如何加速访问Github","created":"20220530071515491","creator":"林一二","modified":"20230508132717664","modifier":"WhiteFall","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"!! 使用仅加速Github的开发者工具\n\n[[https://github.com/docmirror/dev-sidecar]]\n\n[[https://github.com/dotnetcore/FastGithub/releases]]\n\nWatt Toolkit(Steam++)：[[https://steampp.net/]]\n"},{"title":"如何将系统条目与普通条目保存在不同文件夹里","created":"20231101092434958","creator":"马不前","modified":"20231101093348954","modifier":"马不前","tags":"基础知识","text":"有群友在群里提问。正常情况下，我们不需要管。因为tiddlywiki不像obsidian那样，直接依赖实际的文件夹。所以系统条目和普通条目混在一起并不会影响什么。\n\n如果需要查询系统条目，可以直接在wiki里查找，然后用外部编辑器打开这个条目。\n\n也可以直接在`tiddlers`文件夹里，排序一下查找。也非常方便。\n\n我觉得唯一需要这样做的是处理图片，这一点可参考[[让导入的图片放在特定目录中]]条目。\n\n如果需要这样去做的话，那么可以参考[[$:/config/FileSystemPaths]]条目。这里是直接把系统条目前缀去除了，然后加上了`TCTSystem/`前缀。这样的话，比如正常的`$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/mono-block`条目，在实际的文件夹里应该是`$_config_EditorToolbarButtons_Visibility_$_core_ui_EditorToolbar_mono-block`的，把`/`替换成了`_`，这是因为windows系统下，不支持`/`作为文件名称，类似的还有其他一些字符。\n\n而用了[[$:/config/FileSystemPaths]]的话，就会变成文件夹路径`TiddlyWiki-Chinese-Tutorial\\tiddlers\\TCTSystem\\config\\EditorToolbarButtons\\Visibility\\$_\\core\\ui\\EditorToolbar\\mono-block.tid`，也就是会因为`/`而多出很多层次的文件夹路径。反而增加搜索负担，所以并不推荐。"},{"title":"如何列出当前条目的所有字段并展示？","created":"20230822151543410","creator":"马不前","modified":"20230822151840563","modifier":"马不前","tags":"筛选器类","text":"\n```\n<div style=\"column-count:3;\">\n<$list filter='[<currentTiddler>fields:exclude[text title created modified tags creator modifier type revision bag url]]' variable=fld emptyMessage='<tr><td>no fields</td></tr>'>\n\n<$list filter=\"[subfilter<fld>]\" variable=fieldname>\n<$list filter=\"[all[current]get<fieldname>]\" variable=field-value>\n\n;<<fieldname>>\n:<<field-value>>\n\n</$list>\n</$list>\n</$list>\n</div>\n```\n\n\n上面代码中列出了当前条目的所有字段，除了排除的`text title created modified tags creator modifier type revision bag url`字段。同时用术语定义的方式和分成列的形式展示。\n\n这是一个理解筛选器绝好的例子，也是筛选器嵌套使用的好例子。用到了[[fields筛选器|https://bramchen.github.io/tw5-docs/zh-Hans/#fields%20Operator]]。"},{"title":"如何内嵌字体","created":"20230307133742876","creator":"林一二","modified":"20230313150523669","modifier":"马不前","tags":"如何添加在线字体","type":"text/vnd.tiddlywiki","text":"参考[[论坛教程（英文）|https://talk.tiddlywiki.org/t/tw5-re-tw5-how-to-embed-a-font-using-font-face-and-data-url/6318]]：\n\n!! 使用 datauri 宏\n\n看看嵌入在「Startlight」主题中的字体，可以通过 `<<datauri>>` 宏访问你的字体文件：\n\n[[https://github.com/Jermolene/TiddlyWiki5/blob/master/themes/tiddlywiki/starlight/styles.tid]]\n\n```tw5\ntitle: $:/themes/tiddlywiki/starlight/styles.tid\ntags: [[$:/tags/Stylesheet]]\n\n\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline\n\n/*\nPlaceholder for a more thorough refinement of Snow White\n*/\n\n@font-face {\n\tfont-family: \"Arvo\";\n\tfont-style: normal;\n\tfont-weight: 400;\n\tsrc: local(\"Arvo\"), url(<<datauri \"$:/themes/tiddlywiki/starlight/arvo.woff\">>) format(\"woff\");\n}\n\nhtml body, .tc-sidebar-scrollable-backdrop {\n\tfont-family: \"Arvo\", \"Times\";\n\tbackground: url(<<datauri \"$:/themes/tiddlywiki/starlight/ltbg.jpg\">>);\n}\n```\n\n注意其中 `src: local(\"Arvo\"), url(<<datauri \"$:/themes/tiddlywiki/starlight/arvo.woff\">>) format(\"woff\");` 这一行。\n\n它通过宏嵌入了 `$:/themes/tiddlywiki/starlight/arvo.woff` 这个字体文件条目。\n\n!!! 具体做法\n\n# 下载 woff2 字体（体积比例子里的 woff 小），拖入 wiki 里，形成一个条目，获得条目名，例如 `字体名.woff2`。\n# 创建一个带有 `$:/tags/Stylesheet` 标签的 CSS 条目\n# 在里面添加 CSS 的 `@font-face` 语法：\n\n```css\n@font-face {\n\tfont-family: \"字体名\";\n\tfont-style: normal;\n\tfont-weight: 400;\n\tsrc: local(\"字体名\"), url(<<datauri \"字体名.woff2\">>) format(\"woff2\");\n}\n```\n\n注意 `font-family` 和 `src` 那边都改成字体的真实名字，例如黑体就是 `SimHei`。\n\n之后在控制面板-视觉外观-主题调整-设置-字型里就可以使用这个字体名了。\n\n常见的字体格式是ttf，像[[如何添加在线字体]]里的例子，仓库里下载下来的就是ttf格式，但太微本身不支持这种格式，或者是因为这种格式中文字体非常大。所以需要把ttf字体格式转成woff2格式。可去这个[[网站|https://products.aspose.app/font/zh/conversion/ttf-to-woff2]]转换。霞鹜文楷字体我把转换文件放qq群里了。字体文件有点大，添加过程会有卡顿，稍微等一等。\n\n\n!! 手动操作（高级）\n\n一般来说没有必要手动进行 base64 编码，因为 `datauri` 宏就会做运行时的 base64 编码。但如果你希望节省运行时的性能，又是技术人员，可以尝试下面的做法：\n\n# 下载字体文件，例如 `FiraCode-VF.woff2`\n# 正如[[转换和渲染 web 字体到 base64-保持原始外观-stackoverflow|https://stackoverflow.com/questions/26867893/converting-and-rendering-web-fonts-to-base64-keep-original-look]]中所说，在终端里执行 `base64 '~/Downloads/Fira_Code_v6.2/woff2/FiraCode-VF.woff2' -o '~/Downloads/Fira_Code_v6.2/woff2/FiraCode-VF.woff2.base64.txt'`\n# 将得到的 base64 字符串放入 `src: url(‘data:@file/octet-stream;base64,yourbase64’);`\n\n正如[[Base64编码的 OpenType 字体使用数据 URI-Stack Overflow|https://stackoverflow.com/questions/35120217/base64-encoded-opentype-font-face-using-data-uri]]中所说的那样。\n\n例如: fix: fira 代码加载很慢，使用本地版本 · tiddle-gitonnote-theme@ff75e1a · GitHub 1"},{"title":"如何启动一个NodeJS的TiddlyWiki项目","created":"20211112050622427","creator":"Sttot","modified":"20230603023236861","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"首先确保已经安装了`TiddlyWiki`，我猜你可能用两种方式安装了TiddlyWiki：全局和非全局，两种安装方法下，运行的命令是不一样的：\n\n对于使用`npm install tiddlywiki -g`进行全局安装的情况，请执行：\n\n```shell\ntiddlywiki . --listen port=8080\n```\n\n反之就是非全局(安装的时候没有加`-g`，目录下有个`package.json`和`node_modules`)，执行：\n\n```shell\nnpx tiddlywiki . --listen port=8080\n```\n\n就可以启动一个NodeJS项目了，现在命令行应该会有以下的输出：\n\n```\n syncer-server-filesystem: Dispatching 'save' task: $:/StoryList\nServing on http://127.0.0.1:8080\n(press ctrl-C to exit)\n```\n\n看到那个`http://127.0.0.1:8080`了吗？在浏览器里打开这个地址，就可以浏览和编辑这个项目了。\n\n如果出现类似如下的错误提示：\n\n```\nError: listen EADDRINUSE: address already in use 127.0.0.1:8080\n...(其他内容)\n```\n\n就说明`8080`号端口已经被占用，随便换几个试试，将`--listen port=8080`里面的`8080`换成`8081`什么的试试。\n\n对于HTMLWiki执行解压后的文件夹wiki，你可以使用这条命令：\n\n```shell\ntiddlywiki +plugins/tiddlywiki/filesystem +plugins/tiddlywiki/tiddlyweb ./你的wiki文件夹目录 --listen port=8080（自定义且没有被占用的端口）\n```\n\n!! 其他社区教程\n\n# [[林一二 在手机上运行太微nodejs博客|https://wiki.onetwo.ren/%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E8%BF%90%E8%A1%8C%E5%A4%AA%E5%BE%AEnodejs%E5%8D%9A%E5%AE%A2]] （真的是手机上运行的，所以打开比较慢，多等等）\n# [[Pimgeek 如何构建基于 Node.js 的 TiddlyWiki 服务器版网站？|https://pimgeek.com/notes/how-to-build-a-nodejs-based-tiddlywiki-website]]\n# [[Vincent 基于Node.js的TiddlyWiki服务器版安装过程记录|https://zhuanlan.zhihu.com/p/483246958]]\n# [[zm 在服务器上部署一个基于 Node.js 的 TiddlyWiki|https://jefftay.com/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%20Node.js%20%E7%9A%84%20TiddlyWiki]]"},{"title":"如何清除展示的边框，让条目显得更紧凑？","created":"20230317051804534","creator":"马不前","modified":"20230526021728002","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"原始的如下面代码所示，边框挺大的，对于偏小的电脑来说，就有点浪费空间了。\n\n```\n.tc-tiddler-frame {\n    padding: 28px 42px 42px 42px;\n    padding-top: 28px;\n    padding-right: 42px;\n    padding-bottom: 42px;\n    padding-left: 42px;\n\t\t}\n```\n\n解决办法也很容易，新建一个条目，条目名称无所谓，标签是`$:/tags/Stylesheet`，正文内容跟上面一样，不过需要把数值修改一下。我的模板如下。具体数值可以自行调整的。\n\n\n```\n.tc-tiddler-frame {\n    padding: 5px 10px 5px 20px;\n    padding-top: 5px;\n    padding-right: 10px;\n    padding-bottom: 5px;\n    padding-left: 20px;\n\t\t}\n```\n\n官方有一个`$:/themes/tiddlywiki/seamless`插件。也是移除边框的，可以试试。\n"},{"title":"如何让编辑与预览同步？","created":"20230316025821731","creator":"马不前","modified":"20230516132249914","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"这个有两种解决办法。一种是买个大一点的显示器，这个是比较好的，大的显示器会在各个方便都提供帮助。另一种解决办法就是修改样式。新建一个条目，把下面的代码复制过去。\n\n```\n.tc-tiddler-preview {\n\toverflow: scroll;\n}.tc-tiddler-preview-preview {\n\tfloat: right;\n\twidth: 100%;\n\tborder: 1px solid #cccccc;\n}.tc-tiddler-frame .tc-tiddler-preview .tc-edit-texteditor {\n\twidth: 100%;\n}.tc-tiddler-frame .tc-tiddler-preview canvas.tc-edit-bitmapeditor {\n\tmax-width: 49%;\n}\n```\n\n然后加上`$:/tags/Stylesheet`的标签，并设置编辑器的高度为固定高度。\n\n编辑和预览两个都有滚动条可以查看。但同样也不是很方便的，所以如果只是纯文本的话，那基本上也不需要开查看模式的。"},{"title":"如何让mermaid图谱的节点可以跳转？","created":"20230902123617020","creator":"马不前","modified":"20230902124100839","modifier":"马不前","tags":"插件技巧类 Mermaid插件","text":"参考[[论坛|https://talk.tiddlywiki.org/t/mermaid-tw5-plugin-update-to-mermaid-8-13-2-9-3-0/1117/19]]的用法就可以实现。\n\n```\n\\define clickactions()\n<$action-navigate $to=<<dom-title>>/>\n\\end\n\n<$eventcatcher selector=\".node\" $click=<<clickactions>>>\n\n<$mermaid text=\"\"\"\nflowchart LR\n    A[Links to Tiddler A] --> B[Links to Tiddler B] --> C[No link]\n    click A noop \"Tiddler A\"\n    click B noop \"Tiddler B\"\n\"\"\"/>\n</$eventcatcher>\n```\n\n需要安装mermaid插件。"},{"title":"如何设置启动时展示内容？","created":"20230529125911846","creator":"马不前","modified":"20230529130217118","modifier":"马不前","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"可以看oeyoews写的[[代码|https://github.com/oeyoews/neotw/tree/main/archive/plugins/tiddlywiki-announcement/tiddlers]]。\n\n可以新建一个条目，名称自取，把下面的代码复制下去。\n\n```\n<$list filter=\"[[启动内容]get[text]count[]!match[0]]\">\n<$action-sendmessage $message=\"tm-modal\" $param=\"启动内容\" />\n</$list>\n```\n\n并加上`$:/tags/StartupAction/PostRender`。然后再新建一个条目，名称是`启动内容`，里面就是写要展示的内容了。"},{"title":"如何搜索","created":"20211017133211080","creator":"林一二","modified":"20211017133433784","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"基本的搜索一般通过[[命令菜单]]插件来做，按下 `ctrl/cmd + P` 即可唤出搜索框。\n\n高级搜索参见[[官方文档中的内容|https://bramchen.github.io/tw5-docs/zh-Hans/#Searching]]"},{"title":"如何添加在线字体","created":"20230307085803297","creator":"林一二","modified":"20230516132339093","modifier":"马不前","tags":"B站直播 自定义样式修改类","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1K84y1A7aJ/","text":"!! 添加条目\n\n怎么更新的呢？首先去[[谷歌字体网|https://fonts.google.com/]]找一款喜欢的。\n\n然后新建一个条目，标题随便写，或者写某种字体类型也可以，打上标签`$:/tags/RawMarkup`，里面的正文一般是下面的格式。\n\n```\n<link href=\"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200&display=swap\" rel=\"stylesheet\">\n```\n找到网站右边复制一段类似上面的代码放到条目正文里。然后\n\n* 在控制面板-视觉外观-主题调整-设置-字型里使用这个字体名\n* 或者直接去[[$:/themes/tiddlywiki/vanilla/settings/fontfamily]]这个条目里添加上你选择的格式放在最前面。比如我的是`'Noto Serif SC', serif;`。保存刷新就可以看到效果了。\n\n不过我发现上面网站里没几款字体。楷体都没找到，只有这种宋体或者衬线体。另一款比较黑的，对英文支持不太好。英文根本就不能阅读了，简直是草书。目前先用这个字体吧，配合整体的绿色，感觉还是很小清新的。\n\n[[霞鹜文楷|https://github.com/lxgw/LxgwWenKai]]\n\n这是一个开源字体，效果还不错。配置如下。\n\n```\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/lxgw-wenkai-lite-webfont@1.1.0/style.css\" />\n```\n\n和上面描述的一样，需要加上`$:/tags/RawMarkup`标签，正文是一个link链接，直接复制就可以。type设置为`text/html`。再到[[$:/themes/tiddlywiki/vanilla/settings/fontfamily]]最前面添加`\"LXGW WenKai Lite\";`。然后需要在标签层级里把`霞鹜文楷`（或者你设置的标题）放到最前。\n\n不放到最前是看不到效果的。点开标签就可以看到层级。\n\n一些其他的网站也可以搜索到。\n\nhttps://www.npmjs.com/search?q=lxgw\n\nhttps://www.jsdelivr.com/?query=lxgw\n\n这样使用字体最为快捷，不过断网就用不了了。如果想折腾离线版字体，可以学习[[如何内嵌字体]]。\n\n!! 修改设置\n\n最后记得把字体名字填到 控制面板-视觉外观-主题调整-字形 里面，然后要刷新浏览器，不生效记得看看右键开发者工具-网络，里面字体文件网络加载成功没有\n\n编辑器字体则是改那个 控制面板-视觉外观-主题调整-编辑器字形。还有个代码字形，是指预览状态下的代码块里的字体。\n\n\n!! 常见问题\n\n!!! 如果你修改编辑器字形后不生效，可能因为要安装codemirro插件才行。\n\n如果你未安装codemirro插件，可能是因为你使用了太微空白版在从头配置一切，如果你是第一次使用太微，建议还是用[[TidGi太记]]，而不是从头配起，以免占用你本可以用于工作学习娱乐的宝贵时间。\n\n!!! 装到电脑上行不行\n\n其实这字体没必要装到太微里面，只要电脑上装了就行，然后这个就是在不同用户电脑上看最左边的电脑上有没有安装，如果没安装就往右再试一个。\n\n不过如果希望发布为博客后，读者也看到相应字体，就需要装到太微里了。\n\n!!! 字型和代码字型设置这里，为什么每一栏都有这么多字体？\n\n如果像编辑器字型一样，字型和代码字型都只留一种，是否会有影响？\n\n如果必须保留多款，前后排序是否有讲究？\n\n可以只保留一个，有多个时排最左边的最优先，这个其实就是会填到 CSS 的 font-family 里面，学习一下 CSS 里字体的用法就知道了。\n"},{"title":"如何写一个注释或者提示？","created":"20230521132616079","creator":"马不前","modified":"20230814033241137","modifier":"WhiteFall","tags":"插件技巧类","type":"text/vnd.tiddlywiki","text":"最早来源于对钓鱼插件的思考<<fnote \"因为在用钓鱼插件复习的时候，我忽然发现好像少一个注释或者提示的功能。后面我去提了一个issue。因为钓鱼插件的设计是仿照anki的，所以是在填空题里借助id的形式来提示。但我觉得这样不太好。就感觉还是独立成一个提示功能。但后续可能没时间开发出来。后面我便想到，这个功能可以用更简单的方式来实现。\">>，后面想到可以用库克马的''Refnotes参考注释插件''。\n\n比如在条目后面简单写就可以看到演示效果。`test<<fnote \"测试\">>`\n\ntest<<fnote \"测试\">>\n\n更多用法可以查看[[教程|https://kookma.github.io/TW-Refnotes/]]。\n\n当然也可以自己定义类似的宏文本，比如[[鼠标悬停嵌入]]。"},{"title":"如何写一个TW插件(TiddlyGit版)","created":"20211112073134519","creator":"Sttot","modified":"20211112073208305","modifier":"Sttot","tags":"插件开发","type":"text/vnd.tiddlywiki"},{"title":"如何新建笔记库、新建笔记","created":"20220108050955568","creator":"林一二","modified":"20220108051055400","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"[[用TiddlyWiki替代Notion和EverNote作为个人知识管理系统 - 林一二的文章 - 知乎|https://zhuanlan.zhihu.com/p/140473235]]\n\n`// demo 时间`\n\n[img[https://pic1.zhimg.com/80/v2-7ebe0a5cca52c9a2030b7ec0bb74c3d4_720w.jpg]]"},{"title":"如何修改编辑器字体大小？","created":"20230526022219312","creator":"马不前","modified":"20230526022459412","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"[[论坛链接|https://talk.tiddlywiki.org/t/changing-editor-font-size/2596]]\n\n上面的论坛链接里说明了一般模式下修改编辑器字体大小的方式。也就是把下面的代码复制到一个新条目里，并添加`$:/tags/Stylesheet`标签。\n\n```\n.tc-edit-texteditor-body {\n    font-size: 24px;\n    line-height: 30px;\n}\n```\n\n但notebook主题比较特殊，需要用另外的代码来修改。具体参考下面的代码。\n\n```\n.CodeMirror-lines {\n  cursor: text;\n  min-height: 1px;\n  font-size: 34px;\n  line-height: 30px;\n}\n```\n\n里面font-size的数值可以自己调整。"},{"title":"如何用状态条目隐藏侧边栏","created":"20220216072757180","creator":"林一二","modified":"20220216072957136","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"你希望默认关闭侧边栏吗？\n\n参考[[Jeremy的回答|https://github.com/Jermolene/TiddlyWiki5/issues/3171]]，可以创建一个标题是 `$:/state/sidebar` 的条目，内容填 `no` 就好了。\n\n在 NodeJS 版里，以 `$:/state/` 开头的条目默认不会保存，只作为临时状态。除非你手动创建这样的条目。"},{"title":"如何用Github桌面版回滚","created":"20230402020305575","creator":"马不前","modified":"20230402020356313","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Ws4y1U7YH/"},{"title":"如何在单文件版里写一个TW插件","created":"20220207045559774","creator":"林一二","modified":"20220207045646506","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"使用[[Gatha|https://talk.tiddlywiki.org/t/gatha-plugin-experimental-release/2272]]插件，可以直接在任何Wiki里把一些条目打包成插件。它也可以管理做到一半的插件的草稿。"},{"title":"如何在服务器上部署一个基于 Node.js 的 TiddlyWiki","created":"20230206024102298","creator":"zm","modified":"20231031061959484","modifier":"zm","tags":"TiddlyWiki","type":"text/vnd.tiddlywiki","text":"2023-10-31 ''本方法问题多多，请酌情参考''\n\n!! 前置条件\n\n# 有一个域名\n# 有一个 VPS 服务器\n\n!! 安装 Node.js 和 TiddlyWiki\n\n* 更新软件包 `apt update`\n** RedHat 系~~使用 `yum`~~ ''新版本用 `dnf`''\n* 安装 Node.js `apt install npm`\n* 全局安装 TiddlyWiki `npm install -g tiddlywiki`\n* 检查 TiddlyWiki 版本 `tiddlywiki --version`\n* 创建 TiddlyWiki 目录 `mkdir ~/wiki` wiki 可以替换为想要的名字\n* 在 TiddlyWiki 目录下创建基本文件 `tiddlywiki wiki --init server`\n* 创建用户权限文本 `vim ~/wiki/users.csv` 或者用 nano 等文本工具\n\n`users.csv` 文本内容：\n\n```\nusername,password\njohndoe,!@#$%^\n```\n\n其中首行为必填项，第二行为用户名和明文密码，英文小写逗号，不包含任何空格（具体参考官方文档：[[WebServer Parameter: credentials|https://tiddlywiki.com/#WebServer%20Parameter%3A%20credentials]]）\n\n!! 安装 Nginx 和 Let's Encrypt\n\n* 安装 Nginx `apt install nginx`\n* 创建并编辑代理服务器配置 `cd /etc/nginx/sites-available` ''不同发行版打包的 Nginx 配置可能不同''\n* 然后 `vim example.com`\n** 其中 example.com 为域名\n\n`example.com` 文本内容：\n\n```nginx\nserver {\n    server_name example.com\n    client_max_body_size    100M;\n    \n    location / {\n    proxy_pass   http://127.0.0.1:8080;\n    proxy_set_header        Host             $host;\n    proxy_set_header        X-Real-IP        $remote_addr;\n    proxy_set_header        X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n其中 `client_max_body_size` 条目设置最大上传文件大小\n\n* 链接并启用代理服务器 `ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled` ''不同发行版打包的 Nginx 配置可能不同''\n* 安装 Let's Encrypt 以及激活 nginx 插件 `apt install certbot python3-certbot-nginx`\n* 创建 SSL 认证 `certbot --nginx` 按照说明进行设置\n* 运行 TiddlyWiki 并访问域名测试是否启动成功 `tiddlywiki wiki --listen credentials=users.csv \"readers=(anon)\" \"writers=(authenticated)\"` \n* 其中 `creadentials` 字段指定用户权限文本名称，`readers` 为只读权限（此处的 `anon` 为匿名，即任意访客），`writers` 为读写权限（`authenticated` 读取 `credentials` 中指定的用户）\n\n!! 安装 pm2 并设置后台运行服务\n\n可选：`systemd` `init` 等\n\n* 全局安装最新版本 pm2 `npm install -g pm2@latest`\n* 准备 TiddlyWiki 启动脚本 `vim ~/tw.sh`\n\n脚本内容（''不建议跑在 `root` 下，仅供参考''）：\n\n```\ncd /root\ntiddlywiki wiki --listen credentials=users.csv \"readers=(anon)\" \"writers=(authenticated)\"\n```\n\n* 赋予 `tw.sh` 权限 `chmod +x /root/tw.sh`\n* 通过 pm2 守护进程运行 TiddlyWiki `pm2 start /root/tw.sh`\n* 保存当前状态 `pm2 save`\n* 设置开机自启 `pm2 startup`\n\n!! 参考文献\n\n* [[Installing TiddlyWiki on Node.js|https://tiddlywiki.com/#Installing%20TiddlyWiki%20on%20Node.js]]\n* [[How to: TiddlyWiki on NodeJS + nginx proxy + LetsEncrypt|https://talk.tiddlywiki.org/t/how-to-tiddlywiki-on-nodejs-nginx-proxy-letsencrypt/1183]]\n* [[tiddlywiki-nodejs 安装部署|https://www.cnblogs.com/cathonzhd/p/16376972.html]]\n* [[Tiddlywiki builds a personal blog|https://programmerall.com/article/92502171339]]\n* [[如何构建基于 Node.js 的 TiddlyWiki 服务器版网站？|https://pimgeek.com/notes/how-to-build-a-nodejs-based-tiddlywiki-website]]"},{"title":"如何在NodeJS里写一个TW插件","created":"20211112032733951","creator":"Sttot","icon":"🧩","modified":"20220207045545206","modifier":"林一二","page-cover":"https://unsplash.com/photos/tZc3vjPCk-Q/download?ixid=MnwxMjA3fDB8MXxzZWFyY2h8MTF8fGRlc2lnbnx8MHx8fHwxNjM4MzY4OTM4&force=true&w=1920","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"<<alert warning \"\"\"\n!! 写在前面\n\n''注意''：本文适用于Linux、Unix和macOS类系统，如果是Windows，建议使用WSL等类Linux环境，同时本文默认你已具有一定的命令行使用经验，包括如何使用指令、如何定义环境变量等，否则请参考[[如何写一个TW插件(TiddlyGit版)]]。\n\n''建议：''强烈建议使用NodeJS版本的TiddlyWiki进行插件开发，而不是[[使用单文件版本的TiddlyWiki|如何在单文件版里写一个TW插件]]，不然开发起来会很痛苦。本文只介绍在NodeJS环境下的插件开发。\n\n''建议：''本教程需要简单使用Git和NodeJS的技能以及编写JSON文件的能力，如果没有相关的知识，应当先去学一下，并且在电脑上安装`git`和`node`。\n\n@@position:absolute;bottom:10px;right:20px;margin:0;font-size:130px;line-height:1em;opacity:0.1;user-select:none;\n⚠️\n@@\n\"\"\">>\n\n!! 创建开发环境\n\n首先，在你喜欢的位置创建一个空文件夹，我们就假设这个文件夹叫`MyTWPlugin`吧，然后在这个文件夹中使用NodeJS创建一个项目：\n\n```shell\nnpm install cross-env tiddlywiki --save-dev\nmkdir tmp && npx tiddlywiki tmp --init && mv tmp/* . && rm -rf tmp\nmkdir tiddlers plugins themes languages\n```\n\n修改`tiddlywiki.info`，用VSCode等代码编辑器打开之，并将代码语言改成`JSON`。并在中添加一些插件和语言(@@color:red;注意省略号`...`代表其他内容，你可以按照自己的喜好添加别的内容，实际文件中请删除掉省略号`...`和每个`[]`中的最后一项的逗号`,`@@)：\n\n```json\n{\n    \"description\": \"My TW5 plugin develpment prject\",\n    \"plugins\": [\n        \"tiddlywiki/pluginlibrary\",\n        \"tiddlywiki/filesystem\",\n        \"tiddlywiki/tiddlyweb\",\n        ...\n    ],\n    \"themes\": [\n        \"tiddlywiki/vanilla\"\n    ],\n    \"languages\": [\n        \"zh-Hans\"\n    ],\n    ...\n}\n```\n\n好了，开发环境就搞定了。如果你乐意，可以在GitHub上新建一个repo，并把这个文件夹上传，具体方法就不讲了。\n\n!! 介绍开发环境\n\n让我们看看现在目录下都有什么：\n\n* `node_modules`：NodeJS项目依赖，不用管。\n* `tiddlers`：存放一般的Tiddler的文件夹，一般不会手动去改而是通过TiddlyWiki修改，所以也不用管。\n* `plugins`：你写的插件要放到这里面，后面会讲。\n* `themes`：如果你开发的是主题，那么就写在这里面。\n* `languages`：如果你开发的是语言翻译，那么就写在这里面。\n* `package-lock.json`和`package.json`：NodeJS配置文件，不用管。\n* `tiddlywiki.info`：TiddlyWiki项目的配置文件，其实是一个JSON文件，配置了项目的自定义指令、添加的主题、插件和语言。上面已经配置过。\n\n接下来还有一步，请先阅读[[如何启动一个NodeJS的TiddlyWiki项目]]，然后我想告诉你一些事情，如果想要编写和生成插件，仅仅使用`npx tiddlywiki . --listen port=8080`是不够的，这样会导致TiddlyWiki找不到你的写插件在哪，因此我们需要设置三个环境变量，让TiddlyWiki知道你写的插件在哪：\n\n```shell\nnpx cross-env \\\n\tTIDDLYWIKI_PLUGIN_PATH='./plugins' \\\n\tTIDDLYWIKI_THEME_PATH='./themes' \\\n\tTIDDLYWIKI_LANGUAGE_PATH='./languages' \\\n\tnpx tiddlywiki . --listen port=8080\n```\n\n!! 开始编写你的第一个插件\n\n假设你叫`XiaoMing`，你的第一个插件叫做`abc`，接下来我们开始编写你的第一个插件。\n\n!!! 在`tiddlywiki.info`中注册你的插件\n\n用VSCode等代码编辑器打开`tiddlywiki.info`，并将代码语言改成`JSON`。并在`plugins`中(如果想要编写主题或者语言则而分别在`themes`和`languages`中)添加`XiaoMing/abc`，注意JSON格式(比如用逗号分隔，但是最后一个末尾没有逗号)，否则会报错。\n\n!!! 创建插件文件夹\n\n在`plugins`文件夹中(如果你要写的是主题而非插件，则在`themes`文件夹中；如果你要写的是翻译，则在`languages`文件夹中；)下创建`XiaoMing`文件夹，并在`XiaoMing`文件夹下创建`abc`文件夹\n\n现在，请在`abc`文件夹下创建一个空文件`plugin.info`，然后用VSCode等代码编辑器打开之，并将代码语言改成`JSON`，随后输入以下内容(这些字段的意义请看[[plugin.info文件介绍]])：\n\n```json\n{\n    \"version\": \"0.0.1\",\n    \"type\": \"application/json\",\n    \"title\": \"$:/plugins/XiaoMing/abc\",\n    \"plugin-type\": \"plugin\",\n    \"name\": \"abc\",\n    \"description\": \"XiaoMing's first plugin\",\n    \"author\": \"XiaoMing\"\n}\n```\n\n好了，现在启动项目，去控制面板的【插件】看看是不是多了如下的一个插件：\n\n<a class=\"tc-tiddlylink tc-tiddlylink-resolves tc-plugin-info tc-popup-handle tc-popup-absolute\"><div class=\"tc-plugin-info-chunk tc-plugin-info-toggle\"><button class=\"tc-btn-invisible tc-btn-dropdown\">{{$:/core/images/chevron-right}}</button></div><div class=\"tc-plugin-info-chunk tc-plugin-info-icon\">{{$:/core/images/plugin-generic-plugin}}</div><div class=\"tc-plugin-info-chunk tc-plugin-info-description\"><h1><strong>abc</strong>:&nbsp;XiaoMing's first plugin</h1><h2>~$:/plugins/XiaoMing/abc</h2><h2><div><em>0.0.1</em></div></h2></div></a>\n\n!!! 生成JSON插件\n\nTiddlyWiki插件最方便的分享和安装管理方式便是`json`格式，理由有三：\n\n* 安装与卸载方便：将json拖入浏览器页面中即可安装，删除对应的tiddler即可卸载，不需要配置环境变量；\n* 适用范围广：NodeJS和单文件形式的wiki都可以使用；\n* 方便推广与分享：json格式方便上传、下载和传输；\n\n因此，在开发时可以使用文件夹形式的插件；而发布插件时请使用JSON格式的插件。\n\n接下来我们介绍如何生成JSON格式的插件。\n\n还记得过滤器(filter)吗？因为现在你的项目中肯定不止你自己的插件，至少还会有`$:/plugins/tiddlerwiki/xxx`这样的插件，因此我们需要用到过滤器来过滤出你想要导出的插件。\n\n如果你叫`XiaoMing`，你的插件应当都以`$:/plugins/XiaoMing/`开头，所以可以使用`[prefix[$:/plugins/XiaoMing/]]`来选择你自己开发的插件——如果你还想要导出别的插件，可以写自己的过滤器表达式。\n\n好了，有了过滤器表达式，我们就可以生成JSON插件了(留意一下过滤器表达式的位置)：\n\n```shell\nnpx cross-env \\\n\tTIDDLYWIKI_PLUGIN_PATH='./plugins' \\\n\tTIDDLYWIKI_THEME_PATH='./themes' \\\n\tTIDDLYWIKI_LANGUAGE_PATH='./languages' \\\n\tnpx tiddlywiki . \\\n\t--makelibrary $:/UpgradeLibrary \\\n\t--savelibrarytiddlers $:/UpgradeLibrary '[prefix[$:/plugins/XiaoMing/]]' ./\n```\n\n目录下生成了一个`output`文件夹，里面生成了一个JSON格式的插件！\n\n---\n接下来请继续阅读：\n\n* [[plugin.info文件介绍]]\n* [[可是我的插件还是空的]]\n\n---\n\n本教程为原创，主要阅读了[[boot.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js]]内的以下函数：\n\n* `$tw.loadWikiTiddlers`\n* `$tw.loadPluginFolder`\n* `$tw.loadPlugin`\n* `$tw.loadPlugins`\n\n以及[[makelibrary.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/commands/makelibrary.js]]与[[savelibrarytiddlers.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/commands/savelibrarytiddlers.js]]文件。"},{"title":"如何展示钓鱼插件的卡片数据？","created":"20230907154752321","creator":"马不前","modified":"20230907155940678","modifier":"马不前","tags":"钓鱼插件 插件技巧类","text":"[img[https://github.com/oflg/TiddlyMemo/assets/109711900/d86d85c0-d79b-456a-a97b-ac710ebeb411]]\n\n目前我是做到这种程度，我感觉还可以接受。不过这个展示需要[[设拉子插件|Shiraz宏包]]。因为里面的flex布局是设拉子里的。而且这个如果列数特别多的话，会自动换到下一行的。\n\n[img[https://github.com/oflg/TiddlyMemo/assets/109711900/ef999c78-615e-463c-9d38-1046b389e87c]]\n\n可惜笔记本电脑屏幕有点小。不然展示起来应该也是可以的。目前这样我是能接受的。可以考虑增加到插件里去。不过我对这些字段还不是十分了解。等下去查查是什么意思。 \n\n如何实现上面的效果，请按照下面步骤实现。\n\n# 新建一个条目，命名随便\n# 添加一个标签`$:/tags/ViewTemplate`\n# 添加一个字段`list-after`，其值为`$:/core/ui/ViewTemplate/body`\n# 正文中复制下面的代码加入进去。\n\n<$macrocall $name=\"code\"  \nsrc=```\n<$let \na=\"[\" \nb=\"]\"\nc=\"{\"\nd=\"}&\"\ne=\"},\"\njsondata={{{ [{!!history}search-replace<a>,[]search-replace<b>,[]split<e>join<d>] }}}\n>\n<$list filter=\"[<currentTiddler>tag[?]]\">\n<details>\n<summary>查看数据内容</summary>\n<div class=\"flex-row\">\n<div class=\"flex-col border\">\n最近一次数据<br>\nreview:&nbsp;&nbsp;<$text text={{{ [{!!review}format:date[YYYY-0MM-0DD 0hh:0ss]] }}} />&nbsp;&nbsp;<br>\ndue:&nbsp;&nbsp;<$text text={{{ [{!!due}format:date[YYYY-0MM-0DD 0hh:0ss]] }}} />&nbsp;&nbsp;<br>\ngrade:&nbsp;&nbsp;{{!!grade}}&nbsp;&nbsp;<br>\ninterval:&nbsp;&nbsp;{{!!interval}}&nbsp;&nbsp;<br>\nlapses:&nbsp;&nbsp;{{!!lapses}}&nbsp;&nbsp;<br>\nreps:&nbsp;&nbsp;{{!!reps}}&nbsp;&nbsp;<br>\ndifficulty:&nbsp;&nbsp;{{!!difficulty}}&nbsp;&nbsp;<br>\nretrievability:&nbsp;&nbsp;{{!!retrievability}}&nbsp;&nbsp;<br>\nstability:&nbsp;&nbsp;{{!!stability}}&nbsp;&nbsp;<br>\n</div>\n<$list filter=\"[<jsondata>split[&]enlist-input[]]\"  variable=\"thisData\">\n<div class=\"flex-col border\">\nreview:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[review]format:date[YYYY-0MM-0DD 0hh:0ss]] }}} /><br>\ndue:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[due]format:date[YYYY-0MM-0DD 0hh:0ss]] }}} /><br>\ngrade:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[grade]] }}} /><br>\ninterval:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[interval]] }}} /><br>\nlapses:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[lapses]] }}} /><br>\nreps:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[reps]] }}} /><br>\ndifficulty:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[difficulty]] }}} /><br>\nretrievability:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[retrievability]] }}} /><br>\nstability:&nbsp;&nbsp;<$text text={{{ [<thisData>jsonget[stability]] }}} /><br>\n</div>\n</$list>\n</div>\n</details>\n</$list>\n</$let>\n```\ncaption=\"代码\" />\n\n里面的筛选器是`[<currentTiddler>tag[?]]`，可以根据自己的需要进行修改。`&nbsp;`字符串表示的是空格含义，一般不需要特意删除。"},{"title":"如何制作语音题？","created":"20230521090551369","creator":"马不前","modified":"20230522160447940","modifier":"马不前","tags":"插件技巧类","type":"text/vnd.tiddlywiki","text":"需要安装`speech-synthesis`插件。\n\n目前我测试了一些主流的语言大部分都是可以读的。就是日语，韩语，俄语读不出来。法语，德语，西班牙语，意大利语，葡萄牙语都是可以读的。就是感觉读起来很生硬。具体见[[issue|https://github.com/tiddly-gittly/speech-synthesis/issues/2]]。[[原api演示链接|https://mdn.github.io/dom-examples/web-speech-api/speak-easy-synthesis/]]。\n\n本方法是用宏来实现文本替代，但宏太多有可能影响性能。<<fnote \"或许可以用新版本的语法，但目前还看不太懂，就不用了\">>\n\n\n```\n\\define ?tts(content)\n\\whitespace trim\n\n<$button class=<<tv-config-toolbar-class>>>\n  {{$:/core/images/erase}}\n  <$speech-synthesis text=\"$content$\" />\n</$button>\n\\end\n\n<<?tts \"test\">>\n```\n\n新建一个条目，把上面的代码复制进去，然后加上`$:/tags/Macro`标签，就可以全局使用了。或者直接把[[TTS宏]]条目拖进去。里面的图标可以改。考虑到太微没有自带播放的图标，我就加了一个图标[[$:/images/forge-icons/play]]。\n\n这样就可以直接用宏来使用了。当然不支持的语言在上面列出。\n\n`<<?tts \"你好，世界\">>`实现效果如下，点击按钮就可以听到声音了。\n\n<<?tts \"你好，世界\">><<fnote \"因为本站没安装speech-synthesis插件，所以就听不出来。具体可去[[链接|https://dongrentianyu.github.io/WENAI/#%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E8%AF%AD%E9%9F%B3%E9%A2%98%EF%BC%9F]]里听。\">>\n\n当然为了更好地学习，我们还可以制作一个同钓鱼插件里其他编辑按钮一样的按钮。具体可参考这个条目的内容[[TTS-button]]。\n\n总结：安装`speech-synthesis`插件，把[[TTS宏]]和[[TTS-button]]和[[$:/images/forge-icons/play]]三个条目拖到你的wiki里去，就可以在钓鱼插件里制作语音题了。\n\n---\n下面是制作条目页面上按钮。仅供参考。\n\n\n```\n<$button class=<<tv-config-toolbar-class>>>\n  {{$:/core/images/erase}}\n  <$speech-synthesis text={{!!title}} />\n</$button>\n```\n新建一个条目，把上面的代码放进去。其中`$:/core/images/erase`是随意找的官网的一个图标，可以替换成其他图标。`text={{!!title}}`其中的title是要读的内容。我们用钓鱼插件制卡的话，需要改成caption。也就是`text={{!!caption}}`。并加上标签`$:/tags/ViewToolbar`。\n\n点击就可以听到读caption的内容了。一般来说这样就够了。~~但有些人可能会想只有在做语音题的时候才用到这个功能，那就可以在前面加上一个list筛选器，然后这样就只会在筛选出来的条目标题上显示这个按钮了。其他条目上不会显示。~~\n\n完整代码如下\n\n\n```\n\\whitespace trim\n\n\n<$button class=<<tv-config-toolbar-class>>>\n  {{$:/core/images/erase}}\n  <$speech-synthesis text={{!!caption}} />\n</$button>\n\n```\n"},{"title":"如何自定义动态表格的表头","created":"20230829224150779","creator":"马不前","modified":"20230830083558512","modifier":"马不前","tags":"插件技巧类 Shiraz宏包","text":"今天才发现设拉子也是支持自定义模板的，还可以自定义各种功能。完美地契合了太微高度自定义的特性。特别是里面的动态表格，里面的内容也是可以自定义的，包括表头和表格里的内容。一个常见的需求是把某个时间格式转换成想要的格式。这些在[[文档里|https://kookma.github.io/TW-Shiraz/#demo%2Fdynamic-tables-template]]可以看到。\n\n这里举一个自定义动态表格表头的例子。一般来说，表头展示的是和要展示的字段内容是一致的，但如果字段名很长，而要列出的字段又很多，就会排特别长，显得不太好看。所以有没有一种方式可以用别名的形式显示这些字段呢？当然是可以的。\n\n<$macrocall $name=table-dynamic caption=\"已完成的主题列表\" filter=\"[tag[B站直播]!tag[任务]]\" fields=\"title tags video-link\" class=\"w-100\"/>\n\n比如上面的例子，`video-link`可能就显得有些长了。那么我们怎么改呢？\n\n首先找到[[$:/plugins/kookma/shiraz/templates/header/default]]，然后复制一份，并在新条目里添加一个字段`tbl-column-list`，里面的值就是我们要转换的值字段值。\n\n再把里面的`<$text text=<<currentColumn>>/>`转换成`<$transclude tiddler=<<currentColumn>> field=\"tbl_caption\"> <<currentColumn>> </$transclude>`，在这个基础上，再把里面的`<<currentColumn>>`，改成我们想展示的内容，这里我们写`视频链接`，大概有三处。\n\n可以去[[tbl-column-list-video-link]]查看相应的代码，演示的效果已经在上面了。\n\n方案来源于[[论坛|https://talk.tiddlywiki.org/t/shiraz-dynamic-table-plugin-column-captions-and-tbl-column-list/5666/10]]。"},{"title":"入门大纲","created":"20220105131815306","creator":"林一二","modified":"20220108050830783","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"* 太微的数据如何存储\n* 如何新建笔记库、新建笔记\n* WikiText 和 MD 的写法\n* 微件和筛选器入门\n* 记忆相关的插件\n* 美化相关的插件\n* 中文教程站带逛"},{"title":"入门幻灯片","created":"20220104055133208","creator":"林一二","list":"入门幻灯片封面 入门大纲 太微的数据如何存储 存储方案展开介绍 如何新建笔记库、新建笔记 [[WikiText 和 MD 的写法]] 微件和筛选器入门 筛选器 微件 记忆相关的插件 美化相关的插件 中文教程站带逛、答疑","modified":"20220108094946576","modifier":"林一二","tags":"幻灯片","type":"text/vnd.tiddlywiki","text":"<div id=\"入门幻灯片\">\n<<presenter tag:\"入门幻灯片\" template:\"\"  loop:\"no\" footer:\"太微新手入门教程演示 | 太微中文社区\" theme:\"irana\">>\n<style>\n#入门幻灯片 .tamasha-slide-content {\n\tmax-width: unset;\n\tfont-weight: bolder;\n}\n</style>\n</div>"},{"title":"入门幻灯片封面","created":"20220106135921536","creator":"林一二","modified":"20220108045420777","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"[img[https://tiddlywiki.com/talkytalky/images/SingleFilePattern.png]]"},{"title":"萨基 姆蒂亚兹","caption":"Saq Imtiaz","created":"20230102070810419","creator":"马不前","modified":"20230102070900755","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Saq Imtiaz\n\n大纲编辑插件“流”的开发者"},{"title":"筛选出“标签≥2个”的表达式","created":"20220815043730719","creator":"Miao","modified":"20230516133522685","modifier":"马不前","tags":"自动化 筛选器类","type":"text/vnd.tiddlywiki","text":"\n\n```\n[all[tiddlers]!is[system]] :filter[tags[]count[]compare:number:gteq[2]]\n```\n\n\n说明：\n\n# [all[tiddlers]!is[system]] 限定条目为普通条目。\n\n# compare:number:gteq[2]：判断数量大于2，可以自己修改。"},{"title":"筛选器","created":"20211003082407925","creator":"林一二","modified":"20230603024318176","modifier":"马不前","tags":"入门幻灯片 筛选器表达式教程幻灯片 高级知识 基础知识","type":"text/vnd.tiddlywiki","text":"!! 类比\n\n> 这东西等价于 Ob 的 dataview 和 Logseq 的 datascript ，各家的方案用起来都有一定难度，但太微毕竟有 10 年以上的历史，谷歌搜索能搜到国际上很多相关讨论和解决方案\n\n筛选器长得类似链接 `[[ ]]` 尤其像图片引用 `[img[ProductHunt-Badge.svg]]`：\n\n> 名称开头为「插」的所有条目 `[prefix[插]]` <<list-links \"[prefix[插]]\">>\n\n!! 使用筛选器\n\n{{在列表微件中使用筛选器}}\n\n{{在嵌入中使用筛选器}}\n\n!! 相关阅读列表\n\n首先阅读[[中文官方文档的教程|https://bramchen.github.io/tw5-docs/zh-Hans/#Filters]]。\n\n# [[TiddlyWiki Filter Expression：释放 TiddlyWiki 十倍威力的工具 @闷声|https://zhuanlan.zhihu.com/p/346647657]]\n# [[筛选器类]]\n\n!! 筛选器相关的概念\n\n* 筛选器由一个或多个[[运行逻辑（Run）|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Run]]组成\n** 运行逻辑由一个或多个[[逻辑步骤（Step）|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Step]]组成\n** 运行逻辑前面可以加上[[+-=~等前置码（prefix）|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Expression]]\n\n高级用法详见[[宏变量筛选器嵌入连用]]。\n\n<$macrocall $name=\"alert\" type=\"primary\" src=\"本条目同时添加了两个标签，基础知识和高级知识。因为筛选器比较特别，筛选器的基础知识，比如像tags标签是一定要掌握的，但像一些listtops筛选器，就很复杂了，就需要放到高级知识里去理解了。\" class=\"bg-transparent\"/>"},{"title":"筛选器表达式教程幻灯片","created":"20220108095830313","creator":"林一二","modified":"20220108095943297","modifier":"林一二","tags":"幻灯片","type":"text/vnd.tiddlywiki","text":"<<presenter tag:\"筛选器表达式教程幻灯片\" template:\"\"  loop:\"no\" footer:\"太微进阶教程演示 | 太微中文社区\" theme:\"irana\">>"},{"title":"筛选器操作符","created":"20230310072958936","creator":"林一二","modified":"20230310073236514","modifier":"林一二","tags":"筛选器","type":"text/vnd.tiddlywiki","text":"详见官方文档的内置操作符列表[[筛选器操作符-TiddlyWiki 舞 基础文档简体中文版|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Operators]]\n\n此外，很多插件也会提供筛选器操作符，例如[[CPL插件源里的一些常用操作符插件|https://tw-cpl.netlify.app/#Plugin_202303045249238:Plugin_202303045249238%20%5B%5BPlugin_202302034048668%201%201%5D%5D%20%5B%5BPlugin_202302034048668%201%5D%5D%20Plugin_202302033851321%20Plugin_202302034048668%20bimlas%2Fkin-filter]]"},{"title":"筛选器插件","created":"20230101081143044","creator":"马不前","modified":"20230101093545237","modifier":"马不前","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"* ❤️kin-filter（递归地查找tiddler titles之间的隶属关系）\n* ❤️Tiddler Commander\n* ❤️内容搜索（context search）:danielo/context\n* 随机[[random|https://tobibeer.github.io/tw5-plugins/#random]]\n* ❤️FilterBuilder条目：xp/Aggregation的FilterBuilder条目快速构建一个筛选表达式"},{"title":"筛选器类","created":"20230516133248418","creator":"马不前","modified":"20230516133414865","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"一些常用的筛选器可以帮助更快速筛选出条目。同时也可以借此学习如何使用筛选器。"},{"title":"删除插件","created":"20211011142412365","creator":"林一二","modified":"20220331025825625","modifier":"林一二","tags":"安装和删除插件","type":"text/vnd.tiddlywiki","text":"由于太微里插件也只不过是一些打包好的条目，所以删除插件也就只需要删除这些条目就好了。对于打包好的条目，也只需要点击删除按钮{{$:/core/images/delete-button}}就能删掉。（你可能需要点击条目顶部[[页面工具栏]]上的{{$:/core/images/down-arrow}}按钮，在打开的下拉菜单里才能找到删除按钮{{$:/core/images/delete-button}}）\n\n!! 完全删除插件\n\n首先打开[[控制面板|$:/ControlPanel]]，然后打开「插件」标签页，然后用 `ctrl/command + F` 打开页面搜索，搜到想删的插件。\n\n点击''插件标题''，将这个插件的条目打开。（注意如果你只是点击{{$:/core/images/chevron-right}}按钮展开插件信息的话，是找不到删除按钮的，得点击标题才行）\n\n然后点击这个条目的删除按钮即可。\n\n!!! 删除可能的残余\n\n由于[[影子条目]]的存在，你可能需要在删完插件后，再用这个插件的名字全局搜索一下。太微的全局搜索自带[[批量删除]]功能，可以删除所有残余。\n\n!! 暂时禁用插件\n\n点击{{$:/core/images/chevron-right}}按钮展开插件信息，然后点击右侧的「禁用」按钮即可。"},{"title":"删除条目","created":"20211016100659679","creator":"林一二","modified":"20211016101028035","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"点击条目上方[[查看工具栏]]里的{{$:/core/images/down-arrow}}按钮，展开的列表里有一个{{$:/core/images/delete-button}}按钮，点击就可以删除。"},{"title":"删除未使用的图片","created":"20221109103303371","creator":"Miao","modified":"20230516134354077","modifier":"马不前","tags":"自动化 筛选器类","type":"text/vnd.tiddlywiki","text":"需要插件：Relink\n\n筛选器语法：[relink:orphans[]!is[system]is[image]]\n\n支持的引用：`[img[]]`、`<$link to=“”>`等等。\n\n不支持的引用：包含在宏中的任意WikiText、小部件等。\n\n说明：这个表达式可以筛选出未使用的非系统图片条目，你可以将公式输入到高级搜索（点击搜索图标或使用快捷键Ctrl+shift+A）中的筛选选项卡，即可得到结果，然后仔细确认，如果有不想删除的图片可以使用表达式排除。之后使用旁边的删除按钮删除筛选后的条目。\n\n在relink-2.1.4、relink field names-2.1.3、relink titles-2.1.3版本在中，如果在wiki中导入图像，并不能被relink正确的接收。你需要保存wiki并刷新浏览器然后再重新输入表达式才可以。这个问题与图像无关，作者说会先放一放，直到可以被解决。\n\n可能引用图片的系统条目：`$:/Import` 导入时\n\nAuthor's reply：This problem should be fully resolved as of Relink v2.3.0. You should no longer need to restart to have imported tiddlers and images show up in the orphan list. (except that `$:/Imports` might point to them, which makes them not orphans).\n作者回复：从Relink v2.3.0开始，这个问题应该完全解决。你不应该再需要重新启动来使导入的tiddlers和图片显示在孤儿列表中。(除了`$:/Imports`可能指向它们，这使得它们不是孤立条目）。\n"},{"title":"社区建设","created":"20220527053432243","creator":"林一二","modified":"20230607151152792","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"TiddlyWiki是一个开放、强大的个人知识系统，但由于国内文档较少、学习渠道较少且原版TiddlyWiki不十分美观，所以多数人与之擦肩而过。\n\n<<reuse-tiddler \"社区联系方式\">>\n\n!! 待开始任务列表\n\n{{待开始任务列表}}\n\n!! 目前在持续的其它任务\n\n!!! TiddlyWiki 太微中文社区计划\n\n* 目前主要是在做[[B站直播]]\n* 收集网络上现有的中文教程、帖子；\n* 制作常用插件索引和展示；\n* 搭建社区：是基于QQ群、论坛还是某个平台的讨论板块？\n* 在知乎、V2EX、Twitter等平台进行引流；\n* 翻译TiddlyWiki高级教程和编程文档；\n\n!!! TiddlyWiki 开发灵感与计划\n\n* [[TypeScript类型定义]]\n"},{"title":"社区联系方式","created":"20220108044302674","creator":"林一二","modified":"20231017021112619","modifier":"林一二","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"!! 中文\n\n我们致力于构建一个中文的太微社区，欢迎加入我们讨论！\n\n# QQ群：946052860\n# 论坛：[ext[talk.tidgi.fun|https://talk.tidgi.fun/topic/6]]\n\n你也可以到知乎上发帖，加上 TiddlyWiki 或太微的标签，并邀请回答。\n\n!! 英文\n\n目前主要的太微国际交流社区是 https://talk.tiddlywiki.org/ ，大家在里面使用英文交流，有很多[[Tiddlywiki贡献者]]。若不熟悉英文也可以使用谷歌翻译插件开翻译全网页阅读，开 deepl 机翻即可发帖。\n\n使用 Google 英文搜索可以搜到在 Google Group 里沉淀的大量互助内容，由于太微有近 10 年的历史，大部分问题都曾经被问答解决过了。"},{"title":"什么是数字花园，它的好处居然是轻松？","created":"20230530051534321","creator":"马不前","modified":"20230530051955451","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1h24y1A7c7","text":"文稿见[[什么是数字花园（Digital Garden）？林一二的回答|https://www.zhihu.com/question/400660802/answer/1474845176]]"},{"title":"什么是知识管理？","created":"20230510140837310","creator":"马不前","modified":"20230912044807276","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"下面是gpt的回答，感觉还不错，可以搬运上来。\n\n<$macrocall $name=\"alert\" type=\"primary\" src=\"\n假设您是一位家庭主妇，您在平时生活中需要做很多家务活，比如烧饭、洗衣服、收拾房间等。为了提高您的生活效率，可以采取以下知识管理措施：\n\n1.知识的收集：从亲戚朋友、网络等渠道收集到更多的家务知识和技巧，如厨艺、衣物清洗护理、收纳整理等方面的技能。\n\n2.知识的存储：将已经收集到的家务知识和技巧进行归类，用笔记本或网络应用进行保存，以便日后查询和使用。\n\n3.知识的共享：通过和其他家庭主妇交流、互相分享经验和技能，吸收更多的家务技巧并学习其他人的实践方法。\n\n4.知识的应用：根据自己的情况和需求，结合所收集和学习到的家务技巧，制定出更加高效和科学的家务工作方式，从而提高家务效率和质量。\n\n5.知识的评价：根据制定出来的家务工作计划与实际完成情况进行对比，及时调整和改进，提高家庭生活效率和幸福感。\n\n以上所述的例子，虽然简单，但也能够说明知识管理对于我们日常生活的重要性。通过有效的收集、存储、共享、应用和评价等环节，可以帮助我们更好地应对生活中的各种挑战，提高生活效率和质量。\n\" class=\"bg-transparent\"/>\n\n知识管理大致就是做这样的管理，从知识的获取，生产，加工，储存，实际应用和分享等内容。这些内容放在一起，就是知识管理了。每个人的知识管理方法都不一样，所以才会有各种讨论。\n\n但这种知识管理不是常见的[[ALL IN ONE]]思维。"},{"title":"使太微更易用","created":"20220815034705508","creator":"Miao","modified":"20230516135415896","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"!! 【主题集】\n是为了某个目标，使知识聚合形成解决方案。\n\n它是公式化的快速路径。比如，太微的单文件与文件夹数据类型互相转换。\n\n\n!! 【卡片集】\n是为了收集并分享单功能条目卡片，这些卡片通常是用户积累的条目组合（使用）技巧或便捷小工具，类似印象笔记的知识模板、Notion的笔记模板。我们将在一个条目中为你介绍功能与使用方法。你需要做的只是复制粘贴到你的wiki中，修改三两字，然后就可以应用在你的wiki中了。\n\n条目卡片最理想的状态，用类比的表述是花一小时制作、花一秒钟使用！（花一秒钟打标签或填字段或应用宏来使用条目卡片）\n\n这些条目卡片包括但不局限于：快速导入CSV表格、自定义标签多栏选择、应用于每个条目的条目模板、知识条目的管理卡片，自动归类的卡片等等。<br><br>\n\n\n每个单功能条目卡片大约由不多于三个条目组成，它们的格式大致如下，你需要认真填写每一个位置。\n\n---\n【卡片集】\n\n* Author Or TLF(Team)：`Second Author`，`First author`；authors\n* 描述：卡片条目介绍\n* 使用方法：xxxxxxxx\n\n\n```\n条目标题：XXX（任意）\n依赖插件：Plugin A，Plugin B\n标签：$:/XXX/XXX、$:/XXX/XXX\n条目类型：XXXX/XXXXXXX\n字段：\n\t字段名：字段值\n```\n\n```\n单功能条目卡片内容：通常为对宏、小部件、以及JS模块的封装\n\n<$let selected-tiddler=\"条目名\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n```\n\n!! 【示例集】\n表格图文混排，常用方式、日常办公格式、常用表格、文本表格内图片等等类似word富文本编辑效果示例。——《TiddlyWiki維基寫作》\n\n{{目录导航栏实例}}"},{"title":"使用标签当文件夹","created":"20230312154044824","creator":"林一二","friends":"bbb","modified":"20230312160414667","modifier":"林一二","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"<<<.tc-big-quote\n标签是将性质不同的项目联系起来的简单方法，但用以描述关系的话，信息量就太低了。\n\n所有标记上特定标签的条目，都显示为是相关的......但很难看出是怎样的关系。这些条目只是混乱无序的列表。\n\n其中一些条目比其他条目与特定标签的主题更相关，所以我们应该[[优先选择明确的关联，而不是推断的关联|https://zhuanlan.zhihu.com/p/426606275]]。\n\n其中一些条目只有几个句子是和标签有关的，但该标签却与整体条目相关联。我们应该[[优先使用细粒度的关联|https://zhuanlan.zhihu.com/p/425749221]]。与此相关的是，标签往往相当模糊或宽泛。更好的方法是更精确地链接到关联想法。\n\n而且有时候，如果能标注一点上下文，描述「为什么」某个条目是和标记上的标签有关的，就更好了。我们应该[[优先使用经过标注的关联|https://zhuanlan.zhihu.com/p/425763923]]。\n<<<[[标签是无效的关联结构 - 叶峻峣的文章 - 知乎|https://zhuanlan.zhihu.com/p/425400912]]\n\n我觉得标签用来当文件夹就够了，提供一个简单的树状结构信息，其他网状关联可以用字段和链接。有的工具可能直接提供了有向无环图的文件夹功能，那其实应该就没必要用标签了。\n\n「标签是将性质不同的项目联系起来的简单方法」其实说的也是文件夹，如果将一个条目作为项目文件夹，那么其它加了这个条目名作为标签的子条目，就相当于都是和这个项目相关的笔记了。\n\n!! 用标签的方式表示「精确的关系」\n\n标签相当于是一个条目「tags」字段下的数组，如果想描述更精确的三元组关系，例如「好朋友」，那么可以在「friends」字段下的数组里填朋友的名字。\n\n然后在太微（Tiddlywiki）里，可以把标签的 UI 「[[tag-picker 宏|https://bramchen.github.io/tw5-docs/zh-Hans/#tag-picker%20Macro]]」用于任何字段。所以可以自己放一个专门用于添加「好朋友」标签的标签栏在条目上，用于填这种精确的「三元组标签」。\n\n例如这样用[[宏]]做一个上述用于填「好朋友」字段的，看起来像是标签的 UI 组件：\n\n```tw5\n<<tag-picker tagField:\"friends\">> \n```\n\n<<tag-picker tagField:\"friends\">>\n\n再把这字段里的内容以标签的形式展示出来，这里用到了[[在列表微件中使用筛选器]]，并[[在宏调用里使用变量]]：\n\n```tw5\n<$list filter=\"[all[current]get[friends]] +[sort[title]]\" variable=\"tag\">\n\t<$macrocall $name=\"tag-pill\" tag=<<tag>>/>\n</$list>\n```\n\n<$list filter=\"[all[current]get[friends]] +[sort[title]]\" variable=\"tag\">\n\t<$macrocall $name=\"tag-pill\" tag=<<tag>>/>\n</$list>"},{"title":"使用插件源","created":"20211016092805967","creator":"林一二","modified":"20230506134210766","modifier":"马不前","tags":"安装插件","type":"text/vnd.tiddlywiki","text":"!!! 从插件源安装插件\n\n太记自带了几个插件源，点击右上角页面工具栏里的 {{$:/core/images/options-button}} 按钮，打开[[控制面板|$:/ControlPanel]]，然后打开控制面板条目里「插件」标签页。\n\n这时你会看到一个「获取更多插件」按钮，点击它，就会加载当前安装了的插件源里的插件列表了。\n\n!!! 安装官方插件源\n\n如果你是用 NodeJS 版的，有可能无法安装官方插件，不过可以将[[$:/config/OfficialPluginLibrary]]拖入你的 Wiki，就可以解锁安装官方插件了。\n\n以[[太微中文社区插件库|$:/config/ChinesePluginLibrary/Netlify]]为例，只要用鼠标把左边这个插件库条目链接拖到你自己的 Wiki 里，并点击出现的确认导入按钮，就算装好了。\n\n插件库不会自动更新，[[杰里米|杰里米·拉斯顿]]觉得这样对隐私不好。所以需要手动更新。手动更新就是去[[官网|https://tiddlywiki.com/]]把[[$:/config/OfficialPluginLibrary]]再导入一遍。不会出现重复导入的问题。\n\n关于条目拖动的原理和更多用法，详见[[拖动资源]]。"},{"title":"使用开发者工具查看CSS","created":"20220527052834614","creator":"林一二","modified":"20220527070605321","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"学习[[如何使用浏览器开发者工具|https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7]]，一般按 `option+shift+I` 或者右键菜单里点 「检查」 就能打开。\n\n这是个通用工具，在任何浏览器里都有，包括[[TidGi太记]] 和 Obsidian 都有这个功能。"},{"title":"使用太记和Github桌面版排查问题","created":"20220223140949712","creator":"林一二","modified":"20220223141518409","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"太记的侧边栏上有 Wiki 图标，右键菜单里面有这个选项：\n\n[img[用GithubDesktop打开.png]]\n\n点击后如果你没安装[[Github桌面版|https://desktop.github.com/]]，它会催你装上。\n\n然后在里面就可以看到自从上次备份以来，有了哪些变更：\n\n[img[查看当前Wiki变更.png]]\n\n如果你觉得某一个变更你不想要，或者是它导致了问题，直接选中它，右键点这个撤销选项就好：\n\n[img[撤销当前Wiki变更.png]]\n\n对于剩下的你想备份的变更，就先在下图上部分这个输入框里，随便打一些字，说明本次变更的主要内容，然后点最下面这个蓝色的按钮就可以在本地创建一个备份了。\n\n[img[提交Git变更.png]]\n\nGit 的备份算法非常节省硬盘存储空间，所以不用担心多次备份会占用很多空间，可以尽情地频繁创建备份。"},{"title":"使用CSS实现段落前空两格实现首行缩进","created":"20220503073738354","creator":"林一二","modified":"20220503074253917","modifier":"林一二","tags":"添加css样式","type":"text/vnd.tiddlywiki","text":"重点是 [[text-indent|https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-indent]] 属性。然后用 [[padding-left|https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-left]] 可以调整左边距。\n\n```tid\n@@text-indent:-2em;padding-left:4em;\n\n注：无障碍包括建筑物的所有潜在用户在其活动期间，在保证个人健康、安全和福祉的情况下，独立到达、进入、疏散和/或使用建筑物及其服务和设施的便利程度。\n@@\n```\n\n@@text-indent:-2em;padding-left:4em;\n\n注：无障碍包括建筑物的所有潜在用户在其活动期间，在保证个人健康、安全和福祉的情况下，独立到达、进入、疏散和/或使用建筑物及其服务和设施的便利程度。\n@@\n"},{"title":"使用List微件让内容可以切换中英文","created":"20230623160256078","creator":"林一二","modified":"20230623160810937","modifier":"林一二","tags":"高级知识 翻译内容","text":"!! 单行\n\n例如[ext[Modern.TiddlyDev|https://github.com/tiddly-gittly/Modern.TiddlyDev]]框架里副标题的例子：\n\n```tw5\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\"><$list filter=\"[<lang>search[zh]]\">现代太微插件开发框架</$list><$list filter=\"[<lang>!search[zh]]\">Modern ~TiddlyWiki  plugin developing framework</$list></$list>\n```\n\n!! 多行\n\n你可以将你的一个条目拆成三个条目，例如 `readme` 拆出额外的两个 `readme/zh-Hans` 和 `readme/en-GB`，然后用类似上面的方法来切换\n\n```tw5\ntitle: readme\n\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n\n\t<$list filter=\"[<lang>search[zh]]\">\n\n\t\t{{readme/zh-Hans}}\n\n\t</$list>\n\n\t<$list filter=\"[<lang>!search[zh]]\">\n\n\t\t{{readme/en-GB}}\n\n\t</$list>\n\n</$list>\n```\n\n注意之间要有空行，''不能''写成：\n\n```tw5\n\t<$list filter=\"[<lang>search[zh]]\">\n\t\t{{readme/zh-Hans}}\n\t</$list>\n```\n\n不然会让[[嵌入内容挤成一团]]。"},{"title":"使用set小部件","created":"20230603032517140","creator":"马不前","modified":"20230603032517140","modifier":"马不前","tags":"自定义字段内容","type":"text/vnd.tiddlywiki","text":"! 用set小部件\n\n你看上面的代码是不是很烦琐啊，如果我要重复调用这个代码，难道一直复制过去吗？\n\n那肯定不是啊。我们可以用set小部件来把这个值变成某个变量。\n\n`<$set name=\"day-1\" value={{{ [<now \"0DD\">] +[subtract[1]]+[addprefix[-]]+[addprefix<now \"0MM\">]+[addprefix[2023-]] }}}>`\n\n比如上面的代码里，我们新建一个day-1的变量，后面的值就可以直接使用这个了。\n\n\n```\n<$button>\n<$set name=\"day-1\" value={{{ \n[<now \"0DD\">] +[subtract[1]]+[addprefix[-]]+[addprefix<now \"0MM\">]+[addprefix[2023-]]\n}}}>\n<$action-sendmessage $message=\"tm-new-tiddler\" \n\ntitle=<<day-1>>\n\ntags={{{ [<now \"0WW\">] +[addprefix[2023-]] }}}\n\ntest1={{{ [Timeform<day-1>] +[get[TimeNumber]sum[]] }}}\n\nIsOtherText=\"timedays\" >\n</$action-sendmessage>\n</$set>\n\t当天减一天\n\t</$button>\n```\n\n上面代码中button小工具写完后，接一个set小工具。当然类似set的小工具还有很多，比如let或者var或者插件里用的，这个下次弄明白了再说。从`title=<<day-1>>`就可以看出，直接用双尖括号调用我们自定义的变量。\n\n`test1={{{ [Timeform<day-1>] +[get[TimeNumber]sum[]] }}}`\n\n而上面的代码则是把`day-1`作为和`now`一样的宏变量放进筛选器里，后面通过get来获取到`[Timeform<day-1>]`筛选出来的条目里`TimeNumber`的值，并用sum相加成总和。最终嵌入到test1这个字段里。\n\n<$button>\n<$set name=\"day-1\" value={{{ \n[<now \"0DD\">] +[subtract[1]]+[addprefix[-]]+[addprefix<now \"0MM\">]+[addprefix[2023-]]\n}}}>\n<$action-sendmessage $message=\"tm-new-tiddler\" \n\ntitle=<<day-1>>\n\ntags={{{ [<now \"0WW\">] +[addprefix[2023-]] }}}\n\ntest1={{{ [Timeform<day-1>] +[get[TimeNumber]sum[]] }}}\n\nIsOtherText=\"timedays\" >\n</$action-sendmessage>\n</$set>\n\t当天减一天\n</$button>\n"},{"title":"手写笔记与数字笔记的区别和优劣","created":"20230402013958762","creator":"马不前","modified":"20230530051423701","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1nz4y1B75s","text":"原条目名称是`在太微里的写作及思维特征`，现条目是我当时写的条目名，也是视频里的名称，就改过来了。不过当时准备要讲的也是这些。里面也谈到了写作方面的内容。"},{"title":"书本翻页效果、分层导航（遍历查看目录树中的所有条目）","created":"20221222111339474","creator":"WhiteFall","modified":"20230602051837303","modifier":"WhiteFall","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：kookma\n* 描述：分层导航，或者称为简单导航是kookma/toc中的一个宏，可以实现遍历查看目录树的所有条目，点击条目底下的next按钮，就会实现像书籍一样的翻页功能。翻页顺序为文件目录中显示的顺序。\n* 使用方法：阅读下列操作说明。\n\n\n```\n条目标题：分层导航或者简单导航（随意）\n依赖插件：$:/plugins/kookma/toc\n标签：$:/tags/ViewTemplate\n条目类型：text/vnd.tiddlywiki\n```\n按照说明安装插件并创建条目。\n\n```html\n\\import [all[tiddlers+shadows]tag[$:/tags/Macro/Toc]]\n<!-- customized class is used for buttons -->\n<style>\n.colorful-btns{color:dodgerblue;}\n</style>\n<!-- Call navigator -->\n<<multilevel-toc-navigation tag:\"contents\" close:\"yes\" class:\"kk-toc-navigation colorful-btns\" stateTiddler:\"20210328143800\">>\n```\n位于条目最后的`multilevel-toc-navigation`宏中的tag字段的值\"contents\"，`<<multilevel-toc-navigation tag:\"contents\">>`\n将它改成你的文件夹条目，比如Index子文件夹条目。然后你就可以在这个文件夹条目以及子文件夹条目底部看到蓝色next按钮，这就说明成功了。"},{"title":"鼠标悬停嵌入","created":"20230505094846758","creator":"WhiteFall","modified":"20230814033241134","modifier":"WhiteFall","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"\\define mhp(name,desc)\n<span style=\"color:green; border-bottom: 1px dashed; cursor: help;\" title=\"$desc$\">$name$</span>\n\\end\n\n\\define mhe()\n[[$$]]\n\\end\n\n【卡片集】\n\n* Author: 山岛竦峙\n* 描述：鼠标悬停嵌入。\n\n\n```\n条目标题：$:/plugins/my/Mouse Hover Embed（任意）\n标签：$:/tags/Macro\n```\n\n```\n\\define mhe()\n[[$$]]\n\\end\n```"},{"title":"数据库表格","created":"20230331080448907","creator":"林一二","modified":"20230619155119808","modifier":"马不前","tags":"自动化 B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1wN411w7n5/","text":"类似 Ob、Notion 的 Database 功能。\n\n通过[[Shiraz宏包]]里的动态表格实现。\n\n{{shiraz动态表格.jpg}}\n\n目前可用更强大的aggregation插件来实现，需要更新到0.5.0版本及以上。直接通过[[筛选器]]来实现datebase。具体使用方法参考aggregation插件readme文档。当然这个功能也是在shiraz的基础完成的，所以也需要安装shiraz插件。"},{"title":"数据自有","created":"20220108042848033","creator":"林一二","modified":"20220108043857255","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"<div style=\"float: right; display: flex; flex-direction: row; height: 300px\">\n\t<img src=\"https://solid.inrupt.com/sites/default/files/2018-09/How%20It%20Works-1%402x.png\" />\n\t<img src=\"https://solid.inrupt.com/sites/default/files/2018-09/How%20It%20Works-2%402x.png\" />\n</div>\n\n> 在过去的几年里，我们目睹了网络上个人数据前所未有的集中化。无论你同意与否，大型社交媒体都在收集我们的信息，并在其强大的数据处理中心存储和分发这些信息。人们为了获取更好的服务，不得不将数据共享给软件服务商。\n\n> 让人们重新控制数据的方式是允许数据存储在他们想存储的任何地方，而这和他们想要使用的应用程序无关。—— [[SoLiD|https://learnsolid.cn]]\n\n我们长久以来积累的笔记数据不该成为我们的枷锁，当我们不喜欢一个服务商时，我们应该要能自由地切换到别的服务商。"},{"title":"双链或间隔重复无压记录","created":"20220514135524346","creator":"林一二","modified":"20220514142143367","modifier":"林一二","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"!! 关于 RR 的双链无压记录\n\n看过[[双向链接时代的快速无压记录|https://www.yuque.com/deerain/gannbs/ffqk2e]]的同学可能都知道，roam research 之所以能带火[[双链|反向链接]]，是因为它宣传：\n\n> 输入的时候可以彻底的不整理，就完全堆在日志条目里 然后用 `[[]]` 打个标记，然后用双链的一些特性，试图让后续需要整理的时候压力也不至于很大。\n> 有些东西可能很长一段时间都用不到，那你不去整理它，后续整理的成本也就不用支付了。开始就是随意堆放的，输入成本也很低，就很赚。\n\n!! 太微的自动化无压记录\n\nroam 的选择是把未整理的内容堆放到日志条目里，这在太微里做起来也不难例如我们的添加新想法按钮，点一下之后创建新条目，就能往里输入：\n\n<<reuse-tiddler \"快速创建新笔记按钮\">>\n\n例子：\n\n# 点击快速创建想法按钮，自动创建出一个带「想法」标签的新卡片\n# 输入标题「变量：显示或隐藏空节点」，加上标签「logseq/配置」，输入内容 `:ui/show-empty-bullets?` （也可以在里面加入 `[[logseq/配置]]` 来产生双链，看你是标签党还是双链党，反正都可以实现同样的效果）\n\n两次操作即可保留内容，与之相比较的复杂折腾的情况，详见[[双向链接时代的快速无压记录|https://www.yuque.com/deerain/gannbs/ffqk2e]]。\n\n!! 太微的间隔重复放心记录\n\n但我的判断是，这种情况下一两下点击的差别其实不大（一下点击打开日志，或者两下点击创建新想法及其标题），重点是心理上放心这个内容不会丢。这种放心感才是 rr 双链系统的核心，只要有这种放心感，交互上区别其实可以忽略。\n\n而之所以有信心就算随便堆放的信息，自己也能再找到，是因为[[钓鱼插件]]，能够定期让我们回顾收件箱中的内容。（详见[[【翻译】为临时性的和不完整的笔记设置写作收件箱 - Thoughts Memo 汉化组译制|https://zhuanlan.zhihu.com/p/442485060]]），这是太微远超 roam research 和 Obsidian 的地方：\n\n钓鱼插件可以配置为自动提醒我们回顾加了「想法」标签的所有卡片（详见[[提供自动化聚合整理的能力，让你从更抽象的角度上整理笔记，而不用亲手整理]]），这也就实现了科学的低成本输入+内容不会丢的放心感。"},{"title":"水平故事河krystal插件","created":"20221227070814156","creator":"WhiteFall","modified":"20221227072942599","modifier":"WhiteFall","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"rmnvsl/krystal插件：https://github.com/crazko/krystal\n\n水平故事河，样式就像： https://pimgeek.com/notes/"},{"title":"斯蒂芬·哈拉蒂克","caption":"Stephan Hradek","created":"20230102055455896","creator":"马不前","modified":"20230102055631591","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Stephan Hradek\n\n[[github|https://github.com/Skeeve]]"},{"title":"搜索与表格的结合","created":"20230101082155233","creator":"马不前","modified":"20230101093612610","modifier":"马不前","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"http://tw-tables.tiddlyspot.com/ \n\n还有这个，这个是一个搜索和表格结合的示例，可以参考，我就是按他这个，把它里面的表格改成shiraz的，他这个用的是老版本的shiraz表格，如果用得用新表格的宏。\n\n[img[shiraz动态表格.jpg]]\n\n可以联动放到一个页面或者放侧边栏，跟有样式的列表和表格联动，我倾向于放在侧边栏。而且保留一些常用的筛选器放在侧边会很方便。\n"},{"title":"所见即所得","created":"20220926064303814","creator":"林一二","modified":"20220926064446793","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"右边有个「T」的笔图标是所见即所得。\n\n目前如果在所见即所得状态，点击旧的源码编辑模式（左边没有「T」的笔图标），可能会失去编辑焦点，有时保存出错，但不是每次这样，有时会自动保存的，万一忘了保存出错，编辑的内容也还在，只要点两下所见即所得标进出一次就好了。\n\n但是所见即所得报错主要是因为不支持表格，避免报错主要还是要把各种语法都支持了，别的也都只是治标不治本。"},{"title":"索伦·比约恩斯塔德","caption":"Soren Bjornstad","created":"20230114153014319","creator":"马不前","modified":"20230114153144934","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Soren Bjornstad\n\n'' Grok教程编写者''\n\n[[Grok教程|https://groktiddlywiki.com/read/]]"},{"title":"他们是这样评价太微的","created":"20211003070912044","creator":"林一二","modified":"20230531044603855","modifier":"林一二","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"<<<.tc-big-quote\nTiddlyWiki 旨在于铭记其用户的长期需求。因为它是[[开放源码|笔记软件开源不开源有什么区别]]的，且无需技术基础设施，我们可以确信，即使在遥远的未来，我们访问 TiddlyWiki 文件时也只需要准备一个普通的浏览器。如果在您的职业生涯开始时使用 TiddlyWiki，您可以确信它将带您直到退休。\n<<<2016 年 01 月的[[网络世界|http://www.networkworld.com/article/3028098/open-source-tools/tiddlywiki-a-free-open-source-wiki-revisited.html]]杂志\n\n<<<.tc-big-quote\n目前市面上的个人维基系统有很多种，但它们要么体积庞大、界面丑陋，要么搭建步骤复杂、对普通用户不友好，在一番比较后我最终选择了轻量化的 Tiddlywiki。\nTiddlywiki 的拥有丰富的功能和强大的插件，编辑时支持标签管理、条目关联、过滤器，也支持通过插件实现高亮代码、输入数学公式、标准 markdown 语法等等，还能自定义样式。\n<<<[[少数派评论员i9NGbgNq|https://sspai.com/post/47030]]\n\n<<<.tc-big-quote\nTiddlyWiki ，按官方说法是一个「非线性个人 Web 笔记本」。相比其他笔记和 Wiki 系统，其最大的特点之一是程序本体和数据全部都在一个单 html 文件内，与此同时仍然有着非常强大的功能和插件系统。在我看来，管理以文字、代码和数学公式为主的个人知识库， TiddlyWiki 可谓是最好的选择之一。\n<<<[[使用 TiddlyWiki 的用途和心得？知乎Rrupmid_Nyche的回答|https://www.zhihu.com/question/31214433/answer/244696951]]\n\n<<<.tc-big-quote\n以及热爱太微的更多用户……\n<<<[[更多用户评论]]\n\n{{Product Hunt Link}}"},{"title":"太记开启服务器和API","created":"20230825040301493","creator":"林一二","modified":"20230829153614384","modifier":"林一二","tags":"TidGi太记","type":"text/vnd.tiddlywiki","text":"!! 开启方法\n\n在太记侧边栏上：\n\n右键工作区图标-配置工作区-博客和服务器设置-启用HTTP API\n\n!! 开启的作用\n\n可以使用[[TW-MobiLe-Sync手机tiddloid移动端同步TidGi桌面端插件]]了，因为它是用HTTP API来同步数据的。\n\n可以开博客了，参考[[在手机上运行太微nodejs博客|https://wiki.onetwo.ren/%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E8%BF%90%E8%A1%8C%E5%A4%AA%E5%BE%AEnodejs%E5%8D%9A%E5%AE%A2]]。\n\n可以和第三方应用互相同步数据，如果第三方应用适配了太记 HTTP API 的话。\n\n!! 注意安全\n\n开启后，同一个 Wifi 局域网里的其他人都能访问你的笔记，所以这个功能默认关闭。使用需要注意信息安全！\n\n!!! 报错 401\n\n如果开启了「凭证鉴权」功能，就会报这个错，401 意思就是凭证无效拒绝访问。此功能需要懂技术才能用，但是能大大增加安全性。"},{"title":"太记如何添加打开本地文件的链接","created":"20230530053200466","creator":"马不前","modified":"20230530053232244","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Ah411c7rc","text":"还可以看一下[[打开外部文件]]条目内容。"},{"title":"太记如何用FileSystemPath隐藏私有笔记","created":"20230331060523001","creator":"林一二","modified":"20230402020017987","modifier":"马不前","tags":"B站直播 任务 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1jo4y1H7d3/"},{"title":"太记使用常见问题","created":"20211027143715051","creator":"林一二","modified":"20220527070605321","modifier":"林一二","tags":"TidGi太记","type":"text/vnd.tiddlywiki","text":"\n!! 忘了给代理配「绕过本地（绕过localhost）」\n\n因为太记在本地启动了一个太微的 Web 服务器，所以你要是忘了让你的代理工具绕过本地，就会阻碍太记加载太微：\n\n[img[太记使用常见问题-开着代理502截图.png]]\n\n解决方法：给代理配「绕过本地（绕过localhost）」，不同的代理工具有不同的配置方法，请自行在 Bing 上搜索查询。"},{"title":"太记是如何做本地持久化的","created":"20230207162528804","creator":"林一二","modified":"20230207162739988","modifier":"林一二","tags":"太微原理","type":"text/vnd.tiddlywiki","text":"[太记 tiddly-gittly/TidGi-Desktop|https://github.com/tiddly-gittly/TidGi-Desktop]] 的设计目标：\n\n1. 用户（我）拥有通过 Github Pages 部署后可分享的在线工作区\n2. 用户的所有工作区都可以通过免费的 Github 来同步和存储，在企业内机密信息可以通过企业内网 Git 服务存储\n3. 所有工作区的内容可以一并被聚合和检索\n\n太微（TiddlyWiki）的卖点之一是单 HTML 文件就是一个可执行的轻量级便携知识库，但 HTML 文件在 Git 里 diff 太大，因此在 19 年开始往太微里狂记笔记之后，我就考虑把太微的核心当做库来使用，做一个桌面端应用，从文件系统加载多个 .tid 格式的笔记，以便备份时 git diff 只发生在小条的这些 .tid 文件上。\n\n!! 和 Git 的用法基本一致的工作区\n\n用户打开 App 后，目前是一个工作区也没有的（未来在社区 wiki 库建设完成后，我会如 Obsidian 那样默认展示一个来自 wiki 库的帮助 wiki。），需要点击「添加」按钮新建工作区。\n\n[img[https://pic4.zhimg.com/80/v2-551c4a348b14b6293c704adf1132fe4f_720w.webp]]\n\n在这个 App 里，创建工作区时可以选择创建本地知识库或在线知识库。而知识库和 git 仓库是一一对应的关系。\n\n下图中左边是创建一个本地知识库，和初始化一个本地 git 仓库。\n\n右边是新用户在一台电脑上创建了一个本地 git 仓库后，可以打开「云端同步知识库」的开关，应用会根据用户（点登录按钮调 authing 登录框去登录 Github 获取的）token，拉取 Github 上已有的在线仓库（或当场创建一个），之后把本地 git 内容立即推送到 Github 上，（当然也可以选择 Gitlab 等其它服务作为提供商）。\n\n之后在另一台电脑上就能看到来自 Github、Gitlab 等不同存储提供商的在线 Git 仓库，然后通过「导入线上 Wiki」将线上同步的工作区克隆到本地，实现本地化。\n\n[img[https://pic3.zhimg.com/80/v2-e7fa71266d3b2061ffadd93f675dcf42_720w.webp]]\n\n[img[https://pic4.zhimg.com/80/v2-674ccb2173735fe620f20a3afbf534fb_720w.webp]]\n\n[img[https://pic4.zhimg.com/80/v2-0ed1e60981c5e8660261906fc0572aa7_720w.webp]]\n\n技术上说，还将在应用的一个全局配置文件里创建一个新字段，key 为新工作区 id，value 为一个工作区配置 JSON，里面包含工作区的名字、端口号、本地文件夹位置、是本地工作区还是有对应的远端存储服务器（Github 仓库）地址的在线工作区等等。\n\n桌面端根据这个配置文件 Object.keys 一下，在应用左边的侧边栏显示工作区列表。\n\n除了这些需要在 wiki 启动前就知道的元信息以外的东西，都作为笔记存在 wiki 里，例如 wiki 的主题色、插件列表等等。\n\n!! 私有内容\n\n上面说的工作区称为主工作区，还有一种子工作区，它们对应的 git 仓库在用户电脑上通过 soft link （软链接、快捷方式）连接到别的工作区的 git 文件夹里。这种工作区，称为子工作区。\n\n通过创建同步到 Github Private repo 的子工作区，然后将它在用户电脑上做一个这种快捷方式，就可以在本地的主工作区里看到所有笔记，但是在线上公开的 Github 仓库里则不会包含隐私内容。\n\n太微里有一个功能，可以根据条目所加的标签（及标签的树状父子关系等），把条目在文件系统上放入不同文件夹，所以就可以把加了 「Private」 标签的条目及其子条目自动放进去。\n\n!! 前端和硬盘的同步\n\n太微里每个笔记（叫 Tiddlers ，条目，很小的小鱼的意思，寓意适合卡片笔记写作法）都是一个 JSON，其中 text 字段是具体的笔记内容，还有 title、created、tags、authors 等字段。\n\n这个 JSON 会通过一个叫 `tiddlywiki/tiddlyweb` 的 SyncAdaptor （同步适配器）插件将渲染进程里的前端页面上新增的条目同步到客户端主进程里的内存中，然后通过 `tiddlywiki/filesystem` 这个同步适配器再将主进程内存中的 JSON 持久化到文件系统上，变成纯文本的 .tid 文件（顺应了很多用户喜欢看得见摸得着的文件的喜好，也方便 git diff）。\n\n此后桌面端应用会用 [[tiddly-gittly/git-sync-js|https://github.com/tiddly-gittly/git-sync-js]] 包定时自动 rebase push 到 Github。\n\n在太记这个桌面应用中，主进程会为每一个工作区启动一个 worker_thread ，在里面启动一个 http 服务器运行太微，并通过 HTTP 路由插件提供 CRUD。渲染进程加载 `/` 路由获取 wiki 框架、加载插件和笔记，展示给用户。\n\n因此 `tiddlywiki/tiddlyweb` 同步适配器插件在主进程和渲染进程都各有一个实例，它们通过插件提供的 `PUT /tiddler` 等路由来同步笔记。\n\n!! 其它同步适配器和保存器和自定义同步插件\n\n太微里的插件可以访问到所有笔记内容，可以在主线程启动 HTTP 路由，因此可以随便手写一个 JS 脚本笔记来同步、导入导出数据。例如 `tw-mobile-sync` 插件就添加了一个 `POST /tw-mobile-sync/html-node-sync` 路由，让手机端的单 HTML WIKI 可以向桌面端 POST 新增的条目，并收到桌面端新增的条目，完成简单的同步。\n\n更正式一点的是符合 Saver 接口的 Saver （保存器）插件，例如 `github-saver` 插件会利用用户填的 token，将 wiki 内容序列化为 HTML 后，通过 HTTP 接口提交上去，新建一个 commit 完成备份。`fallback-saver` 则可以在其它保存方式不生效的时候，强制将序列化的 wiki 导出为 HTML 文件下载到本地。\n\n最高效的是符合同步适配器接口的插件，例如 [[linonetwo/solid-tiddlywiki-syncadaptor|https://github.com/linonetwo/solid-tiddlywiki-syncadaptor]] 会在用户将它启用后，在每次有笔记变更时被调用，自行将最新的变更提交到配置的后端上。同步适配器一般会从用户 wiki 中找到特定标题或加了特定标签的笔记，从中获取 token 以及同步地址 url。例如这个将数据持久化到 SoLiD 语义网服务器的同步适配器，将会尝试从标题为 `$:/plugins/linonetwo/solid-tiddlywiki-syncadaptor/TWContainers` 的条目中找 [[LDP|https://www.w3.org/TR/ldp/]] （互联数据平台）的 url，作为存储地址。\n\n而 `tiddlywiki/tiddly-web` 是官方提供的同步适配器示例，可以用于单文件 HTML 随时随地向 [[https://tiddlyhost.com/|https://tiddlyhost.com/]] （也是一个 NodeJS wiki 实例）上同步数据，也可以用于向桌面应用主进程启动的 NodeJS wiki 同步数据。\n\n!! 总结\n\n[img[https://pic2.zhimg.com/80/v2-92d0d7c717231deef82e06b0edcd75dd_720w.webp]]"},{"title":"太记休眠工作区","created":"20231013041642021","creator":"林一二","modified":"20231013041818737","modifier":"林一二","tags":"TidGi太记","text":"左侧灰色的工作区是「休眠工作区」。\n\n!! 开启\n\n右键工作区图标，在设置里点开「开启休眠」，可以让这个 Wiki 在未使用时不占用系统资源。\n\n例如让官方文档工作区处于休眠状态节省 CPU，等到想查看官方文档的时候，再点击工作区图标就能一键开启。"},{"title":"太记移动版","created":"20231013020512707","creator":"林一二","modified":"20231013020806683","modifier":"林一二","tags":"如何保存","text":"太记移动端（TidGi-Mobile）应用的详细说明在太记官网[[https://tidgi.fun/#:TidGi-Mobile]]。\n\n阅读官网内容了解具体用法 ↑ 以及查看应用截图。\n\n它可以加速大型知识库，与太记同步方便，改动可以瞬间保存。\n\n而且也是开源的：[[Github TidGi-Mobile|https://github.com/tiddly-gittly/TidGi-Mobile]]"},{"title":"太微","created":"20211003070025914","creator":"林一二","modified":"20211003070505204","modifier":"林一二","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"<<<\n太微垣，三垣之一，按《步天歌》，太微垣為三垣的上垣。 太微垣又名天庭，是政府的意思，也是貴族及大臣們居住的地方。\n<<<\n\n「太微」是我们对 TiddlyWiki 的中文称呼，[[TiddlyWiki|https://tiddlywiki.com/]]是一款极其强大又极具拓展性的个人 Wiki 系统。\n\n为什么把 TiddlyWiki 翻译成「太微」？因为受到 [[@pimgeek|https://www.zhihu.com/people/pimgeek]] 的启发：TiddlyWiki 可以干很多细致轻量的工作，但也从不限制用法，可以无限组合叠加。故以其首字母音译为「太微」，TiddlyWiki 可以称为「太微笔记」「太微万能抽屉」「太微卡片盒」……\n\n<<<.tc-big-quote\nTiddlyWiki 是一个由单个 HTML 文件组成的非网络应用的 Wiki 程序。使用 HTML、CSS 及 JavaScript 技术，和MediaWiki、DokuWiki等不同，完全不需要任何的数据库（如：MySQL）及动态语言（如：PHP、ASP、Java 等）。因此任何人都可以在任何地方下载该页面并立即开始编辑和使用。适合一般个人单机的使用和对个人电脑的管理工作。\n<<< [[维基百科|https://zh.wikipedia.org/wiki/Tiddlywiki]]"},{"title":"太微「开始」多样的使用方式","created":"20230629083848024","creator":"WhiteFall","modified":"20230630031433231","modifier":"WhiteFall","tags":"如何保存","text":"!!! 太微「开始」多样的使用方式\n\n[img[太微「开始」-思维导图.png]]\n\n此思维导图在线的链接：https://www.zhixi.com/view/70759713\n\n\n对太微的部署，我们通过测试为您选择了几种比较简单可行的方案，你可以根据自己的需要选择合适的方案使用。其目的都是为了向太微中写入数据并保存它。\n\n如果你仅仅只是在桌面端使用， \n[img[太微「开始」-仅桌面端.png]]\n\n桌面移动同步，想走到哪里都可以使用，可以选择移动webdav服务器部署方案，webdav软件 + 一个数据文件夹 +任意平台浏览器+网络。什么时候不想在手机上用了，可以转移到桌面端webdav服务器，难度非常小，仅需要移动一下文件夹，配置桌面服务器。优点：webdav可以实现图片写到文件夹的功能，就像服务器一样。而同步不太行，而且同步占用两个空间，容易发生版本错误，服务器只有一个版本，不容易出错，加上tiddloid，还可以使用备份功能，完美。\n\n[img[太微「开始」-自建服务器.png]]\n\n如果仅仅只是想着手机上 使用可以使用Tiddloid（安卓）或Quine2（苹果）\n\n\n[img[太微「开始」-仅限移动端.png]]\n\n当然如果想要在线使用，可以使用网站服务器，TiddlyHost，只需要申请一个账号就可以免费使用。你也以可以付费购买VPS。\n\n如果是IPad或者IOS，可以使用Quine2，听说不太好用还是付费的。那应该只能通过浏览器访问了。浏览器访问必然需要服务器，这样就只有两种选择，自己动手或者使用现成的。自己动手的话无非三种选择，安卓移动端的Webdav server PRO、电脑端的Webdav服务器或者Nodejs、云服务器VPS。使用现成的就是TiddlyHost。我觉得体验最好的就是VPS，毕竟是氪金的嘛。\n\n\n!!! （2）桌面浏览器中的太微\n摘要：tiddlystow初始化创建太微文档，timimi作为在任意位置保存太微文档、FSA Uploader支持上传图片到本地文件夹。kopia定时备份。\n使用方式：创建一个文件夹存储所有的TiddlyWiki这个可以作为文档列表，你可以在这里双击打开太微，然后使用Kopia定时备份，Timimi回写文件数据，Tiddlystow用已有的太微模板新建太微。\n\n推荐使用tiddlystow初始化创建太微文档，timimi作为在任意位置保存文档的工具。TiddlyWiki的浏览器四大组件：tiddlystow（创建）、timimi（存储）、FSA Uploader（太微插件，基于File System Access API的上传器）、Kopia（定时备份）。\n\n\n!!! （3）以WebDav中心的同步系统\n\n>>>\n其一：印象 + obsidian = wiki（同步加双链）。\n其二：系统的组件：  【Webdav + 数据文件夹】（物理或数据的可移动） + 全平台任意浏览器或专用软件\n其三：桌面环境可以增加实时备份组件（KopiaUI）\n其四：数据可迁移到桌面端且成本极低，只需要搭建webdav服务器。\n>>>\n\n以WebDav为中心向外发散的星状网络。开放对文件读写的权限，支持太微文件上传插件将图片附加到文件夹。\n存储位置的变更：移动存储服务器 转移到 桌面存储服务器（附带timimi）（非window平台可以使用WsgiDAV（python）、Rclone；window平台可以使用IIS。）\n\n[img[太微「开始」-以WebDav中心的同步系统构想.png]]\n\nWebdav pro APK：https://www.zhihu.com/question/528135440/answer/2583222282\n \n部署移动端webdav服务器\n\n需要组件：浏览器（或者Tiddlloid） + Webdav pro APK+ 数据文件夹 = 移动服务器。\n\n现在我们开始在手机上部署Webdav移动服务器，所有操作都在手机上完成，包括用到的所有软件。我将会使用安卓版的Edge浏览器操作。你也可以选择其它任意安卓浏览器。\n\n\"\"\"\n1.\t安装Webdav pro APK，给它所有的话权限，它会提示软件版本过低，不用理会。\n2.\t点击开关按钮打开服务器。\n3.\t打开手机文件管理，准备一个文件夹，把太微文档放进去。\n注释：十分推荐手动输入地址，这样可以避免一些麻烦的事情。\n4.\t在手机edge浏览器地址栏输入 http://localhost:8080/你的文件夹/太微.html\n5.\t其中【http://localhost:8080/】对应你手机webdav Pro设置的主目录（在开启服务器时可以看到）。\n6.\t打开这个网页，然后添加到手机桌面快捷方式。完成部署。\n\"\"\"\n\n点击桌面的wiki图标就可以使用了。使用wiki就像使用一个独立的软件一样的感觉。\n使用的时候要先开webdav，然后再点快捷方式。\n\n[img[太微「开始」安卓WebDav应用使用方式.png]]\n\n如果想要在桌面端访问:\n\n\"\"\"\n1.\tWIFI局域网环境下，webdav网络接口设置为WIFI，桌面端直接使用移动端显示的IP地址。\n2.\t移动端热点，Webdav需设置网络接口为回环（127.0.0.1），在桌面端获取移动端的IP地址，一般是网关或者IPv4 DNS，在WIN10中你可以在已连接的WLAN（WIFI）属性中找到（点击WIFI，点击已连接WIFI的属性）。\n\"\"\"\n\n使用方式\n\n# 管理移动服务器文件，桌面端资源管理器  http://IP地址:端口号\n# 移动端浏览器，localhost:端口号/文件夹/TiddlyWiki.html\n# 桌面端浏览器，IP地址:端口号/文件夹/TiddlyWiki.html\n\n[img[太微「开始」-安卓webdav应用电脑访问.png]]\n\n\n问题与支持\n\n;问：非移动服务端设备访问太微，点击保存按钮无响应。\n:答：这可能是局域网网速太感人了，你可以等待一分钟看看。或者在移动服务器的浏览器中打开太微文档保存试试看，如果移动服务器中保存动作反应迅速，那很可能就是网速的问题。\n;问：浏览器访问时出现中文字符乱码。\n:答：使用charset插件修改浏览器编码方式。\n\n浏览器快捷方式的创建方法\n\n* edge安卓端，点击edge栏中的三个点图标，【添加至手机】按钮，创建桌面快捷方式\n* edge电脑端，点击edge栏中的三个点图标，点击应用中的【将此站点作为应用安装】按钮，安装为应用并在桌面创建快捷方式。\n\n[img[太微「开始」-webdav方式Web应用截图.png]]\n\nFirefox安卓端的添加到主屏幕\n\nFirefox在桌面创建网页快捷方式\n\n\n注意：TiddlyStow在支持的浏览器中可以作为保存文档的角色。TiddlyStow的写入文件功能只支持较新的Chromium base和safari浏览器，Firefox完全不支持文件回写功能。截止到2022年9月，经过试用Tiddloid、TiddlyDesktop、TidGi等。感觉TiddlyDesktop的Fifteenth Release (Prerelease 3)版本BUG比较多、TidGi的0.7.7版本软件本体好用wiki插件不好用。这些等等更新在使用。实测目前发现在桌面端最简单好用的的一套是TiddlyStow + Timimi + FSA Uploader + Kopia。\n创建一个文件夹存储所有的TiddlyWiki，然后使用Kopia定时备份，Timimi回写文件数据，Tiddlystow用已有的太微模板新建太微。。\n\n"},{"title":"太微背景介绍","class":"autonumhead","created":"20211003070002469","creator":"林一二","list":"中文文档 幻灯片 他们是这样评价太微的 太微 太微能做什么","modified":"20230114150249206","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"<$list filter=\"[tag<currentTiddler>]\">\n\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>"},{"title":"太微的命令菜单或搜索框插件（Command Palette）","created":"20230411124641674","creator":"马不前","modified":"20230411124833067","modifier":"马不前","tags":"B站直播 done 插件使用","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Kc411p7S3/","text":"太微中通过 CPL 中文社区插件源里的 Command Palette 插件，可以实现类似 Alfred 的搜索框 + 命令执行框功能，可以创建笔记、用筛选器搜索笔记等等。\n"},{"title":"太微的数据如何存储","created":"20220105143846951","creator":"林一二","modified":"20220108044847211","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"太微最初是一个单HTML文件形式的知识库程序，所以太微的数据一开始是保存在用户本地的浏览器内的。\n\n<div id=\"tiddlywiki-save-graph\">\n<$mermaid text='\n  graph TD;\n    浏览器内存 --> 本地硬盘\n\t\t浏览器内存 --内置Git保存器--> Git服务器\n    本地硬盘 --太记桌面版--> Git服务器\n    浏览器内存 --相关插件--> WebDav/自建云服务器\n    浏览器内存 --SoLiD或IPFS插件--> Web3\n'></$mermaid>\n</div>\n\n<style>\n.tamasha-slide-content #tiddlywiki-save-graph {\n\tline-height: 1.2rem !important;\n}\n</style>"},{"title":"太微独特之处-技术部分","created":"20220107111655244","creator":"林一二","modified":"20230901063036405","modifier":"WhiteFall","tags":"科普幻灯片 Wiki编程的定义","type":"text/vnd.tiddlywiki","text":"太微的创造者、主力开发程序员 Jeremy 在[[talkytalky演讲|https://tiddlywiki.com/talkytalky/]]里这样介绍太微：\n\n<<<\n太微（TiddlyWiki）是一个通用的 JavaScript wiki，可以完全在浏览器中运行，也可以在 Node.js 下运行。 在内部，它是一个用于高效解析和渲染 wikitext 语言的渲染管线，该语言足够丰富以表达整个用户界面。 \n<<<\n\n也就是说太微本质上是一个知识管理系统的''开发框架''，可以让用户快速定制开发出''适合自己''的「个人知识管理（PKM）系统」。但它丰富的插件市场让它的易用程度越来越高，普通用户也能即开即用，并在日常使用过程中潜移默化地也成为一名新的 PKM 开发者。\n\n为什么太微能让''普通用户''也能潜移默化地学会定制开发呢？这是因为……"},{"title":"太微独特之处-蒯因","created":"20220107120051713","creator":"林一二","modified":"20230207150956108","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"<img src=\"http://swarma.org/wp-content/uploads/2018/08/swarma7-1534231593.jpeg\" style=\"float: right;\" />\n\n<<<\nIt's also a Quine. \n它是一个[[蒯因/蒯恩|https://swarma.org/?p=3034]]\n<<<\n\n蒯因：自指的句子/代码，是自复制机器的逻辑基础；\n\n太微的蒯因特性：笔记可以作为代码执行，大部分核心功能本身也是一条条笔记；\n\n太微是笔记系统，但其自身却也是由笔记组成的，也就是说它是一个''「元笔记」''\n\n还存在[[能编辑自己的笔记]]\n"},{"title":"太微独特之处展开","created":"20220107010723181","creator":"林一二","modified":"20220107134642029","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"# 卡片化输入、卡片流展示：降低输入成本、灵活组织输出\n# 卡片的展示完全可自定义（视图-数据分离）：为自己的独特需求优化输入输出 （[[Projectify-日历表单|https://projectify.wiki/demo.html]]\n# 过滤器智能聚合：自动化组织输出，降低信息整理成本 （[[太微背景介绍]]）\n# 维基宏和微件（widget）：用简单的文本快速搭建复杂应用 （[[文件目录|$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu]]）\n# 适配MD、WIKI语法等多种格式：可以直接打开 Obsidian、Typora、Foam 等笔记工具的文件夹\n# 开源开放的核心和插件社区：数据自有、存储永久；开发有力、激发创意 （详见[[入门幻灯片]]）\n\n`// Demo 时间`"},{"title":"太微翻译文档","created":"20230713073432866","creator":"马不前","modified":"20230713073530498","modifier":"马不前","tags":"资源链接","text":"收集并翻译太微相关的文档，目前正在翻译开发者文档。\n\n* 在线网址：https://tiddly-gittly.github.io/TW-Translation-Chinese/\n* 可离线版本链接：https://tiddly-gittly.github.io/TW-Translation-Chinese/offline.html"},{"title":"太微能做什么","created":"20211003070247892","creator":"林一二","modified":"20220217093939001","modifier":"林一二","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"太微非常强大，且不需要任何服务器和数据库知识就可以实现高度定制和私有部署，但可惜由于在国内没有活跃的社区，所以太微的爱好者们往往因此对太微“望而生畏”，''这也是我们建立这个教程网站的原因：做好「太微」本土化的“指路人”、“搬运工”和交流平台''，并为国内的TW开发者提供好开发思路和开发社区。\n\n<<<\n''您曾感觉人类的大脑是有极限的吗？感觉它不足以容纳一切你需要记住的事？''\n\n欢迎使用 [[TiddlyWiki|太微]]，一个独特的[[非线性|https://bramchen.github.io/tw5-docs/zh-Hans/#Philosophy%20of%20Tiddlers]]笔记本，用于[[截取|https://bramchen.github.io/tw5-docs/zh-Hans/#Creating and editing tiddlers]]、[[管理|https://bramchen.github.io/tw5-docs/zh-Hans/#Structuring TiddlyWiki]]和[[复用|https://bramchen.github.io/tw5-docs/zh-Hans/#Sharing your tiddlers with others]]复杂的信息。\n\n用它来保留您的[[待办清单|https://bramchen.github.io/tw5-docs/zh-Hans/#TaskManagementExample]]、计划一篇[[散文或一部小说|https://bramchen.github.io/tw5-docs/zh-Hans/#%22TiddlyWiki%20for%20Scholars%22%20by%20Alberto%20Molina]]、或安排您的婚礼。记录每个闪过您脑中的想法，或创建一个灵活和反应迅速的网站。\n<<<"},{"title":"太微如何存储笔记","created":"20230207151058081","creator":"林一二","modified":"20230207151746731","modifier":"林一二","tags":"太微原理","type":"text/vnd.tiddlywiki","text":"自己开发笔记应用时就需要处理一大堆笔记的 CRUD，我（[[林一二]]）选择基于太微这个框架写我的应用，也是因为它处理了这些琐事。\n\n!! HTML 版\n\n默认情况下，所有的 Tiddlers 都以JSON对象数组的形式存储在 `<script>` 标签中，其类属性为 `\"tiddlywiki-tiddler-store\"`，类型为 `\"application/json\"`。\n\n\n每个条目都是一个包含 `title` `text` 等字段的 JSON（如果使用了标准的语义网 URL 作为字段名，并用一个条目提供 `@context`，则也可以视为 JSON-LD ，形成一个语义网应用，降低插件社区协作开发的成本……）\n\n```js\n<script class=\"tiddlywiki-tiddler-store\" type=\"application/json\">[\n{\"title\":\"XLSX Utilities Edition\",\"created\":\"20161023202301847\",\"modified\":\"20161023202301847\",\"tags\":\"Editions\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The ''XLSX Utilities'' edition of TiddlyWiki contains tools to work with `.XLSX` spreadsheets generated by applications like Microsoft Excel and Google Sheets. It can be used in the browser or under Node.js.\\n\\nhttps://tiddlywiki.com/editions/xlsx-utils/\\r\\n\"},\n{\"text\":\"In accordance with the [[Philosophy of Tiddlers]], documentation tiddlers are typically short and interlinked.\\n\\nWhen a tiddler seems as if it needs to contain subheadings, this is often a sign that it should in fact be split into several tiddlers. But it is reasonable for a [[reference tiddler|Reference Tiddlers]] to consist of an untitled introductory section followed by a titled section of details.\\n\\nConsistency of terminology is essential if the reader is not to become confused. Consistent typography and punctuation lend a professional quality to the documentation. Macros can improve the consistency and maintainability of the text.\\n\\nUse numbered lists for step-by-step instructions, and bullet points for lists whose order is arbitrary. Use a definition list in preference to a bulleted list if each bulleted item would begin with a term and a colon. If at all possible, avoid burdening the reader with a nested list.\\n\\nUse a table when information naturally falls into three or more columns, and also for lists of parameters, attributes, etc in [[reference tiddlers|Reference Tiddlers]].\\n\\nAvoid periods at the end of list items, headings and table cell text.\\n\\nThe documentation describes the current reality of ~TiddlyWiki. Avoid discussing future aspirations.\\n\",\"title\":\"Tiddler Structure\",\"tags\":\"[[Improving TiddlyWiki Documentation]]\",\"modified\":\"20210207124737959\",\"created\":\"20150110183300000\"}\n]</script>\n```\n\n在 HTML 页面加载时，会通过选择器把内容加载到应用程序内存里：\n\n```js\n$tw.loadTiddlersBrowser = function() {\n  // In the browser, we load tiddlers from certain elements\n  var containerSelectors = [\n    // IDs for old-style v5.1.x tiddler stores\n    \"#libraryModules\",\n    \"#modules\",\n    \"#bootKernelPrefix\",\n    \"#bootKernel\",\n    \"#styleArea\",\n    \"#storeArea\",\n    \"#systemArea\",\n    // Classes for new-style v5.2.x JSON tiddler stores\n    \"script.tiddlywiki-tiddler-store\"\n  ];\n  for(var t=0; t<containerSelectors.length; t++) {\n    var nodes = document.querySelectorAll(containerSelectors[t]);\n    for(var n=0; n<nodes.length; n++) {\n      $tw.wiki.addTiddlers($tw.wiki.deserializeTiddlers(\"(DOM)\",nodes[n]));\n    }\n  }\n};\n```\n"},{"title":"太微如何加载核心 API 和插件提供的 API","created":"20230207151753603","creator":"林一二","modified":"20230207160604515","modifier":"林一二","tags":"太微原理","type":"text/vnd.tiddlywiki","text":"上面的 `$tw.wiki.addTiddlers` 是在最早加载的 `boot.js` 里通过 `$tw.Wiki.prototype.addTiddlers = function` 放入 `$tw` 全局变量的，而后续的其他大部分核心都是以笔记的形式加载的。\n\n例如 `$tw.wiki.getTiddlerText` 就处在一个标题为 `$:/core/modules/wiki.js` 的笔记里：\n\n```\n/*\\\ntitle: $:/core/modules/wiki.js\ntype: application/javascript\nmodule-type: wikimethod\n\n\\*/\nexports.getTiddlerText = function xxx\n```\n\n它被加载到应用程序内存里之后，核心代码通过 `type` 判断这条笔记是可执行的，就这条笔记装入 `$tw.modules` 里存着，以备之后用 `$tw.modules.execute` 通过 `new Function` 的方式执行它。\n\n又会根据 `module-type` 是 `wikimethod`，就将它里面 `exports` 上的内容附着到 `$tw.wiki` 的原型链上，以便代码的其他部分能够调用到这个函数。其它 `module-type` 则会有其它使用其 `exports` 内容的方式。"},{"title":"太微如何实现数据自有","created":"20220108043900923","creator":"林一二","modified":"20230301055742519","modifier":"zm","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"太微实现这一点靠的是它强大的[[蒯因 Quine（元笔记）|太微独特之处-蒯因]]特性，数据展示分离的设计思路，以及其开放包容的社区生态：\n\n# 在使用太微的过程中，如果你不喜欢某个特性，可以直接删除或修改该特性对应的笔记条目（核心功能也是一条条笔记！）\n# 笔记内容没有官方规定的展示方案，你可以写 Markdown 笔记，可以写 [[Mermaid|https://efurlanm.github.io/mermaid-tw5.html]] 笔记，也可以写 WikiText 笔记，只需要用某个包含程序的笔记告诉太微如何展示你的写作格式即可\n# 活跃而富有创造力的开发社区在不断开发各种新的展示能力玩儿！\n# 太微社区中有数个语义网爱好者，我们将 SoLiD 之风刮到了太微社区（[[元信息遵循本体]]）\n\n> 太微甚至可以直接打开 Obsidian 的文件夹，如果你用 MD 写笔记，那么 Ob 和 Typora 也能打开太微的文件夹。"},{"title":"太微如何显示界面","created":"20230207160613735","creator":"林一二","modified":"20230207160626233","modifier":"林一二","tags":"太微原理","type":"text/vnd.tiddlywiki","text":"有一些 JS 笔记，含有元信息 `module-type: widget`，它们 exports 上的内容会被加入微件（Widget）注册表，待用。\n\n用户日常写的笔记，进入渲染流程后，会被解析器变成抽象语法 🌲，例如一篇纯纯的文本笔记，通过 `$tw.wiki.parseText('text/vnd.tiddlywiki', input).tree` 会解析出：\n\n```js\n{type: \"text\", text: <string>} // a text node\n```\n\n此后将这颗语法树通过核心 API 转换成 DOM 节点：\n\n```js\nconst newWidgetNode = parentWidget.makeChildWidget(parseTreeNode);\nnewWidgetNode.render(domNode, null);\n```\n\n这个过程中会去查表，找到相应的微件渲染器：\n\n```js\n/*\\\ntitle: $:/core/modules/widgets/text.js\ntype: application/javascript\nmodule-type: widget\n\nText node widget\n\n\\*/\n/*\nInherit from the base widget class\n*/\nTextNodeWidget.prototype = new Widget();\n/*\nRender this widget into the DOM\n*/\nTextNodeWidget.prototype.render = function(parent,nextSibling) {\n  this.parentDomNode = parent;\n  this.computeAttributes();\n  this.execute();\n  var text = this.getAttribute(\"text\",this.parseTreeNode.text || \"\");\n  text = text.replace(/\\r/mg,\"\");\n  var textNode = this.document.createTextNode(text);\n  parent.insertBefore(textNode,nextSibling);\n  this.domNodes.push(textNode);\n};\n```\n\n执行 `render` 方法后，就完成了渲染。在用户改动文本后，会有其他生命周期方法被调用，从而刷新界面。\n\n由于微件渲染器也是个笔记，所以说可以通过插件社区来分发，让用户按需加载。"},{"title":"太微是否过于封闭了？","created":"20230530101609155","creator":"马不前","modified":"20230530153543606","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"刚开始接触太微时，觉得太微可以保存为单独html文件，也就是以后打开太微只需要一个现代的浏览器就可以了。而且在太微里也是通过强大的筛选器和级联机制来实现高度自定义，使得不需要依赖其他第三方库，类似一个操作系统。\n\n但我在使用时越来越感觉到保存为单独html文件这一功能可能会使太微过于封闭。当然我是说从整体上来看，如果一定要调用第三方库也是可以用js调用，或做成插件来实现的。比如林一二使用tldraw包装成白板插件。但不是每个人都能如专业的程序员一样去实现想要的功能。但也不是每一个人都有如此需求。\n\n而我介于两者之间，我既不是专业的程序员，但同时也有其他需求，所以从我个人的角度来看，于是就在思考太微是否过于封闭了？当然如果我有需求，最简单的就是我去学习。而不是等着别人来创造，如果是等着别人来创造，那就不应该有这么多抱怨。\n\n确实如此，但或许不只是如此。因为很多工作流程中需要用到其他平台。比如最简单的，如今多数笔记软件都能结合文档，而太微里则很难处理了。当然这也只能说是太微特性。毕竟其他笔记软件也有不能实现的功能。\n\n我提到封闭是因为在自己的工作流程中，完全依赖太微是不可能够的，不仅要用太记这种发行版，有时还要用像quicker这种效率工具，当然还有其他工具。而在这个结合过程中，就容易感觉到太微很封闭。但不同的人有不同的工作流程，也许他人并没有这样的困境。\n\n感觉越写越混乱，就此搁笔了。\n\n以上内容，只代表[[个人|马不前]]意见。"},{"title":"太微是否太脆了？或debug工具？","created":"20230530103331052","creator":"马不前","modified":"20230530103632276","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"今天在导出所有系统条目时，发现太微直接卡死了，就像之前的嵌入变成死循环一样，无法点击，只能关闭太记，再重新打开太记。这让我想到太微是否太脆了？\n\n我的感觉就像是干脆面一样，但不是说很容易出问题。在前期刚学习的时候容易出问题，后期掌握了也就还好，不那么容易出问题。但另一个方面是，出了问题很难直接修复，只有等更新。所以现在也在等一个debug工具。不过好像已经有这样一个插件了，等林一二介绍看看。"},{"title":"太微与太记的区别","created":"20230402032959791","creator":"林一二","modified":"20230603045649343","modifier":"马不前","tags":"B站直播 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1ko4y1n73b/","text":"!! 太微是开发框架/知识管理操作系统，不是笔记软件\n\n反链、数据库等新笔记软件的高级功能，其实太微从很久以前就有了，太微是目前功能最全的开源知识管理工具开发框架。可以用于以普通人都能用的低代码形式，或让高级Web工程师能完全释放能力的专业化的形式，开发自己想要的知识管理工具。\n\n!! 太微与 Linux 内核类比\n\n* 太微：开发框架，不是用来直接使用的。可以看作刚装机好的操作系统，对标 ReactJS 、 Sqlite 等\n* 太记：基于太微开发的知识管理应用，有各种图论功能，通过预装各种插件实现，对标 Obsidian Notion 等。就像 Android 机买到手预装的软件，可以随时卸载，而且使得大部分人直接上手就能用起来\n\n太微只是个开发框架，不是直接拿来用的笔记应用。想用笔记应用就直接下太记之类的发行版，这是我作为程序员用了几年之后对它的理解。\n\n就像也没有人会直接拿Linux内核来日常使用，都是去安装Ubuntu之类的发行版。但作为程序员就会很喜欢 Linux 这样内核开源的开发框架开发的操作系统。\n\n太记通过中国社区各成员在 [ext[https://github.com/tiddly-gittly]] 里积累的用户侧插件，在太微这个「知识管理系统」上做开发，开发出了很多「知识管理应用」\n\n!! 所以太微的缺点是：它是个本地化的语义网操作系统，一般人玩不转\n\n之所以说它是个「本地化的语义网」，因为它相当于你个人的 SoLiD Web3 知识库（详见：<a >[ext[https://learnsolid.cn/]]</a> ）。\n\n各种插件基于同一套规范能互相配合，而且数据由你自己拥有。你觉得某个插件（应用）不好用可以卸了换成同类的其它插件，之前应用创建的数据依然还在你自己手上，可以被新应用读取。\n\n说它是「Web操作系统」有点夸大了，但的确能运行 Todo、白板画图、日历、大纲、间隔重复（Anki）、Shell 脚本、笔记等应用。\n\n但一般人用的是应用，而不是要去玩转系统编程，所以太微对一般人来说，太复杂了。一般人需要的是<a >太记</a>这样的''笔记软件''。"},{"title":"太微与太记能做什么？不能做什么？","created":"20230829050051542","creator":"马不前","modified":"20230829052739386","modifier":"马不前","tags":"问题以及想法","text":"一般来说，对太微比较感兴趣且有能力去探索的，大部分是从其他笔记软件转过来的。直接接受太微而没有用过其他笔记软件的人比较少。于是很多人就会提问，太微能不能实现某个笔记软件的功能，太记能不能做到？那这个条目就列出一些，太微和太记目前还不能做到的功能。和一些常见的解决方案。\n\n;太微能写大纲笔记吗？\n:可以，但需要借助steams插件。需要自行查看插件文档。\n;太微可以编辑pdf吗？\n:不能，太微只是html文件，无法处理pdf文件。\n;太微可以导入epub图书吗？\n:可以，但需要把epub格式转换成twpub格式。参考[[TW-PUB]]\n;太微支持所见即所得吗？\n:有`$:/plugins/linonetwo/slate-write`插件，但目前还存在许多bug。\n;太微有动态表格吗？\n:有`$:/plugins/kookma/shiraz`插件，需要耐心学习插件文档。\n;太微可以渐近阅读吗？\n:可以，需要使用[[钓鱼插件]]，自行查看插件文档。\n;太微可以制作anki卡片吗？\n:同上，需要使用[[钓鱼插件]]，自行查看插件文档。\n;太微可以编辑markdown吗？\n:可以，需要设置type为text/x-markdown，使用官方插件`$:/plugins/tiddlywiki/markdown`\n;太微可以把markdown转换成tid格式吗？\n:可以，需要使用`$:/plugins/linonetwo/markdown-transformer`\n;太微可以导出条目成markdown吗？\n:可以，需要使用`$:/plugins/cdaven/markdown-export`插件\n;太微可以写思维导图吗？\n:无法直接编辑写，可以用条目组合成思维导图`$:/plugins/ihm/tidgraph`。\n;太微可以制作流程图吗？\n:可以，需要使用`$:/plugins/orange/mermaid-tw5`插件，或`$:/plugins/chanilino/viz`插件。\n"},{"title":"太微原理","created":"20230207151228536","creator":"林一二","modified":"20230603021219794","modifier":"马不前","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"这个条目下的一般是一些涉及到代码的高级操作，简单的操作可以去看[[太微自身的自定义设置]]。"},{"title":"太微中标签的用法","created":"20220124115725662","creator":"林一二","modified":"20220124115834261","modifier":"林一二","tags":"标签","type":"text/vnd.tiddlywiki","text":"太微中标签使用可以大致分为三类：\n\n# 功能类：供todo动态表格、间隔重复、自动化项目归纳使用\n# 知识类：归类知识条目，方便通过主题跳转到同主题其它知识，一次搜索没命中也能跳转找到内容\n# 书签类：就是当文件夹用，自己脑中记得有这几个文件夹，或者展示成目录树，供快速访问。例如给一个条目创建子条目，分拆其内容。"},{"title":"太微中的非线性笔记","created":"20220107013305882","creator":"林一二","modified":"20220108102043937","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"* 非线性：组成部分的简单加和/增长率不是常数；\n* 非线性笔记：随着积累的增加，输出能力增长越来越快，增长率随积累量增长\n** 线性的例子：幻灯片，从头灌输到尾\n** 非线性笔记：访问上的非线性，像开放世界一样可以自由探索，形成[[数字花园|https://www.zhihu.com/question/400660802/answer/1474845176]]\n** 非线性的可视化[[Echarts可视化插件]]\n\n<$echarts $tiddler=\"TheBrain2level.js\"/>"},{"title":"太微自身的自定义设置","created":"20230516133936956","creator":"马不前","modified":"20230603021243142","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"有些太微自身的自定义设置隐藏起来了。这里一般是比较简单的，不是特别复杂。"},{"title":"汤姆·格纳","caption":"Ton Gerner","created":"20230102055945976","creator":"马不前","modified":"20230102060029956","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Ton Gerner\n\n[[github|https://github.com/gernert]]"},{"title":"提供多语言Caption标题","created":"20230623170652168","creator":"林一二","modified":"20230626150248808","modifier":"马不前","tags":"写插件配置页面 翻译内容","text":"在条目的 `caption` 字段里使用[[嵌入]]，嵌入另一个条目\n\n```tw5\ntitle: $:/plugins/linonetwo/tidgi-external-attachments/settings\ntags: $:/tags/ControlPanel/SettingsTab\ncaption: {{$:/plugins/linonetwo/tidgi-external-attachments/settings/settings-caption}}\n```\n\n类似这边我们嵌入了 `$:/plugins/linonetwo/tidgi-external-attachments/settings/settings-caption` 条目。\n\n然后在 `$:/plugins/linonetwo/tidgi-external-attachments/settings/settings-caption` 里[[使用List微件让内容可以切换中英文]]：\n\n```tw5\ntitle: $:/plugins/linonetwo/tidgi-external-attachments/settings/settings-caption\n\n\\whitespace trim\n\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n\t<$list filter=\"[<lang>search[zh]]\">\n\t\t<$transclude tiddler=\"$:/plugins/linonetwo/tidgi-external-attachments/settings/zh-Hans\" field=\"caption\" />\n\t</$list>\n\n\t<$list filter=\"[<lang>!search[zh]]\">\n\t\t<$transclude tiddler=\"$:/plugins/linonetwo/tidgi-external-attachments/settings/en-GB\" field=\"caption\" />\n\t</$list>\n</$list>\n```\n\n注意这边\n\n# 最好使用 `\\whitespace trim` 这个[ext[Pragma|https://tiddlywiki.com/#Pragma]]来去掉空格\n# 并使用 `<$transclude>` 微件来形成 inline 的 HTML 结构\n# 在 `<$list>` 微件和 `<$transclude>` 微件之间也只换一次行，不要多余换行。不然可能会让产生出来的标签页变得很粗大，和设置页面里别的标签页不像。"},{"title":"提供自动化聚合整理的能力，让你从更抽象的角度上整理笔记，而不用亲手整理","created":"20220108032923511","creator":"林一二","modified":"20220618042939604","modifier":"林一二","tags":"科普幻灯片 自动化","type":"text/vnd.tiddlywiki","text":"* 通过[[筛选器]]告诉太微你想怎么整理笔记，它会在有新条目出现时自动更新整理结果\n** 为一个总集制作封面/文件夹条目 （例子：[[太微背景介绍]]，原理详见[[在列表微件中使用筛选器]]）\n** 根据元信息（优先级、所处领域、所处领域的优先级、上次关注时间）对笔记网络中散落的任务进行聚合和排序\n* 通过[[钓鱼插件]]调度系统提醒你整理笔记，而不是让你靠自己的意志力来定期整理、也让你不用靠大脑来记住哪些内容待整理\n** 提醒自己读待读的剪藏、提醒自己将剪藏文章拆分成更细的卡片\n** 在多任务并行时，以天为单位提醒自己关注许久没关注的任务，避免小任务饿死\n** 定期提醒给女朋友送礼物"},{"title":"添加图片","created":"20231013042630636","creator":"林一二","modified":"20231013042959525","modifier":"林一二","tags":"基础知识","text":"!! 编辑模式\n\n打开太微条目默认的编辑模式后，直接把图片拖入编辑区域即可。\n\n# 图片引用会添加到光标所在的位置\n# 图片会被导入为单独的条目\n\n!! 导入\n\n将图片拖到非编辑器区域，可以像导入其它文件一样导入图片。\n\n!! 黏贴\n\n复制了图片后，可以直接黏贴。\n\n!! 图片名\n\n拖入的图片，会使用图片的文件名。\n\n黏贴的图片，没有默认文件名，需要在导入对话框上修改，如果不修改可能会覆盖同名的旧文件。"},{"title":"添加css样式","created":"20220317043939380","creator":"林一二","modified":"20220527052936658","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"有三种办法修改样式\n\n!! 安装新的主题插件\n\n这是最适合新手入门的方式，刚入门的同学没必要去学习 CSS 等高级知识，只需要安装主题插件即可，等遇到问题了再去深入学习。\n\n不过 CSS 是一个通用技能，和 Python 一样，都是学了到处都可以使用的好知识，学了不吃亏不上当。国际官方学习地址：[[MDN-CSS — 设计 Web|https://developer.mozilla.org/zh-CN/docs/Learn/CSS]]\n\n!! 添加局部样式\n\n详见[[中文文档-样式及 CSS 类别|https://bramchen.github.io/tw5-docs/zh-Hans/#Styles%20and%20Classes%20in%20WikiText]]，来使用 `@@` 这种[[区块解析器|https://bramchen.github.io/tw5-docs/zh-Hans/#Block%20Mode%20WikiText]]。\n\n参考[[http://listtree.tiddlyspot.com/]]，用 `@@.list-tree` 的语法，给 `@@` 包住的列表加上了自定义的 css 样式，让列表变成了树形图。\n\n```\n@@.list-tree\n*Parent 1\n*Parent 2\n**Child 1\n*[[Parent 3]] (incidentally a link)\n@@\n```\n\n!! 修改全局样式\n\n参考[[使用样式表|https://bramchen.github.io/tw5-docs/zh-Hans/#Using%20Stylesheets]]，设条目标签为 `$:/tags/Stylesheet`，在里面写的 CSS 就会自动应用到全局样式上，并覆盖别的 css 了。\n\n如果发现由于[[CSS优先级|https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity]]问题难以覆盖，可以使用[[!important 例外规则|https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#!important_%E4%BE%8B%E5%A4%96%E8%A7%84%E5%88%99]]强行覆盖。\n\n要查找自己的修改有哪些问题，可以参考[[调试样式表|https://bramchen.github.io/tw5-docs/zh-Hans/#Debugging%20Stylesheets]]。\n\n!!! 如何把 CSS 应用到界面上自己想修改的地方\n\n<<reuse-tiddler \"使用开发者工具查看CSS\">>"},{"title":"条件语法","created":"20230623161039377","creator":"林一二","modified":"20230623161236077","modifier":"林一二","tags":"基础知识","text":"使用 List 微件可以实现条件判断，类似编程语言里的「If」语句。可以实现[[使用List微件让内容可以切换中英文]]等效果。\n\n例如下面例子里，我们使用了 List [[微件]]，然后在它的 filter 字段里，使用筛选器做了个判断。判断结果成立时，在 `<$list> </$list>` 之间包裹的内容就会展示出来。\n\n```tw5\n<$list filter=\"[<currentTiddler>tag[所需的标签]]\">\n\n\t带有所需标签\n\n</$list>\n```"},{"title":"条目","created":"20211008051035252","creator":"林一二","modified":"20211008051311547","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"Tiddler 是官方对于 TiddlyWiki 里一个笔记卡片的称呼，在中文教程里，我们将其称为「条目」，这是因为：\n\n* Tiddler 不仅有「微小的东西」的意思，也主要是指「很小的一条鱼」，所以正好叫「条」目\n* 维基里的一个页面一般就叫「维基条目」"},{"title":"条目环路与迷宫","created":"20230426101604920","creator":"WhiteFall","modified":"20230429113522073","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"新的阅读与写作（组织）方式是否从压缩时间的角度来看呢？保证在理解正确与完整（或部分完整）的基础上压缩时间 ？这种设想的方式还要避免“迷宫”的存在。因为很容易在条目之间形成环路。一个环还好，多个环，就成了迷宫。\n\n对于读者来说：条目回环跳跃对阅读来说是一场灾难，非常浪费时间，效率不如原有的书籍组织方式。虽然博尔赫斯的小说很有意思，采用了不同以往的非线性写作，但由于书籍的性质，无论如何阅读，最终都可以读到书本的结束。但条目的跳跃变成迷宫后则无法到达最终的出口条目。而且会产生大量的非主动性重复阅读。\n\n对于希望重复阅读来说，这是好的，对于作者来说有时候这种混乱反而是一种乐趣。但是，通常我们更希望在灵感或耐心消失之前快速找到预期的资料，这时，重复无可避免且非常浪费时间。\n\n条目环路可以通过其他方式弥补，设想的一种方式是全局地图。这样或许就不会迷路了。其他的方式还有等待探索，欢迎你，冒险家！总得来看，新的组织方式面临很多问题等待解决或规避但同时也有很好的前景等待人们探索和发现。\n\n----\nidea：条目很灵活，有很多组织方式。怎么用都可以，开心就好。\n\nidea：哪条路径走过都能标记，不会迷路。"},{"title":"条目命名规范","created":"20220215123128189","creator":"林一二","modified":"20220215124115214","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"太微中条目的功能只与其加的标签有关，与其标题写了什么无关。例如你想创建新的[[文本片段]]，只需要带上相应标签即可。但你可能会发现有的插件里[[分发|插件可以包含的内容]]的文本片段条目是以 `$:/` 开头的，看起来像是系统条目，插件作者为什么要这样取名呢？\n\n这是因为我们尽量遵循一定的命名规范，让用户更好搜到所需的条目、批量操作时更好操作。\n\n系统条目的命名规范详见[[中文文档-系统条目的命名|https://bramchen.github.io/tw5-docs/zh-Hans/#Naming%20of%20System%20Tiddlers]]\n\n!! 系统条目为核心的一部分，其命名规则如下:\n\n|!命名空间 |!格式 |!描述 |\n|`$:/*` |~CamelCase |根用户接口条目 (例如控制台、 高端搜索) |\n|`$:/config/*` |~CamelCase |用户导向的配置设置 |\n|`$:/core/images/*` |hyphen-case |核心图像 |\n|`$:/core/modules/*` |lowercase |JavaScript 模块条目 |\n|`$:/core/save/*` |lowercase |用于创建 TiddlyWiki 文件的保存范本 |\n|`$:/core/templates/*` |//inconsistent// |TiddlyWiki 操作所需的范本。目前使用短划线和句号的组合隔开单词 |\n|`$:/core/ui/*` |//inconsistent// |组成 TiddlyWiki 缺省用户接口的条目。目前使用混合驼峰式和小写的命名约定 |\n|`$:/core/wiki/*` |lowercase |关于整个维基的中继数据 |\n|`$:/docs/*` |lowercase |文档条目 |\n|`$:/messages/*` |~CamelCase |系统消息 |\n|`$:/plugins/*` |lowercase |插件条目，与插件内容 |\n|`$:/snippets/*` |//inconsistent// |可重用的片段 (将由宏替换) |\n|`$:/state/*` |lowercase |用户接口状态条目 |\n|`$:/tags/*` |~CamelCase |用户接口配置标签|\n|`$:/temp/*` |lowercase |不应被保存的临时条目 |\n|`$:/themes/*` |lowercase |布景主题插件 |\n\n「格式」这一列的意思：\n\n* ''hyphen-case'' 指的是以连字号连接多个小写单字 （ hyphen就是连字符 - ）\n* ''~CamelCase'' 指的是直接连接多个首字母大写的小写单字 （ Camel 是骆驼，此处表示驼峰起伏的意思）\n* ''lowercase'' 指的是直接连接多个小写单字\n* ''inconsistent'' 标志目前不一致的命名空间，可以随便用\n\n!! 插件里如何命名\n\n插件里的文件，一般都以 $:/ 开头，以表明它们类似于系统条目，不建议直接修改。\n\n但如果你想通过插件分发文本片段，那么还是建议将你分发的文本片段以 `$:/snippets/` 开头，而不是以 `$:/plugins/snippets/*` 等方式开头。分发其它内容时也类似。"},{"title":"通过自定义的WidGet微件调用JS模块","created":"20230512123031005","creator":"WhiteFall","modified":"20230901023443551","modifier":"WhiteFall","tags":"Wiki编程的定义","type":"text/vnd.tiddlywiki","text":"\n可以通过定义宏调用WidGet小工具，小工具在调用JS模块，然后button触发小工具设置actions触发活动调用定义的宏。\n\n其他的[[触发小工具|https://bramchen.github.io/tw5-docs/zh-Hans/#TriggeringWidgets]]；\n\n* 触发小工具 => 宏 => 自定义的调用小工具 => JS模块\n* 自定义的调用小工具 => JS模块\n\n```wikitext\n<$button actions=<<macro—name>>></$button>\n```\n\n```\n\\define macro—name()\n<$nameWidget paramater=\"\"/>\n\\end\n```\n\n```js\n/*\\\ntitle: $:/plugins/作者/名称.js\ntype: application/javascript\nmodule-type: widget\n\n小工具描述\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar nameWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\nnameWidget.prototype = new Widget();\nexports.nameWidget = nameWidget;\n\n})();\n```\n\n```js\n/*\\\ntitle: $:/plugins/作者/名称.js\ntype: application/javascript\nmodule-type: library\n\njs模块描述\n\n\\*/\n\nexports.js_module_name = name {\n// js模块\nbar:\"\",\ndata: [],\nfoo: function () {},\nfoo: function () {},\n};\n```"},{"title":"通过GithubPages部署博客时去掉部分插件的方法","created":"20230331081004962","creator":"林一二","modified":"20230402020017987","modifier":"马不前","tags":"B站直播 任务 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1FX4y1k7Rv/","text":"[[qq频道里的分享|https://qun.qq.com/qqweb/qunpro/share?_wv=3&_wwv=128&appChannel=share&inviteCode=1ZBIwh3BfSf&contentID=1jyJDo&businessType=2&from=181174&shareSource=5&biz=ka]]\n\n方法是改构建脚本，加上这个构建方案 \n\n```json\n\"readonlyexternalimages\": [\n      \"--setfield\",\n      \"[is[binary]] [type[application/msword]]\",\n      \"_canonical_uri\",\n      \"$:/core/templates/canonical-uri-external-image\",\n      \"text/plain\",\n      \"--setfield\",\n      \"[is[binary]] [type[application/msword]] [type[application/pdf]] [[$:/plugins/tiddlywiki/filesystem]] [[$:/plugins/tiddlywiki/tiddlyweb]] [[$:/plugins/twcloud/tiddlyweb-sse]] [[$:/plugins/linonetwo/source-control-management]] [[$:/plugins/linonetwo/super-tag]] [[$:/plugins/linonetwo/flow-chart]] [[$:/plugins/linonetwo/slate-write]] [[$:/plugins/linonetwo/smart-field]] [[$:/plugins/linonetwo/markdown-transformer]] [[$:/plugins/gt6796c/mermaid-tw5]] [[$:/plugins/linonetwo/tw-mobile-sync]] [[$:/plugins/linonetwo/zx-script]] [[$:/plugins/tiddlywiki/highlight]] [prefix[$:/plugins/tiddlywiki/codemirror]] [[$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced]] [[$:/plugins/flibbles/relink]] [[$:/plugins/kookma/commander]] [[$:/plugins/kookma/section]] [[$:/plugins/linonetwo/calendar]] [[$:/plugins/linonetwo/pinyin-fuzzy-search]]\",\n      \"text\",\n      \"\",\n      \"text/plain\",]\n```\n\n \n 注意这里面通过筛选器选中要`--setfield``\"text\",\"\",``\"text/plain\",`的内容，把它们置为空字符，就相当于在发布博客时删掉了插件。 \n \n然后记得把`scripts/build-wiki.js`里面的`externalimages`改为用刚刚加上的 `readonlyexternalimages：` \n从旧的 \n\n```\nscripts/build-wiki.js   execAndLog(`tiddlywiki ${repoFolder} --build externalimages`, { cwd: repoFolder });   \n```\n \n改为 \n\n```\n  execAndLog(`tiddlywiki ${repoFolder} --build readonlyexternalimages`, { cwd: repoFolder });\n```\n\n"},{"title":"同时添加当前条目 和特定内容 作为标签","created":"20230630153604644","creator":"马不前","modified":"20230630154235236","modifier":"马不前","tags":"高级知识","text":"一般来说，添加当前条目就直接使用currenttiddler，添加特定内容作为标签，也非常简单。但复杂的是既要添加当前条目，也要添加特定内容作为标签。本来也不是特别复杂，但有一个问题，就是标题可能会有空格，那么很有可能会处理成三个或以上更多的标签。但官方添加子条目则没有这个问题。于是我就去找官方的写法，官方写得很简单也非常值得学习。\n\n```\n<$button>\n   <$set name=\"tags\" filter=\"[<currentTiddler>] [enlist[xxx]]\">\n   <$action-createtiddler $message=\"tm-new-tiddler\" tags=<<tags>>>\n    <$action-sendmessage $message=\"tm-edit-tiddler\" $param=<<createTiddler-title>>/>\n    </$action-createtiddler>\n    xxx\n    </$set>\n  </$button>\n```\n\n<$button>\n   <$set name=\"tags\" filter=\"[<currentTiddler>] [enlist[xxx]]\">\n   <$action-createtiddler $message=\"tm-new-tiddler\" tags=<<tags>> >\n    <$action-sendmessage $message=\"tm-edit-tiddler\" $param=<<createTiddler-title>>/>\n    </$action-createtiddler>\n    xxx\n    </$set>\n  </$button>\n\n点击上面的按钮就可以看到效果了。本条目为实现上面效果特意在标题中增加了空格。"},{"title":"图谱可视化","created":"20221223031726747","creator":"林一二","modified":"20221223032116723","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"!! Echarts\n\n[[Echarts可视化插件]]适合用筛选器高性能地画大范围的图谱。\n\n!! TW-Map\n\nTiddlywiki Map 适合用筛选器自动画比较小范围的图，它性能一般，图大了容易卡，但好处是图谱上的功能比 Echarts 多一些，也容易配置。\n\n它也提供了手动摆放节点的功能。\n\n!! Whiteboard\n\nTW-Whiteboard 白板插件适合手动画小范围的图，可以写字画画，全部是手动摆放，摆放自由度最高，但没法用筛选器自动作图。"},{"title":"图形表格","created":"20230101080951202","creator":"马不前","modified":"20230617090551415","modifier":"WhiteFall","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"* ❤️动态表格：[[tiddlytables|http://tiddlytables.tiddlyspot.com/]]\n* ❤️自动补全表格：Editor Autolist\n* 表格[[table-dynamic|https://ooktech.com/jed/ExampleWikis/DynamicTables/]]\n* ❤️（初学者工具包）[[Shiraz|https://kookma.github.io/TW-Shiraz/]] 太微整个笔记就是个互相关联的数据库，可以用 shiraz 插件里的 dynamic table 宏来可视化成多维表\n* 数据可视化插件：[[Echarts|https://tiddly-gittly.github.io/tw-echarts/]] TheBrain视图的必要插件。封装Echarts Javascript 图表库，支持各种图表。\n* ❤️[[TiddlyMap|http://tiddlymap.org/]]这里指向的演示网址，但不要在这里安装，因为版本很旧，没有更新。直接通过cpl安装就可以。\n* ❤️Graphviz plugin for tw5：图形描述语言，绘制结构化的图形网络，制作图表 （链接跳转语法：定理[URL=\"#定理\"]  ）\n** [[code|https://github.com/chanilino/tw5viz]]\n** [[demo|https://chanilino.github.io/tw5viz/tw5.html]]\n* tiddlywiki/railroad   铁路图插件\n* 图表绘制插件：[[mermaid-tw5|https://efurlanm.github.io/mermaid-tw5#HelloThere]] 支持绘制流程图、状态图、时序图、甘特图等等。\n* 时间线[[TW-Timelines|https://kookma.github.io/TW-Timelines/]]\n* 可缩放的时间轴：kixam/timeline\n* ❤️轻量级的条目思维导图：[[TidGraph|http://ihm4u.github.io/tw5plugs/#]]\n* 待办事项与GTD插件：[[projectify|https://thaddeusjiang.github.io/Projectify/]]\n* 从剪贴板导入时重命名图片 wikilabs/bundler：[[讨论链接|https://talk.tiddlywiki.org/t/changing-image-png-for-importing-images/2698/26]]"},{"created":"20230102065731602","creator":"马不前","text":"! Tobi Beer \n\n[[github|https://github.com/tobibeer]]","tags":"Tiddlywiki贡献者","title":"托比·比尔","modified":"20230102065813157","modifier":"马不前","type":"text/vnd.tiddlywiki","caption":"Tobi Beer "},{"title":"拖动资源","created":"20211016093135798","creator":"林一二","modified":"20211016094630852","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"* 把图片拖进编辑模式的条目里：将图片放入Wiki，并在编辑器里添加对图片的引用\n* 把别人Wiki里的条目链接、标签链接拖入自己的Wiki：复制对方的条目到自己的Wiki里\n\n拖完之后要确认导入。"},{"title":"拖入别的Wiki里的插件","created":"20211016093103250","creator":"林一二","modified":"20211016093325679","modifier":"林一二","tags":"安装插件","type":"text/vnd.tiddlywiki","text":"打开别的wiki里的插件列表，然后把那个插件的标题拖进自己的 Wiki 即可，参考[[拖动资源]]，因为插件也就只是条目的合集而已，所以也可以这样拖进来。"},{"title":"完成次数按钮","counts":"3","created":"20230630165813084","creator":"马不前","modified":"20230630170819146","modifier":"马不前","tags":"高级知识 自动化","text":"现在的需求是要做一个按钮，点击不断添加1或者指定数值。并修改字段内容。\n\n```\n<$button>\n<$action-listops $field=\"counts\" $filter=\"[{!!counts}add{COUNTS}]\"/>\n完成次数\n<span>\n{{!!counts}}\n</span>\n</$button>\n```\n\n上面的代码就会生成一个按钮，点击就会使用action-listops小工具。对应的字段是counts，在counts的基础上添加COUNTS里text的值，一般是数字。这样就可以添加并显示了。如果需要样式的话，可以借助设拉子插件。未指定条目就默认是当前条目，如果需要修改其他条目的某个数值，可以指定条目。\n\n```\n<$button class=\"btn btn-primary\">\n<$action-listops $field=\"counts\" $filter=\"[{!!counts}add{COUNTS}]\"/>\n完成次数\n<span class=\"badge badge-light\">\n{{!!counts}}\n</span>\n</$button>\n```\n\n<$button class=\"btn btn-warning\">\n<$action-listops $field=\"counts\" $filter=\"[{!!counts}add{COUNTS}]\"/>\n完成次数\n<span class=\"badge badge-light\">\n{{!!counts}}\n</span>\n</$button>\n\n不知道为什么样式无法完整显示出来，待排查。"},{"title":"微件","created":"20220108051857931","creator":"林一二","modified":"20230603030542279","modifier":"马不前","tags":"基础知识 入门幻灯片 高级知识","type":"text/vnd.tiddlywiki","text":"微件（Widget，也译为小工具）是页面渲染的基本组成部分，页面上的列表、标题、链接就是由列表微件、标题微件、链接微件组成的，详见[[官方介绍-小工具|http://tw5-zh-hans.tiddlyspot.com/#Widgets]]。\n\n你可能会感到奇怪，你输入的明明只是 `* !! [[]]` 这样的维基语法，为什么就成了微件呢？这是靠太微核心部分基于编译原理的部分来转换的了。\n\n除了用维基语法创造出微件，你也可以直接使用微件，例如 `<$list filter=\"[tag[基础知识]sort[title]]\"/>`：\n\n<$list filter=\"[tag[基础知识]sort[title]]\"/>\n\n如果想让结果不挤在一起，就加上 div 标签，或者 `<li><$text text=<<currentTiddler>>/></li>` 标签\n\n```html\n<$list filter=\"[tag[基础知识]sort[title]]\">\n\t<div><$text text=<<currentTiddler>>/></div>\n</$list>\n```\n\n<$list filter=\"[tag[基础知识]sort[title]]\"><div><$text text=<<currentTiddler>>/></div></$list>\n\n<$list filter=\"[tag[基础知识]sort[title]]\"><li><$text text=<<currentTiddler>>/></li></$list>\n\n<$macrocall $name=\"alert\" type=\"primary\" src=\"同筛选器一样，微件也是一定要掌握的，但后续同样有更高级的用法需要放到高级知识里去介绍。\" class=\"bg-transparent\"/>"},{"title":"微件 wikify 用法示例","created":"20231013022846023","creator":"WhiteFall","modified":"20231013024141235","modifier":"WhiteFall","tags":"高级知识 Wiki编程的定义","text":"```html\n<$let target-text={{条件语法!!text}} Snapshot-tiddler=\"Snapshot/条件语法\" >\n\n\t<$wikify text=<<target-text>> name=\"compiled\" output=\"html\">\n\t\t<$button tooltip=\"Create\" message=\"tm-copy-to-clipboard\" param=<<compiled>> >\n\t\t\t<$action-setfield $tiddler=<<Snapshot-tiddler>> $field=\"text\" $value=<<compiled>> />\n\t\t\tCreate\n\t\t</$button>\n\t\t<$button tooltip=\"Delete\">\n\t\t\t<$action-deletetiddler $tiddler=<<Snapshot-tiddler>> />\n\t\t\t<$action-sendmessage $message=\"tm-close-tiddler\" $param=<<Snapshot-tiddler>> />\n\t\t\tDelete\n\t\t</$button>\n\t</$wikify>\n\n\t<$tiddler tiddler=<<Snapshot-tiddler>>>\n\t\t<div style=\"border: 1px solid gray; border-style: dotted; padding: 0px 5px 0px 5px;\">\n\t\t\t<$transclude />\n\t\t</div>\n\t</$tiddler>\n</$let>\n```\n\n<$let target-text={{条件语法!!text}} Snapshot-tiddler=\"Snapshot/条件语法\" >\n\n\t<$wikify text=<<target-text>> name=\"compiled\" output=\"html\">\n\t\t<$button tooltip=\"Create\" message=\"tm-copy-to-clipboard\" param=<<compiled>> >\n\t\t\t<$action-setfield $tiddler=<<Snapshot-tiddler>> $field=\"text\" $value=<<compiled>> />\n\t\t\tCreate\n\t\t</$button>\n\t\t<$button tooltip=\"Delete\">\n\t\t\t<$action-deletetiddler $tiddler=<<Snapshot-tiddler>> />\n\t\t\t<$action-sendmessage $message=\"tm-close-tiddler\" $param=<<Snapshot-tiddler>> />\n\t\t\tDelete\n\t\t</$button>\n\t</$wikify>\n\n\t<$tiddler tiddler=<<Snapshot-tiddler>>>\n\t\t<div style=\"border: 1px solid gray; border-style: dotted; padding: 0px 5px 0px 5px;\">\n\t\t\t<$transclude />\n\t\t</div>\n\t</$tiddler>\n</$let>"},{"title":"微件和筛选器入门","created":"20220108051817547","creator":"林一二","modified":"20220108055744713","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"[[微件]]和[[筛选器]]常常配合在一起使用，构建动态的视图。\n\n我们可以从[[用kin-filter搜索当前文件夹树里的文件（展示为列表）]]中看出筛选器，尤其是[[Kin-Filter|$:/plugins/bimlas/kin-filter]]这类图论筛选器的威力。\n\n[img[$:/plugins/bimlas/kin-filter/README/concept.svg]]"},{"title":"为什么叫「太微」","created":"20230207151003011","creator":"林一二","modified":"20230207151025226","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"「太微」是我和朋友们运营的 TiddlyWiki 中国社区给它起的音译中文名。太微是一个 JS 的知识管理产品开发框架，也指基于这个框架制作出来的单页面应用，可以从 https://tiddlywiki.com 下载到单个 HTML，双击执行后就是一个本地化的笔记应用。\n\n之所以「太」是因为它主打的是便携和功能全面，像 Wiki 应用该有的双向链接、嵌入（Transclusion）、微件（Widget）、筛选器它都有。它里面的笔记可以包含代码并被框架执行，从而通过添加新笔记来给应用增加功能，是一种类似文式编程的插件化架构。笔记的集合可以被打包成插件，在插件市场分发，从而为应用接入白板、日历、看板、富文本编辑器等功能。\n\n之所以「微」是因为里面的每个笔记被称为「条目」（Tiddler，小鱼），不鼓励写一些很长的条目，最好拆分成很多足够小，像函数一样能复用的笔记。"},{"title":"文本片段","created":"20220108030605703","creator":"林一二","modified":"20220108032402577","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"文本片段（Snippet）是复用内容的方法之一。我们知道可以用[[嵌入]]来引入其它条目的内容，但是这样两个条目就会单向绑定在一起，不方便编辑源条目的内容，而且没法仅在嵌入的地方做微调修改；而文本片段则让我们可以一键将源条目内容复制过来，之后就可以在新条目的编辑器里随意修改，而且不受源条目影响了。\n\n!! 添加新文本片段的方法\n\n# 打开编辑器，点击图章按钮stamp ({{$:/core/images/stamp}})\n# 在打开的下拉列表里点击「添加您自己的」\n# 这会创建一个带 `$:/tags/TextEditor/Snippet` 标签的条目，里面的内容以后就会出现在图章的下拉列表里了\n# 在编辑器里打 `/` 也会唤出这些文本片段，并可以搜索取用"},{"title":"文本拼接","created":"20230107093158967","creator":"林一二","modified":"20230603030928791","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"文本拼接在太微里一般是通过筛选器和各种小微件来实现，本身挺复杂，就不放在基础知识里了。"},{"title":"文本群写作与平面写作","created":"20230328092016154","creator":"WhiteFall","modified":"20230430123412030","modifier":"马不前","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"!! 文本群写作\n\n从外部因素理解是指我们经常在写论文的时候会列出一大堆的参考文献。但实际上是，我们先使用参考文献里的内容，后面为了方便他人查看，才列出来了。也就是说，我们需要依赖其中的部分内容来完成我们的写作。这是非常普遍的情况。随便翻开一本学术书籍，特别是人文社科的，基本上有十来页甚至几十页在列出参考文献。也就是说，离开了这些文本，学术书籍里的写作是很难实现的。换言之，我们自身的写作，也是在依据一定的文本群的。当然我们可能并没有列出来，而只存在于大脑里，但实际上这些文本群是存在的。\n\n从内部因素去理解则是，人文社科里的学术研究非常讲究用文本细读的方式去读文章。因为一方面需要参考当时的时代背景，历史因素，作者的个人思考。另一方面也需要从历史的后面往前看，看当时的接受以及后来的接受情况。一个比较典型的是陶潜的文坛地位是在宋朝才真正确立的。这种情况非常很多，也很复杂，同样需要大量的文本去考评和梳理。再一方面，对于里面的思想，又需要结合其他人的思想来看比较分析。也就是说，分别对应时代背景，接受史，以及纵横分析这三方面的内容。当然这只是简单概括，实际操作起来非常复杂。但有一点毫无疑问，那就是涉及的文本会大幅增加，不会减少。只会越来越多。这就是为什么会出现上面的文本群写作的缘故。\n\n不管是使用电子笔记，还是说手写笔记，都是这种情况。以前没有电子不能复制的学者是如何做的呢？很简单，就是手动去抄。抄当然也有抄的乐趣，也能更深层次学到一些内容，但我以为这是毫无必要的一件事。没必要抄，而且也抄不过来。一旦数量上来了，就是呈几何式增长的，根本不可能抄完。当然少部分如钱钟书等抄几麻袋的，另说。也就是在这种情况下，才会推荐用tiddlywiki的形式去实践文本群写作。\n\n而使用tiddlywiki比其他obsidian等编辑软件的好处还在于，tiddlywiki的条目可以概念化表达。因为只有在概念化了，才能做到复用。而obsidian虽然也是电子的，也可以进行双链，但本质上并不十分注重概念化表达和复用。其结果就往往还是一篇文章的形式。没有tiddlywiki这种短小精悍，概念鲜明。当然要做到这一点也十分不容易。这一点就靠自己去体会了。\n\n!! 非线性写作与平面写作\n\n非线性写作是太微主要的宣传语，之前我也很喜欢这个概念，我不需要写目录一样的内容，或者长文，而是以更为丰富多样的形式写作。\n\n但现在我觉得这种术语还不能完全表达我心中的想法。因为非线性某种程度上还是可以被还原成线性的，也就是目录的形式。或者说非线性还是线性写作的某种延伸，但这是一种无奈的延伸。非线性写作对应的是一些只支持链接，或者反向链接的笔记软件。\n\n平面写作意味着我们抛弃了原来的线性写作，那种目录式的写作。但也不是//非线性写作//。而是在一个平面里写作。也就是我们需要借助其他条目的内容，（比如反链，比如标签，比如嵌入，或者其他内容）就像借助地图里的其他内容我们才能看到了解到当前的语义背景一样。\n\n平面写作可以从[[块茎思维]]的第四点引申出来。"},{"title":"文学编程与TiddlyWiki","created":"20230602140440631","creator":"马不前","modified":"20230901071924195","modifier":"WhiteFall","tags":"编程知识类","type":"text/vnd.tiddlywiki","text":"TiddlyWiki像是一种编程与写作的工具，更是一种“开发框架/知识管理操作系统”。\n\n> 1983年，Donald Knuth提出了一种新的编程范型，称为“文学编程”。他说文学编程是“一种将编程语言与文档语言相结合的方法，从而使编写的程序比只用高级语言编写的程序更强大、更便捷、更易维护，而且可以说更有趣。主要思想是把程序当作文学作品，用人的语言而不是计算机的”。\n\n即经过编程后的文学或笔记作品。因为TiddlyWiki是以写作为目标的工具，而不是编程为目标的工具，所以编程文学这个词可能比较合适。此外Jupyter notebook使用MD和anyCode编写文档和代码完成编程目标，而TiddlyWiki使用[[WikiText写作|WikiText笔记与写作（进一步的可能）]]和[[Wiki编程|Wiki编程的定义]]组织和编写文档完成写作目标。\n\n!! 早期：Donald Knuth 在 1984 带来 Literate Programming 的概念\n\nLeo Editor 等编辑器忠实还原了这个体验，将任意业务代码和注释、文档混写在一起，并执行代码部分、将文档部分变成文档站。\n\n更现代的[[nbdev|https://github.com/fastai/nbdev/]]实现这一编程范式的方式则更为我们所熟悉一些，它长得就像「Jupyter notebook」：\n\n!! 科学计算和数据科学：Mathematica 在 1988 年引入了笔记本界面\n\n更广为人知人用的是 IPython → IPython Notebook → Jupyter notebook → Jupyter Lab ，自从 2014 年 Fernando Pérez and Brian Granger 从 IPython 中建立起 IPython Notebook，越来越多的人爱上了这种混合代码和文档的写作方式。\n\n这类笔记本应用通过缓存之前步骤结果，允许从程序逻辑中的断点处出发尝试新的方案，笔记本让使用者能更快地进行树状的实验迭代。这种编程/实验方式称为「探索式编程」（exploratory programming）。\n\n在实验上的优势使得 Jupyter 笔记本应用在过去的一个年代里有了爆发性的增长。\n\n!! 互动演示：MDX 和 Tid\n\n[[MDX|https://mdxjs.com/]] 允许作者在 Markdown 文本里嵌入 JSX 组件，从而使用 HTML custom element、ReactJS、VueJS 等任意使用 JSX 描述的组件。MDX 是组件化时代的新型 Markdown。\n\n[[Tid|https://zhuanlan.zhihu.com/p/140473235]] 需要在太微中使用，允许用户在文本中插入通过插件定义的互动组件，并允许执行嵌入文档中的代码。\n\n这类系统还有很多，它们都允许文档中含有可执行的部分。\n如果将文式编程的定义退化到「放入非文本的可执行的微件就算文式编程」，那么 Notion 和 Coda 或许也算文式编程。不过 MDX 和 Tid 是基于文本而非 JSON 的，用户可以查看和理解其中的代码部分并在文本编辑器里做微调修改，更多地保留了文式编程的编写方式吧。\n\n!! 为什么传统的文式编程消失，新的文式编程不断简化\n\n其实用宏和JSDoc就能基本替代传统的文式编程了：\n\n# 宏允许我们在编译期复用代码，类似文式编程中的嵌入Transclusion\n# JSDoc可以在代码里写 Markdown，类似于文式编程里的代码笔记混写。\n\n而简化后的代码和文档混写的笔记本应用能与 IDE 分庭抗礼，甚至[[内置到VSCode中与代码模式共存|https://code.visualstudio.com/blogs/2021/11/08/custom-notebooks]]，是因为其断点续播的特性很适合实验阶段。工程阶段大家还是会继续使用 IDE，让笔记本和编程环境占有不同的两个生态位。\n\n* 转自[[林一二的wiki|https://onetwo.ren/wiki/#:%E6%96%87%E5%BC%8F%E7%BC%96%E7%A8%8B]]\n* 也可访问[[知乎版|https://www.zhihu.com/question/26978956/answer/2349585817]]\n* [[literate programming维基链接（英文）|https://en.wikipedia.org/wiki/Literate_programming]]\n\n我对这一概念的理解是，代码更容易写成一长串的内容，不加以区分，可以像读书一样，而不是听人讲话那种断断续续的，但维护起来不太容易。"},{"title":"问题以及想法","created":"20230525131243578","creator":"马不前","modified":"20230603022354732","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"开一个新栏目。把一些讨论时提到的问题，但又暂时无法解决，或者没有精力去解决的问题。记录下来。虽然大部分的时候可能记录到了issue里，但也同步记录过来，是为了方便不怎么看issue的人。\n\n但同时也可以记录下来一些有意思的想法。多数时候想法也会被记录在issue里<<fnote \"林一二就有这习惯\">>，但更多的时候可以公开出来，也许某一天就实现了呢。\n\n我把这栏目从排查问题放到欢迎来到太微这一层级下，相当于独立出来了。因为我发现太微要改进的地方还不少。但这些要改进的可能都涉及到太微的底层设计，所以与其期望在太微里实现，不如展望未来，看能不能在新出的笔记软件里实现，或者自己造。当然自己造还是不太现实，但太微过于封闭了，这可能是未来要平衡的一个地方。<<fnote \"完了，这些内容好像已经变成了我对太微的吐槽了，不过太微的槽点确实也不少。\">>\n\n当然里面不少内容也是群里经常讨论的。"},{"title":"西蒙·贝尔德","caption":"Simon Baird","created":"20230102065135938","creator":"马不前","modified":"20230102065220366","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Simon Baird\n\n[[github|https://github.com/simonbaird]]"},{"title":"霞鹜文楷","text":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/lxgw-wenkai-lite-webfont@1.1.0/style.css\" />","type":"text/html","code-body":"yes","created":"20230601122431844","creator":"马不前","modified":"20230601130350118","modifier":"马不前","tags":"$:/tags/RawMarkup $:/tags/Stylesheet"},{"title":"显示行号、高亮当前行、设置编辑区高度","created":"20220815045958298","creator":"Miao","modified":"20230516132300614","modifier":"马不前","tags":"主题集 自定义样式修改类","type":"text/vnd.tiddlywiki","text":"安装官方的codemirror\n\n控制面板 -设置 -CodeMirror，找到这两个选项启用他们\n\n* Enable line numbers：设置打开显示行号\n* Highlight active line：设置高亮活动行\n\n\n\n编辑区高度，编辑这个条目：\n$:/plugins/tiddlywiki/codemirror/lib/codemirror.css\n\n找到这个样式所在行\n\n```\n.CodeMirror-lines\nmin-height:1px\n```\n\nmin-height修改为80px即可"},{"title":"写插件配置页面","created":"20230222052232170","creator":"林一二","keywords":"设置 config preference 设定","modified":"20230721075755283","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"你可能会希望插件有一些让用户修改设置的地方。\n\n!! 添加配置页\n\n加一个带 `$:/tags/ControlPanel/SettingsTab` 标签的条目，并用 `caption` 字段作为给用户显示的真正标题，例如：\n\n```\ntitle: $:/plugins/linonetwo/intention-tower-knowledge-graph/ControlPanel/Settings\ncaption: ITKG\ntags: $:/tags/ControlPanel/SettingsTab\n```\n\n内容就随便放了，可以像 [[库克马|库克马(穆罕默德•拉赫马尼)]] 的 [[Shiraz宏包]] 插件一样，用这种形式：\n\n```\nThese settings let you customise the behaviour of Shiraz plugin.\n\n---\n\n;Show Shiraz setting in more sidebar\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/ui/ControlPanel/Settings\" tag=\"$:/tags/MoreSideBar\"> Show setting in more sidebar</$checkbox>\n\n;Options\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/multicols/storyriver\" tag=\"$:/tags/Stylesheet\"> Multicolumn story river</$checkbox>\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/ui/colorify-buttons\" tag=\"$:/tags/Stylesheet\"> Colorful UI buttons</$checkbox>\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/ui/view-toolbar-button-visibility\" tag=\"$:/tags/Stylesheet\"> Hide tiddler's view toolbar and show on mouse hover</$checkbox>\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/ui/edit-toolbar-buttons\" tag=\"$:/tags/Stylesheet\"> Traffic lights for edit toolbar buttons</$checkbox>\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/colorful-sidebar-tab\" tag=\"$:/tags/Stylesheet\"> Colorify sidebar tabs</$checkbox>\n\n;Set dark and light palettes\n{{$:/plugins/kookma/shiraz/ui/set-dark-light-palette}}\n```\n\n其中\n\n```\n;Options\n:<$checkbox tiddler=\"$:/plugins/kookma/shiraz/styles/multicols/storyriver\" tag=\"$:/tags/Stylesheet\"> Multicolumn story river</$checkbox>\n```\n\n将渲染为类似这样的效果：\n\n;Options\n:<$checkbox tiddler=\"$:/state/multicols/storyriver\"> Multicolumn story river</$checkbox>\n\n然后你可以在你的插件里使用 `{{ $:/plugins/kookma/shiraz/styles/multicols/storyriver }}` 或者 `filter=[{$:/plugins/kookma/shiraz/styles/multicols/storyriver}]` 等方式来取配置的值。\n\n或使用 JS 形式来获取值：`$tw.wiki.getTiddlerText(ENABLE_EXTERNAL_ATTACHMENTS_TITLE, '') === 'yes'`\n\n配置页面里可以使用任何太微的微件来提供多种多样的配置框，不要仅限于打勾选框。\n\nControlPanel是控制台的意思，控制其实是由多个tabs微件把多个控制内容聚合起来的。上面说明的是一般插件的设置，如果是主题插件设置，对应的标签则是不一样的。勾选框是最常用的，但最好同时设置一个状态条目，以state开头或者config，里面的值是yes或no，然后控制某一条目的状态。具体实现方式类似[[使用List微件让内容可以切换中英文]]，也可参考[[给插件配置提供预置值]]。"},{"title":"修改插件文件夹","created":"20211016092911174","creator":"林一二","modified":"20211016092919587","modifier":"林一二","tags":"安装插件","type":"text/vnd.tiddlywiki","text":"这是第三种比较少用到的方法，根据[[太微开发者的一次讨论|https://github.com/Jermolene/TiddlyWiki5/discussions/6096]]，只有需要用到 NodeJS API 的插件才需要放进 `/plugins` 文件夹里。\n\n只能用这种方式安装的插件都有一定的危险性，需要你很信任作者+信任下载的网站时才能这样安装插件，不然可能会被哄骗安装上病毒或间谍插件，窃取电脑上的信息或导致无法开机工作等。"},{"title":"修改字体大小颜色","created":"20230310073600211","creator":"林一二","modified":"20230516132147060","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"!! 全局生效\n\n!!! 改字体大小\n\n打开[[控制面板|$:/ControlPanel]]里的「视觉外观」标签页，里面的「主题调整」子标签页。\n\n里面的「大小」配置项，就可以设置字体大小。\n\n!!! 改字体\n\n参考[[如何添加在线字体]]和[[如何内嵌字体]]。\n\n!!! 改特定元素里的字体\n\n使用[[添加css样式]]中的「修改全局样式」\n\n!! 局部生效\n\n使用[[添加css样式]]中的「添加局部样式」"},{"title":"修改SSR单条目静态模板的样式","created":"20230208071654375","creator":"林一二","modified":"20230208072227767","modifier":"林一二","tags":"如何启动一个NodeJS的TiddlyWiki项目","type":"text/vnd.tiddlywiki","text":"使用[[NodeJS服务端渲染单条目卡片]]时，样式表会额外加上一些内容，可能会长得和直接打开完整版 Wiki 不同。\n\n把想添加的 css 填到 `$:/core/templates/static.template.css` 里，可以修改单条目静态模板的样式。\n\n不过建议保留顶部原有的内容，只把你新加的内容放到底部。例如：\n\n```tw5\ntitle: $:/core/templates/static.template.css\n\n<!-- from the tiddlywiki repo, core/templates/static.template.css.tid -->\n\n{{$:/boot/boot.css||$:/core/templates/wikified-tiddler}}\n\n{{$:/core/ui/PageStylesheet||$:/core/templates/wikified-tiddler}}\n\n<!-- override the core tiddler to add this -->\n\n<$importvariables filter=\"[[$:/themes/tiddlywiki/vanilla/base]]\">\n/* Hide sidebar in static template on mobile\n  Normally the sidebar will hide using js in itonnote plugin. But in static template there is no js in static template\n*/\n@media (max-width: <<sidebarbreakpoint>>) {\n  .tc-body {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n  }\n  .tc-sidebar-scrollable {\n    height: auto;\n    position: unset;\n    width: 100%;\n    padding-left: 20px;\n  }\n}\n<!-- fix width related css variable not set in static mode -->\n@media (min-width: <<sidebarbreakpoint>>) {\n  .tc-sidebar-scrollable {\n    width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\n    max-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\n  }\n}\n</$importvariables>\n```\n\n"},{"title":"悬浮编辑器工具栏","created":"20220816124710159","creator":"Miao","modified":"20230516132404731","modifier":"马不前","tags":"主题集 自定义样式修改类","type":"text/vnd.tiddlywiki","text":"新建条目，标题随意，添加系统标签 `$:/tags/Stylesheet`\n\n然后下面的代码填入条目内容中，点击保存条目，即可实现此功能。\n\n注意：在Vanilla或SnowWhite布景主题下，测试会生效，其它主题未知。\n\n```\n/* $:/themes/tiddlywiki/vanilla/sticky */\n\n\n/* 编辑器工具栏 */\n\n.tc-editor-toolbar {\n    position: -webkit-sticky;\n    position: -moz-sticky;\n    position: -o-sticky;\n    position: -ms-sticky;\n    position: sticky;\n    top: 39px;\n    background: #fdf6e3;\n    z-index: 500;\n}\n\n.tc-tiddler-preview {\n    overflow: unset;\n}\n\n```"},{"title":"选择给定tiddler（文件夹）下的所有文件夹及条目","created":"20220815044942720","creator":"Miao","modified":"20230516133555496","modifier":"马不前","tags":"自动化 筛选器类","type":"text/vnd.tiddlywiki","text":"! 删除或导出文件夹下所有文件（Kin 筛选器）\n\n>''选择给定B条目的所有继承者''\n>\n>筛选器语法：[kin::to[B]]\n>\n>[img[kinto选定.png]]\n\n\n\n# 安装【Kin filter】插件，并使用表达式完成筛选并删除。\n\n# 表达式：[kin::to[文件夹条目]]\n\n# 表达式说明：这将会连同【文件夹条目】以及条目名称下继承的所有子条目全部筛选出来。\n\n\n\n\n[img[删除或导出文件夹下所有文件.png]]\n\n"},{"title":"渲染其它语法","created":"20220218052901501","creator":"林一二","modified":"20230915145348292","modifier":"马不前","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"有时候我们希望用 [[Mermaid|Mermaid插件]] 这样的 DSL（领域特定语言）来快速做画图之类的操作，可以用类似 `$$$text/vnd.tiddlywiki.mermaid` 这样的语法，详见 [[Jeremy 的讨论|https://github.com/Jermolene/TiddlyWiki5/discussions/6466]]。\n\n[img[渲染Mermaid语法-编辑.png]]\n\n把填在文件类型字段里的 text/vnd.tiddlywiki.mermaid 这样的类型名放到 `$$$` 后面，包住内容，就可以渲染出这个类型的内容效果\n\n[img[渲染Mermaid语法-预览.png]]\n\n这个用法于 typora 里的\n\n```\n```mermaid\n```\n\n了，但是可以支持任意文件格式的渲染。"},{"title":"页面按钮筛选显示","created":"20230525131358673","creator":"马不前","modified":"20230829050018912","modifier":"马不前","tags":"筛选器类","type":"text/vnd.tiddlywiki","text":"我最近探索发现，一个按钮，要么在所有条目里显示，要么就不显示。不能像编辑栏里的按钮按照筛选器来显示。这可能是后续要增加的功能。\n\n其实可以做到，主要是通过list和reveal来处理。比如所见即所得页面上的按钮，我要控制在系统条目上不显示。在图片条目上也不显示。那么就可以从下面的筛选器来排除。\n\n```\n<$list filter=\"[<currentTiddler>field:type[text/vnd.tiddlywiki]!prefix[$:/]] :or[<currentTiddler>!prefix[$:/]field:type[]]\"> \n```\n\n先是在当前条目里，筛选出type为常见wiki格式的，并排除标题前缀为`$:/`的，这就排除了系统条目。或者type类型没写的，也可以，但同样要排除标题前缀为`$:/`的。\n\n上面的代码可以简化为`<$list filter=\"[<currentTiddler>!prefix[$:/]]\"></$list>`，这个非常实用，因为很多自定义设置不需要在系统条目里展示，比如当前条目位置。"},{"title":"一键操作某标签下的所有条目","created":"20220221123601719","creator":"林一二","modified":"20220221123624685","modifier":"林一二","tags":"自动化","type":"text/vnd.tiddlywiki","text":"例如把它们都折叠：\n\n```tid\n<$button>\n  <$list\n      filter=\"[tag[x]]\"\n  >\n        <$action-setfield\n            $tiddler={{{[<currentTiddler>addprefix[$:/state/folded/]]}}}\n            text=\"hide\"\n        />\n  </$list>\n</$button>\n```"},{"title":"一键应用模板","created":"20220519024006087","creator":"林一二","modified":"20220519025701796","modifier":"林一二","tags":"自动化","type":"text/vnd.tiddlywiki","text":"!! 自制一个\n\n可以通过按钮来一键应用模板：\n\n<<reuse-tiddler \"快速创建新笔记按钮\">>\n\n你可以打开[[快速创建新笔记按钮]] 并进入编辑模式了解其 WikiText 具体是怎么写的，或者看下面的简化例子：\n\n```\n\t<$button>\n\t\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"标题填在这里\" text=\"\"\"这里是预置的文本\n\t\t可以换行\"\"\" tags=\"想法 待整理\" />\n\t添加新想法\n\t</$button>\n```\n\n它首先用 `<$button>` 微件（及其带反斜杠 `</$` 的另一半）做了一个按钮，在按钮里面包上一个 `<$action-sendmessage` 微件（详见 [[中文文档 action-sendmessage|https://bramchen.github.io/tw5-docs/zh-Hans/#ActionSendMessageWidget]]），发送消息给太微系统，消息是 `tm-new-tiddler` 也就是 `tiddlywiki message ：新建条目` 的意思，这样就会在点击按钮时触发发送消息给太微系统新建条目。\n\n消息的内容是：新条目的标题要填成「标题填在这里」，内容则是 `text` 里的，用三个引号括起来就可以包含换行，然后可以加多个标签。你可以点击下面的例子来看看效果：\n\n<$button>\n\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"标题填在这里\" text=\"\"\"这里是预置的文本\n\t可以换行\"\"\" tags=\"想法 待整理\" />\n添加新想法\n</$button>\n\n!! 使用模板相关插件\n\n可以[[使用插件源]]搜索「temlplate list 模板列表插件」，可以找到类似飞书文档风格的模板复用系统插件。\n\n其原理和上面介绍的基本差不多，只不过多加了一个类似[[一键操作某标签下的所有条目]]里的 `<$list` 微件来列出所有系统里现存的模板。"},{"title":"隐藏设置：全局启用caption字段","created":"20230104033103641","creator":"WhiteFall","modified":"20230516134039688","modifier":"马不前","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"* 描述：caption字段也称别名字段，用于代替标题显示，但不能代替标题使用。单词caption作名词时意为“标题；字幕；说明；逮捕”，作动词时意为“加上说明；加上标题”。caption与title的区别：只有title（条目标题）可以被嵌入`{{title}}`和链接`[[title]]`识别而caption不可以。\n* 使用方法：按下列说明创建两个系统条目。\n\n\n```\n条目标题：$:/ui/ViewTemplate/title/displayCaptionFilter\n标签：$:/tags/ViewTemplateTitleFilter\n条目内容：[<currentTiddler>has[caption]then[$:/ui/ViewTemplate/title/displayCaption]]\n字段：\n\tlist-before:$:/config/ViewTemplateTitleFilters/default\n```\n\n```\n条目标题：$:/ui/ViewTemplate/title/displayCaption\n条目内容：\n\\whitespace trim\n<h2 class=\"tc-title\">\n{{!!caption}}\n</h2>\n```\n"},{"title":"影子条目","created":"20220331025834606","creator":"林一二","modified":"20220331025944386","modifier":"林一二","tags":"基础知识","type":"text/vnd.tiddlywiki","text":"[[影子条目-中文文档|https://bramchen.github.io/tw5-docs/zh-Hans/#ShadowTiddlers]]是对插件内容做了修改之后产生的条目，不会随着插件的更新而更新，在插件删除后也会保留。一般用于覆盖插件的配置、记录[[钓鱼插件]]的学习记录等等，是一个很有用的在本地保存个人信息的机制。"},{"title":"用国内可用的Gitee同步太记数据","created":"20230329030447091","creator":"林一二","modified":"20230402020017988","modifier":"马不前","tags":"B站直播 任务 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1tm4y1z7bt/","text":"有同学说Github不会用，而且需要翻墙，不好同步。\n\n"},{"title":"用筛选器处理字符串","created":"20230107101558682","creator":"林一二","modified":"20230107102119192","modifier":"林一二","tags":"筛选器 文本拼接","type":"text/vnd.tiddlywiki","text":"!! 先切分成数组，用筛选器操作符处理，再拼接\n\n[[筛选器操作符]]很多是处理数组的，例如 `last`，是把输入的数组中最后的几个元素筛选出来。如果你传入的是一个字符串，例如 `{!!startDate}` （此处语法为[[在筛选器中使用嵌入]]），那就需要先用 `split` 把文本拆分成一个个字符，变成字符数组：\n\n```tw5\n[{!!startDate}split[]last[5]join[]]\n```\n\n这就表示\n\n# 把条目的 `startDate` 字段的内容取出来（内容类似 `20230103223000000`）\n# 切分成字符数组（类似 `Array(17) [ \"2\", \"0\", \"2\", \"3\", \"0\", \"1\", \"0\", \"3\", \"2\", \"2\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\"]`）\n# 取最后 5 个元素（`[\"0\", \"0\", \"0\", \"0\", \"0\"]`）\n# 重新拼起来（`00000`）"},{"title":"用自动化对抗惰性","created":"20220107055812446","creator":"林一二","modified":"20220108042611448","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"<div id=\"tiddlywiki-save-graph\">\n {{计算机缓存层级图}}\n</div>\n\n笔记系统作为N级缓存，关键是入更低级的缓存，才能更快地参与辅助决策，这需要大量的学习、回顾。\n\n但是你真的会常常回顾自己记下的数百张闪念卡片、复习整理出的富含链接的永久笔记/知识笔记/提取笔记/Area笔记/知识图谱笔记吗？\n\n除了依靠内在的驱动力去做整理、复习，我们也需要一个系统来辅助我们，作为我们外置的意志力，减轻知识入脑的压力。\n\n<style>\n#tiddlywiki-save-graph {\n  float: right;\n}\n.tamasha-slide-content #tiddlywiki-save-graph {\n\tline-height: 1.2rem !important;\n}\n</style>"},{"title":"用kin-filter搜索当前文件夹树里的文件（展示为列表）","caption":"当前文件夹树里的Task（列表）","created":"20200610134316199","creator":"林一二","modified":"20211004042849355","modifier":"林一二","tags":"$:/tags/TextEditor/Snippet","type":"text/vnd.tiddlywiki","text":"<$list filter=\"[tag<currentTiddler>]+[kin::to{currentTiddler}]\">\n\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>"},{"title":"用kin-filter搜索当前文件夹树里的Task（仅Filter）","caption":"当前文件夹树里的Task（Filter）","created":"20200625080138883","creator":"林一二","modified":"20211003070218176","modifier":"林一二","tags":"$:/tags/TextEditor/Snippet","type":"text/vnd.tiddlywiki","text":"[tag[Task]]+[kin::to{currentTiddler}]-[tag[done]]"},{"title":"有待进步的部分","created":"20230617083739536","creator":"WhiteFall","modified":"20230809234233332","modifier":"WhiteFall","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"关键词：附件的快速引用及便捷修改（图片引用，音频引用，视频引用），性能增强。\n\n# 最基本的图文混排、引用图片的体验应该是每个笔记软件都应该具备且易于使用的功能。\n\n# 如何插入图片，非文本资源的使用不够简洁，目前似乎没有成熟的方案，直接插入图片或附件可能会影响性能，obsdian可以在编辑时快速引入图片或pdf，仅需复制粘贴就好他会自动放入设定好的附加文件夹，修改图片名称仅仅需要右单击链接重命名即可，这时候，链接和文件都会重命名和更新。\n\n# 附件的引用、tiddlywiki的性能。我感觉是目前使用中最在意的点啦。若这两个点增强一下，太记tiddlywiki的使用体验至少上升好多。\n\nWhiteFall：对于软件来说，就是功能频谱（借用光谱概念，将软件功能平铺上去）的覆盖面啦，tw覆盖面就高级方面的。其它的各有各的优势。obsidian在常用的和基础方面的功能频段覆盖较好。\n\n马不前：这样一想，也就不遗憾了。因为本来就不是同一类的，那就自然有各自的选择了。\n\n马不前：我现在的想法就是，开源，那么就只开发自己使用的软件，其他人自然会有其他的选择。\n\n马不前：从个人角度来讲，开源的原则在于first self,second others，至少目前我是这样想的，我开发的插件或者说我维护的，基本上都是我个人在使用的，而且怎么开发也都是首先为我个人服务的。如果有很多人需要其他的服务，要么向我提供资金，要么他自己去fork一份然后他自己去开发。当然这里还会有一个其他人协助的问题，这个也是看情况的，但因为如果他加入进来，为之提供实质性的贡献时，那是可以协商的，什么功能加入，什么功能不需要加入。文档要不要补充，补充到什么程度都是由贡献的人来决定的。除非有商业化的收入，不然不会考虑太多的。"},{"title":"有没有比故事河更好的设计？","created":"20230530151741448","creator":"马不前","modified":"20230530152119465","modifier":"马不前","tags":"问题以及想法","type":"text/vnd.tiddlywiki","text":"当我写下这个条目的时候，我就已经觉得这些故事河的交互设计不是特别好的了。是需要改进的。\n\n不过我并不是特别讨厌故事河的设计，这完全说不上，应该说刚开始我接触的时候还是感到很惊艳的，但现在我发现当同时打开的条目很多时，故事河的交互设计就不是很好了。当然现在有林一二开发的顶部栏插件，虽然也很不错的，但感觉还是差了点什么。这个或许是未来需要改进的。"},{"title":"语词集，自动收集条目到一个条目卡片中集中显示","created":"20221127114258528","creator":"WhiteFall","modified":"20230623160221256","modifier":"林一二","tags":"筛选器类 在列表微件中使用筛选器","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：WhiteFall\n* 描述：仅需要打上标签A就可以自动收集Tiddlers到一个条目卡片中。\n* 使用方法：修改filter=\"[tag[日志]]\"中的“日志”标签为你需要的标签。然后无论在什么地方创建一个条目，只需要为该条目打上此标签，就可以自动收集到 语词集（主题）卡片中。__主题__ 意味着以某个中心，比如日志为中心聚集并显示的语词集。\n\n\n```\n条目标题：语词集（主题）\n条目类型：默认TiddlyWiki5\n```\n\n```html\n<$list filter=\"[tag[主题]]\">\n\n---\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>\n```"},{"title":"元素视图","created":"20230413085250264","creator":"WhiteFall","modified":"20230414022843216","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"用不同的视图方式展示条目知识点的一种视图工具。\n\n用不同的视角看待整理条目，比如在全局视图下从整体关系中整理条目之间的关联、对自己的笔记的一个整体的把握。\n\n在3D软件，例如Blender中，一个模型可以有好几种展示方式，其中一种是三维视图，其他的方式为平面切片、三视图方式，线框透视模式等等。在CAD中也有类似的视口模式，可以显示平面线模式和立体3D模式。\n\n我并不确定【知识视图】这个描述是否合理，之前想到一个合适的名词描述，可惜忘记了。元素视图模式？\n\nchatGPT建议为：知识图谱视图（Knowledge Graph View）\n\n\n''展示知识方式的视图''\n\n展示知识的方式有多种视图，常见的包括：\n\n1.树状图（Tree）\n\n2.表格（Table）\n\n3.流程图（Flowchart）\n\n4.时间轴（Timeline）\n\n5.地图（Map）\n\n6.散点图（Scatterplot）\n\n7.雷达图（Radar chart）\n\n8.条形图（Bar chart）\n\n9.饼图（Pie chart）\n\n10.网络图（Network graph）\n\n综合起来，展示知识的方式的视图可以被称为“知识树状图”、“知识表格”、“知识流程图”、“知识时间轴”、“知识地图”、“知识散点图”、“知识雷达图”、“知识条形图”、“知识饼图”或者“知识网络图”。"},{"title":"元信息遵循本体","created":"20220108031431923","creator":"林一二","modified":"20220108044648427","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"根据[[插件字段本体化倡议|https://talk.tiddlywiki.org/t/suggestion-for-all-plugin-developers-about-field-name-lets-use-ontology-to-maintain-interoperability/1923]]，希望大家尽量在写插件时让字段变得和其它插件通用，详见社区帖子内容。"},{"title":"约翰·博利拉","caption":"João Bolila","created":"20230102063310968","creator":"马不前","modified":"20230102063359873","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! João Bolila\n\n[[githu|https://github.com/jbolila]]"},{"title":"约书亚·芳塔瑞","created":"20230217105314999","creator":"林一二","modified":"20230217105619340","modifier":"林一二","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Joshua Fontany\n\n[[Github|https://github.com/joshuafontany]]\n\n是个游戏开发者/艺术家，开发了 VSCode TW5 语法高亮插件，以及一些高级的 JSON 操作插件等。"},{"title":"在宏调用里使用变量","created":"20230312155714645","creator":"林一二","modified":"20230312160432418","modifier":"林一二","tags":"宏","type":"text/vnd.tiddlywiki","text":"一般是用 `<$macrocall $name=macroName xxx=<<variableName>> />` 的写法。\n\n这里 `xxx` 是宏接收的一个参数，`variableName` 是你想使用的变量。\n\n可以看到我们这里用到了[[微件]]、[[宏]]、[[变量]]三个概念：\n\n# 通过 `macrocall` 微件来使用宏，宏的名字放在 `$name=` 后面\n#* `<$macrocall $name=macroName />` 等价于 `<<macroName>>`\n#* 但 `<<macroName>>` 这种写法不支持使用变量作为宏的参数，所以我们才需要使用这里介绍的更复杂的写法\n# `<<variableName>>` 是正常的使用变量的写法，我们通过[[在微件调用中使用宏或变量]]来把它传给 `macrocall` 微件的 `xxx` 参数\n# `macrocall` 微件的 `xxx` 参数就会传给 `macroName` 这个我们想调用的宏，作为它的同名的 `xxx` 参数，被宏用起来"},{"title":"在宏定义里使用变量","created":"20230107091629373","creator":"林一二","modified":"20230312155708196","modifier":"林一二","tags":"变量 宏","type":"text/vnd.tiddlywiki","text":"参考[[中文文档-宏|https://bramchen.github.io/tw5-docs/zh-Hans/#Macros]]\n\n> 在片段本身检测到的唯一标记是 `$name$`（宏参数的占位符）和 `$(name)$`（ [[变量]]的占位符）。\n\n!!! 使用环境中的变量\n\n例如官方展示按钮的这个例子：\n\n```tw5\n\\define tag-styles()\nbackground-color:$(backgroundColor)$;\nfill:$(foregroundColor)$;\ncolor:$(foregroundColor)$;\n\\end\n\n\\define tag-body-inner(colour,fallbackTarget,colourA,colourB,icon)\n\\whitespace trim\n<$vars foregroundColor=<<contrastcolour target:\"\"\"$colour$\"\"\" fallbackTarget:\"\"\"$fallbackTarget$\"\"\" colourA:\"\"\"$colourA$\"\"\" colourB:\"\"\"$colourB$\"\"\">> backgroundColor=\"\"\"$colour$\"\"\">\n\n  <$button class=\"tc-tag-label\" style=<<tag-styles>> >\n \t\tXXX\n  </$button>\n\n</$vars>\n\\end\n```\n\n当场声明一个 `tag-styles` 宏，里面用 `$(backgroundColor)$` 这种方式使用变量。\n\n这里使用`$(name)$`（ [[变量]]的占位符）\n\n!!! 使用宏参数\n\n可以看到这个变量是在下面 `tag-body-inner` 的宏定义里，通过 `<$vars backgroundColor=\"\"\"$colour$\"\"\"` 放到环境里的。这里也是通过 `$colour$` 的方式使用了环境里通过参数传入的 `colour` 变量。\n\n这里使用 `$name$`（宏参数的占位符）。\n\n这里的三引号 `\"\"\"` 和普通的引号差不多，和变量无关，你用单个引号也行，参考[[中文文档-宏调用|https://bramchen.github.io/tw5-docs/zh-Hans/#Macro%20Calls%20in%20WikiText]]：\n\n> 每个参数的值可以包裹于`'`单引号`'`、`\"`双引号`\"`、`\"\"\"`三重双引号`\"\"\"`或`[[`双方括弧`]]`。三重双引号允许包含几乎所有的值。如果参数值未包含空格、单引号或双引号，则无须分隔符号。"},{"title":"在列表微件中使用筛选器","created":"20220407073209948","creator":"林一二","modified":"20230831050026860","modifier":"WhiteFall","tags":"筛选器 宏变量筛选器嵌入连用 自动化 微件","type":"text/vnd.tiddlywiki","text":"以列出带有「基础知识」标签的条目为例子，`<$list filter=\"[tag[基础知识]]\"></$list>` 可以列出带有「基础知识」标签的条目。\n\n!! 例子\n\n在[[太微背景介绍]]里，我们使用：\n\n```tw5\n<$list filter=\"[tag<currentTiddler>]\">\n\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>\n```\n\n来把当前条目（即「太微背景介绍」）里的所有子条目显示出来，其中 `<currentTiddler>` 是值为「当前条目」的[[变量]]（这个用法见[[在筛选器中使用宏或变量]]），然后 `[tag<currentTiddler>]` 这个[[筛选器]] 运行之后的意思就是「筛选标签为『太微背景介绍』的所有条目」，然后显示成列表。在列表里，先用一个三级标题（即「`!!!`」语法）加上链接（`<$link>` [[微件]]），显示条目名（「`<<currentTiddler>>`」[[变量]]），然后在标题下面[[嵌入]]条目里的文本字段（即 text 字段；用 `{{!!xxx}}` 语法可以嵌入当前条目的 xxx 字段）。\n\n如果希望简单使用，不涉及太多知识点，那么可以简单用：\n\n```tw5\n<$list filter=\"[tag[你的标签]]\">\n\n {{!!text}}\n\n</$list>\n```\n\n来列出加了「你的标签」的所有笔记的内容。\n\n!! 原理\n\nlist 微件的 `filter` 参数接受一个字符串，所以将「筛选器」直接作为字符串传给它，它会来执行。\n\n这与[[在微件参数中使用筛选器]]不同，使用三个花括号的意思是将「筛选器的执行结果」传给参数，让这个微件不需要自己执行筛选器。"},{"title":"在嵌入中使用筛选器","created":"20220402075308386","creator":"林一二","modified":"20220402075502491","modifier":"林一二","tags":"嵌入","type":"text/vnd.tiddlywiki","text":"和[[在筛选器中使用嵌入]]很相似，我们也可以把筛选器的结果通过嵌入的写法放到只接受嵌入的地方，详见[[维基文本中的嵌入-中文教程|https://bramchen.github.io/tw5-docs/zh-Hans/#Transclusion%20in%20WikiText]]\n\n只需要用三个花括号的嵌入就可以了： `{{{ [tag[WikiText]] }}}`"},{"title":"在筛选器中使用宏或变量","created":"20220402072744122","creator":"林一二","modified":"20221127071643643","modifier":"林一二","tags":"宏 筛选器 宏变量筛选器嵌入连用","type":"text/vnd.tiddlywiki","text":"根据[[筛选器参数-中文教程|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Parameter]]，筛选器操作符的参数可以是：\n\n软式 - 变量：`<like this>` 该参数是变量当前的值，角括号之间的文本为参数名称。\n\n* `[xxx]`就是指\"xxx\"字符串\n* `<xxx>`是指xxx变量\n* `{xxx}`是指xxx条目的text字段\n* `{xxx!!yyy}`是指xxx条目的yyy字段\n* `{!!yyy}`是指当前条目的yyy字段\n* `[<xxx>!match[]]`是判断当前变量存不存在\n\n简单来说，就是把原版宏两个的尖括号，变成一个就好。\n\n!! 例子\n\n!!! 通过筛选器获得有固定开头、日期为结尾的条目名\n\n```\n[<now \"YYYY-MM-DD\">] +[addprefix[$:/state/tw-mobile-sync/server/]]\n```\n\n其中用 `[<now \"YYYY-MM-DD\">]` 这个方式在筛选器中使用了日期宏，原版的宏写法为 `<<now \"YYYY-MM-DD\">>` 。"},{"title":"在筛选器中使用嵌入","created":"20220402073243576","creator":"林一二","modified":"20221127071919853","modifier":"林一二","tags":"筛选器 嵌入 宏变量筛选器嵌入连用","type":"text/vnd.tiddlywiki","text":"根据[[筛选器参数-中文教程|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Parameter]]，筛选器操作符的参数可以是：\n\n软式 - 间接：`{like this}` 该参数是由位于大括号之间的文本参考表示的文本，即一指定条目的一个字段，或指定的数据条目的属性值。\n\n简单来说，就是把原版宏两个的花括号，变成一个就好。"},{"title":"在太记里使用gatha插件需要注意的","created":"20230106062338694","creator":"马不前","modified":"20230106063340949","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"* $：/控制面板 > 设置> Gatha 选项卡>全局发布筛选器\n\n找到全局发布筛选器，然后添加下面的内容。\n\n<<code src:\"[[$:/DefaultTiddlers]]\n[[$:/themes/tiddlywiki/vanilla]]\n[subfilter{$:/DefaultTiddlers}]\n[[$:/themes/linonetwo/itonnote]]\n[[$:/plugins/linonetwo/itonnote]]\" >>\n\n其中一个是默认条目和默认条目的筛选器。另外三个分别是原生主题，太记默认主题，主题配套插件。需要这三个设置为全局发布器，才能生效。\n\n* 侧边栏 > Gatha > 插件选项卡 > 导出插件部分\n\n本地发布筛选器，是只作用当前编辑插件的。找到下面demo，demo旁边有三个小点，点击就可以跳转到本地发布筛选器了。在里面写和上面类似的筛选表达式，这样发布的时候就会带上里面的条目。\n\n* 注意：如果两个筛选器有冲突的话，本地筛选器会覆盖全局发布筛选器。\n\ngatha插件可以制作插件，但我以为更常见的用途是可以把条目系统地分享给别人，用来分发内容很方便。\n\n当然如果一直有分享的需要，那么还是搞一个个人网站更方便一点。\n\n[[gatha插件demo|https://kookma.github.io/TW-Gatha/]]"},{"title":"在条目中嵌入卡片风格的条目","created":"20230512100649681","creator":"WhiteFall","modified":"20230516133012648","modifier":"马不前","tags":"自定义宏类 自定义样式修改类","type":"text/vnd.tiddlywiki","text":"\\import Macro_内嵌卡片\n\n【卡片集】\n\n* Author：@荆棘巢凤\n* 描述：在条目内部嵌入多个卡片风格的条目。拖放[[Macro_内嵌卡片]]到你的wiki中并点击导入。并为“Macro_内嵌卡片” 添加`$:/tags/Macro`标签，以便全局访问宏。\n* 使用方法：现在，你可以通过书写`<<.card 条目名>>`宏来嵌入卡片样式的条目啦！是不是很好看呢？不足，需要使用模版和级联，等待补充完善。\n* 启发：你可以在定义宏的时候一并书写CSS样式。还可以不必使用`$:/tags/Macro`标签全局设置，而在一个条目中使用`\\import 宏条目名`单独引用此宏然后使用它。\n\n\n示例：\n\n<<<\n<<.card \"all-in-one\">>\n<<.card 如何加速访问Github>>\n<<<\n\n\n```\n条目名：Macro_内嵌卡片（任意）\n标签：$:/tags/Macro\n```\n<$let selected-tiddler=\"Macro_内嵌卡片\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n\n模版\n\n```\n\\whitespace trim\n<$list filter=\"[is[current]has[version]]\">\n    <div style=\"font-size: .9em;\">\n        <b>适用版本：</b>{{!!version}}\n    </div>\n    <hr>\n</$list>\n<div class=\"mcol\">\n    <$transclude mode=\"block\">\n        <$transclude tiddler=\"$:/language/MissingTiddler/Hint\" mode=\"block\" />\n    </$transclude>\n</div>\n<$list filter=\"[is[current]has[dependence]]\">\n    <hr>\n    <b style=\"color:#ffa39e\">依赖项</b>\n    <p>{{!!dependence}}</p>\n</$list>\n```\n\n级联\n\n```\n7.定制>级联>定制项>内容\n[prefix[定制>]![定制>说明]then[定制>模板>级联>定制项]]\n\n8.定制>级联>通用>内容\n[tag[编程]then[定制>模板>级联>代码片段汇总]]\n[tag[Index]has[index-prefix]then[定制>模板>级联>索引卡]]\n[tag[Aggregate]then[定制>模板>级联>MultiColumn]]\n[!is[system]!is[binary]!tag[ECharts]then[定制>模板>级联>Uni]]\n```\n\nCSS样式\n\n```\n/* pdf 高度修正 */\nembed[src$=pdf] {\n  height: 80vh;\n}\n\n/* 多列布局 */\n.mcol {\n  column-count: 2;\n  column-gap: 2em;\n  column-rule: 1px solid #f1f1f1;\n}\n```\n\n"},{"title":"在微件参数中使用筛选器","created":"20221127071250021","creator":"林一二","modified":"20230831045951563","modifier":"WhiteFall","tags":"筛选器 宏变量筛选器嵌入连用 微件","type":"text/vnd.tiddlywiki","text":"使用三个花括号 `{{{ }}}` 即可：\n\n```tw5\n<$whiteboard tiddler={{{[all[shadows+tiddlers]field:type[application/tldr]sort[modified]first[]]}}} height=\"calc(100vh - 35px)\" />\n```\n\n在这个例子里，我们希望：\n\n# 通过筛选器 `[all[shadows+tiddlers]field:type[application/tldr]sort[modified]first[]]` 筛选出最近用过的第一个类型为 `application/tldr` 的条目\n# 将它的结果传给 `whiteboard` 微件的 `tiddler` 参数\n\n所以将这个筛选器用 `{{{ }}}` 括起来，放在 `tiddler=` 这个参数的等号后即可。\n\n总结一下，三花括号可以把筛选器的结果作为[[嵌入]]的输入。"},{"title":"在微件调用中使用宏或变量","created":"20230312160154681","creator":"林一二","modified":"20230312160951551","modifier":"林一二","tags":"微件","type":"text/vnd.tiddlywiki","text":"直接在放微件参数的地方，使用 `<<xxx>>` 的正常的[[宏]]的使用方法即可。\n\n例如[[中文官方教程-link 微件|https://bramchen.github.io/tw5-docs/zh-Hans/#LinkWidget]]中的例子：\n\n```tw5\n<$link to=<<currentTiddler>> >\n\t<$view field=\"title\"/>\n</$link>\n```\n\n<$link to=<<currentTiddler>>>\n\t<$view field=\"title\"/>\n</$link>\n\n`<<currentTiddler>>` 这个变量就直接传给了 `to` 这个参数，中间用「等号」 `=` 连接。\n\n更多例子可见[[变量在不同情况下的多种写法]]。"},{"title":"在主题插件里用设置控制样式","created":"20230721075758337","creator":"林一二","modified":"20230721080230066","modifier":"林一二","tags":"写插件配置页面","text":"用config条目作中介，让开关只修改config条目，而不会去修改具体样式，这样在插件更新时，才不会发现用户覆盖了很多条目（变成[[影子条目]]）无法获得更新。\n\n!! Itonnote 主题中的例子\n\n‎src/settings.tid [[写插件配置页面]]\n\n```tid\n<$checkbox tiddler=\"$:/config/themes/itonnote/separate-title-and-button\" field=\"text\" checked=\"show\" unchecked=\"hide\" d…\n<$checkbox tiddler=\"$:/config/themes/itonnote/separate-title-and-button\" field=\"text\" checked=\"show\" unchecked=\"hide\" d…\n```\n\n‎src/separate-title-and-button.tid [[根据条件展示内容]]\n\n```tid\ntitle: $:/themes/linonetwo/itonnote/separate-title-and-button\ntags: $:/tags/Stylesheet\n\n<$reveal state=\"$:/config/themes/itonnote/separate-title-and-button\" type=\"match\" text=\"show\">\n/**\n\t让标题与按钮分隔开。\n```\n\n‎src/configs/separate-title-and-button.tid [[给插件配置提供预置值]]\n\n```tid\ntitle: $:/config/themes/itonnote/separate-title-and-button\n\nhide\n```"},{"title":"在桌面端访问Termux终端","created":"20220815041709202","creator":"Miao","modified":"20230516134615638","modifier":"马不前","tags":"如何保存 编程知识类","type":"text/vnd.tiddlywiki","text":"!! 在手机上安装Termux\n\n下载地址：https://link.zhihu.com/?target=https%3A//f-droid.org/en/packages/com.termux/\n\n安装完成打开Termux，首先要换源，然后安装ssh，最后设置密码\n\n# 换源命令：termux-change-repo，空格切换选中状态，移动方向键切换选中项目，Enter键确认执行命令。\n\n# 安装ssh：apt install openssh，提示全部按回车键默认即可。\n\n# 设置密码：passwd，然后输入密码，第二次确认密码。\n\n\n!! 电脑端连接Termux\n\n首先我们将会使用win10，win10自带ssh，我会使用应用商店的【Windows 终端】，你可以使用Shift + 鼠标右键 打开命令行或者Powershell。输入命令连接。\n\nssh连接命令：ssh -p 8022 <IP地址>     例如：ssh -p 8022 192.168.0.8  \n\n然后输入之前设置的密码既可连接。\n\n\n!! Termux 的两个使用场景\n\n# TiddlyWiki的nodejs版本或者webdav版本。使用桌面端键盘敲命令会比手机易用很多。\n\n# nodejs、python、vim的学习使用等。\n"},{"title":"在桌面端和移动端直接同步数据","created":"20220530024326138","creator":"林一二","modified":"20231013021000291","modifier":"林一二","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"!! 如果你在使用[[太记（NodeJS）|TidGi太记]]桌面端\n\n到 CPL 里搜（CPL 使用方法见[[安装插件]]）[[tw-mobile-sync 插件|TW-MobiLe-Sync手机tiddloid移动端同步TidGi桌面端插件]]，可以在桌面和手机端同步数据。\n\n支持 Android 的 [[太记移动版]] 、 [[Tiddloid]] 和 iOS 的 [[Quine2]]。\n\n!! 如果你在使用 TiddlyWikiDesktop 或者 Timimi 桌面端（HTML）\n\n直接用网盘同步 HTML 文件即可！同步后可以在 [[Tiddloid]] 打开。"},{"title":"在JS里获得WikiText的渲染结果","created":"20220422154133544","creator":"林一二","modified":"20220422154344135","modifier":"林一二","tags":"WikiText与JavaScript的交互","type":"text/vnd.tiddlywiki","text":"以渲染条目的 `caption` 字段为例：\n\n```ts\nconst renderedCaption = $tw.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', tiddler?.fields?.caption ?? title, {\n\tparseAsInline: true,\n\tparentWidget,\n});\n```\n\n这样就算 caption 是 `{{$:/language/SideBar/Open/Caption}}` 这样的特殊 Wiki 语法，也能在 JS 里得到渲染之后的结果 `打开`。"},{"title":"在TiddlyWiki中移植Web应用以及调用JS模块","created":"20230510094208005","creator":"WhiteFall","modified":"20230510094335014","modifier":"WhiteFall","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"Gatha版：2048小游戏，https://tiddly-gittly.github.io/tiddlywiki-game-2048/tw-2048-Gatha.html#%24%3A%2Fplugins%2Fmiao%2Ftw-2048%2FREADME"},{"created":"20230102054729256","creator":"马不前","text":"! Xavier Cazin \n\n[[github|https://github.com/xcazin?tab=overview&from=2022-12-01&to=2022-12-31]]","tags":"Tiddlywiki贡献者","title":"泽维尔·卡辛","modified":"20230102055116720","modifier":"马不前","type":"text/vnd.tiddlywiki","caption":"Xavier Cazin "},{"title":"怎么最简单地使用TiddlyWiki？","created":"20230430112539127","creator":"WhiteFall","modified":"20231012094917489","modifier":"WhiteFall","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"<<alert-leftbar secondary \"核心要件：减少可能性，确定边界感。\n<br><br>\nTidGi是一款笔记类应用软件，TiddlyWiki则是一种强大的笔记框架，为用户提供了倾向于创造活动的环境。同时，TiddlyWiki也作为一个整体称呼，包括了所有基于该框架开发的软件和衍生版本。\n<br><br>\n由于TiddlyWiki本身的特性，整个流程包括开发、测试、使用、发布、到最终用户手中等等都在其中。TW不同于一般笔记应用软件，TiddlyWiki是通过用户和社区的积极参与、不断创新和无私且广泛的贡献为主要的发展方向；由[[杰里米·拉斯顿]]为TiddlyWiki的诞生和发展创造了关键的基础条件及优渥的土壤环境。\n<br><br>\n因此确立边界感，主动确认身份，选择适合的TiddlyWiki提供的功能范围，有利于自己的使用和学习方向。这就要求使用者站在自己角度看待无限的、类似平台或笔记框架的TiddlyWiki，而不是以普通软件的视角看待自己力所不及而舍去的软件功能。比如[[库克马(穆罕默德•拉赫马尼)]]就是为最终用户服务的。而最终用户就是使用他们做的插件或功能。<br><br>最后：太微给我的感觉是，我给你提供一块好的土壤，至于怎么生长和发展，只要不“长歪”、不违反开源协议，想怎样都可以。\">>\n\n\n# 减少应用场景的可能性和可选平台，仅使用TidGi。\n\n# 尽量不自己配置太微模板、配置插件，除非他们很简单。不涉及任何关于[[Wiki编程|Wiki编程的定义]]的部分，如果涉及你必须要有能力接受。仅使用wikitext、筛选器和模仿示例和说明去调用相关功能进行写作。\n\n# 关于在使用太记以及太记默认TiddlyWiki模板遇到的问题（指程序设计问题，比如bug，UI混乱等等）可以在GitHub提交issue，然后等待处理。最好是去看一眼issues，很多问题之前已经提出了，得等林一二有时间修复。\n\n# 阅读随机tips（点击骰子图标），积累常识性认知与知识。\n---\n\nTidGi桌面应用反馈链：https://github.com/tiddly-gittly/TidGi-Desktop/issues\n\nTidGi默认知识模版反馈链：https://github.com/tiddly-gittly/Tiddlywiki-NodeJS-Github-Template/issues"},{"title":"詹姆斯·安德森","caption":"James Anderson","created":"20230102065238801","creator":"马不前","modified":"20230102065314088","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! James Anderson\n\n[[github|https://github.com/welford]]"},{"title":"展示直播链接的视图模板","created":"20230427143131720","creator":"林一二","modified":"20230427144816757","modifier":"林一二","tags":"B站直播 $:/tags/ViewTemplate","type":"text/vnd.tiddlywiki","text":"<$list filter=\"[<currentTiddler>tag[B站直播]]\">\nB站录播视频链接：{{!!video-link}}\n</$list>"},{"title":"张弓毅","caption":"Bow Yi Jang","created":"20230102064743856","creator":"马不前","modified":"20230102064820224","modifier":"马不前","tags":"Tiddlywiki贡献者","type":"text/vnd.tiddlywiki","text":"! Bow Yi Jang\n\n[[github|https://github.com/Eucaly]]"},{"title":"支持多用户同时编辑的TW","created":"20221225031906984","creator":"WhiteFall","modified":"20221225035011407","modifier":"WhiteFall","tags":"如何保存","type":"text/vnd.tiddlywiki","text":"!! TW5-Bob\n\n运行在NodeJS环境的TiddlyWiki，支持多用户同时使用/编辑相同的wiki的插件：https://github.com/OokTech/TW5-Bob\n\n最简单的版本（捆绑应用程序）：https://github.com/OokTech/TW5-BobEXE 。适用系统linux、Windows、mac。\n\n!! TW5-Bob它有什么作用？\n\n# 多用户支持同时使用/编辑相同的wiki\n# 多维基支持 - 运行一次，为多个维基提供服务\n# 从根维基内部创建和配置新的维基\n# 以多种方式导出单个文件维基\n# 浏览器和文件系统之间的双向实时同步\n# 所有配置都可以从维基内部完成\n# 提供外部文件（如图像），以便您可以将它们包含在您的wiki中\n# 允许您从 wiki 内部运行 shell 脚本和命令\n# 可以用作插件库，使插件可供其他wiki使用（需要其他wiki上的TWederBob插件才能连接）\n# 服务器间联合。不同的 Bob 服务器可以与共享的 tiddler 和聊天服务器/中继进行通信\n# 用于与服务器交互的 HTTP API\n# 很多文档都在文档文件夹的 tiddler 文件中 的插件，或在 wiki 中的控制面板上的插件信息。\n\n!! 运行环境\n\n# NodeJS，如果不使用捆绑应用程序的方式，您需要查看项目主页，手动安装及配置插件。更新插件也需要手动配置。\n# 更多信息，请查看项目主页。\n\n!! 使用体验\n\nbug比较多，而且明显在一些功能设置方面缺乏认真仔细的规划，后台配置界面比原始版本的 TiddlyWiki 复杂很多，容易引起迷惑，关键是相关文档也不够清晰，难以在生产环境中放心使用。\n"},{"title":"知识管理流程罗列","created":"20220106131707949","creator":"林一二","modified":"20220108103225962","modifier":"林一二","tags":"科普幻灯片","type":"text/vnd.tiddlywiki","text":"快速复习一下常见的几种非线性笔记方法（与拿小本本从头记到尾的线性笔记相比较）：\n\n# PARA方法 [[林一二关于Para的笔记|https://onetwo.ren/wiki/#PARA]]\n# CODE方法 （收集（Collect） 组织（Organize - PARA） 提取（Distill - progressive summarization） 表达（Express））\n# DIKW方法 （Data（数据）、Information（信息）、Knowledge（知识）、智慧（Wisdom）[[oflg关于dikw的笔记|https://oflg.vercel.app/note#%E6%83%85%E6%8A%A5%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%2F3b949400ee59]]\n# ITKG方法 [[林一二关于ITKG的介绍|https://onetwo.ren/wiki/#ITKG]]\n# 常青笔记法 [[叶峻峣对Andy的常青笔记的翻译|https://zhuanlan.zhihu.com/p/416319260]]\n# 卡片笔记法 （闪念笔记、永久笔记和项目笔记，详见书籍）\n# ……其它鼓励整理、分门别类的方法，它们的共性是…"},{"title":"知识链","created":"20221127032656430","creator":"WhiteFall","modified":"20230104040135574","modifier":"WhiteFall","order":"1","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"!! ONE\n* TiddlyWiki官网:https://tiddlywiki.com/\n* 社群链接聚合器：https://links.tiddlywiki.org/\n* [[TiddlyWiki开发者文档|https://tiddlywiki.com/dev]]\n* [[墨屉渐进学习版TiddlyWiki|https://tiddlymemo.org/manual/zh-Hans]]\n* 开始:桌面端浏览器中的太微\n** 知乎文章：https://zhuanlan.zhihu.com/p/560276936]]\n** 本站条目：[[开始:桌面端浏览器中的太微]]\n* [[TiddlyStow创建保存你的太微|https://twpub-book.netlify.app/tiddlystow.html]]\n\n!! TWO\n* [[TidGi介绍与下载链接|https://github.com/tiddly-gittly/TiddlyGit-Desktop]]\n* [[TiddlyWiki官方讨论组|https://talk.tiddlywiki.org/]]\n* TiddlyWiki 单文件版[[在线升级|https://tiddlywiki.com/upgrade.html]]\n* [[tiddlyhost|https://tiddlyhost.com]]在线的创建并托管你的TiddlyWiki网站,免费，QQ邮箱可注册 \n* [[TiddlyWiki教学|https://roulesophy.github.io/20210102-tiddlywiki-tutorial-viewtemplate-header/]]\n* [[TiddlyWiki Link|https://links.tiddlywiki.com/]] Tiddlywiki 官方的资源库，整合了社区绝大多数的资源，非常强大，英文\n* [[TiddlyWiki toolmap|https://dynalist.io/d/zUP-nIWu2FFoXH-oM7L7d9DM]] 来自社区的插件整合库，分门别类涵盖了绝大多数插件定制需求，英文\n* [[TiddlyWiki svg 素材库|http://fa5-free-svg.tiddlyspot.com/]]\n* 简单整合了 Roam Research 的[[双向链接方案|https://giffmex.org/stroll/stroll.html]]\n* [[tiddlywikis-collection|https://zhangaz1-pro.github.io/tiddlywikis-collection/]]\n* [[编写剧情游戏|http://snowgoon88.github.io/TW5-extendedit/index_5.1.13.html]]\n\n!! THREE\n* [[\"RegExp in Tiddlywiki\"|http://tw-regexp.tiddlyspot.com/ ]] 包含 Tiddlywiki 中的正则表达式的实际用例。正则表达式是一种使用字符串行来描述复杂搜索模式的方法。\n* [[如何优雅地使用正则表达式（小甲鱼）|https://www.cnblogs.com/LoveFishC/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/]]"},{"title":"直播分享超级标签插件","created":"20230311141502401","creator":"林一二","modified":"20230311141703404","modifier":"林一二","tags":"B站直播 任务","type":"text/vnd.tiddlywiki","text":"结合「筛选器把太微当做数据库」的主题，讲授一个快速录入大量结构化数据的方法。"},{"title":"制作插件源","created":"20211016092559949","creator":"林一二","modified":"20211017074943607","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"首先声明，我们希望将插件源统一起来，这样用户只需要装一个插件源就能搜到所有插件了。不过如果你有 10 个以上自己的插件，可以做一个自己的插件源，并告诉我们将你的插件源添加到 Wiki 模板和中文教程里。\n\n!! 将插件放入 plugins 文件夹并启用\n\n就像安装其它依赖 nodejs API 的插件一样，参考[[修改插件文件夹]]即可。\n\n!! 在 tiddlywiki.info 文件里配置插件源构建流程\n\n参考：\n\n```json\n  \"build\": {\n\t\t\"library\": [\n      \"--makelibrary\",\n      \"$:/UpgradeLibrary\",\n      \"--savelibrarytiddlers\",\n      \"$:/UpgradeLibrary\",\n      \"[prefix[$:/]] -[prefix[$:/plugins/tiddlywiki/]] -[prefix[$:/themes/tiddlywiki/]] -[prefix[$:/languages/]] -[[$:/plugins/tiddlywiki/upgrade]] -[[$:/plugins/tiddlywiki/translators]] -[tag[$:/tags/PluginLibrary]] -[prefix[$:/plugins/kookma]]\",\n      \"recipes/library/tiddlers/\",\n      \"$:/UpgradeLibrary/List\",\n      \"--savetiddler\",\n      \"$:/UpgradeLibrary/List\",\n      \"recipes/library/tiddlers.json\",\n      \"--rendertiddler\",\n      \"$:/plugins/tiddlywiki/pluginlibrary/library.template.html\",\n      \"index.html\",\n      \"text/plain\"\n    ]\n```\n\n然后在 shell 里执行\n\n```sh\ntiddlywiki ${repoFolder} --output ${folderToServe}/library --build library\n```\n\n!! 在自己的Wiki里放入一个插件库条目\n\n以 [[Kookma Plugin Library|$:/config/KookmaPluginLibrary]] 为例，条目内容类似：\n\n```tw5\ncaption: Kookma Plugin Library\ntags: $:/tags/PluginLibrary\ntitle: $:/config/KookmaPluginLibrary\ntype: text/vnd.tiddlywiki\nurl: https://kookma.github.io/TW-PluginLibrary/library/index.html\n\nKookma plugin library is a set of plugins, themes, and scripts, to extend functionality and add new features to Tiddlywiki. For detail information visit the library at [[GitHub|https://github.com/kookma]]. It is recommended to backup your data before installing any plugin, theme, or script. \n\nTo use in other wikis, drag and drop this link to those wikis: [[Kookma Plugin Library|$:/config/KookmaPluginLibrary]]\n```\n\n然后搞一个指向这个条目的链接，例如 `[[Kookma Plugin Library|$:/config/KookmaPluginLibrary]]`，这样用户只要拖这个链接到自己的Wiki里，就安装了这个插件库了。"},{"title":"制作插件源（2）","created":"20220918164405159","modified":"20220918170512545","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"!! Introduce \n\n* 对于构建插件库的方法， 就像启动tiddlywiki一样， 方法有很多， 有简单的也有容易的；\n\n* 在看了各种tiddlywiki插件开发者构建插件库的方法， 虽然方法大都不一样， 但是其原理还是基本一致的； \n\n!! Preview\n\n* ''preview'' https://github.com/oeyoews/neotw/tree/gh-pages\n* ''优点(在我看来)'' 不再需要自己设置''任何环境变量''， 不涉及js代码, 只需几行代码即可搞定，自动构建更新插件库， 不需要手动维护。\n\n!! End\n\n\n希望官方的CPL插件库可以快一点出来， 虽然最近好像没有什么消息\n\n...(WIP)"},{"title":"中文教程站带逛、答疑","created":"20220108061440819","creator":"林一二","modified":"20220108061556732","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"[[欢迎来到太微！]]\n\n`// demo 时间`"},{"title":"中文文档","created":"20220217093924811","creator":"林一二","modified":"20220217093935274","modifier":"林一二","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"[[TiddlyWiki官网|https://tiddlywiki.com/]]和一系列社区提供了太微完善的教程，但访问较为缓慢，不熟悉英文的爱好者请阅读由[[@BramChen|https://github.com/BramChen]]大佬翻译的[[TiddlyWiki 舞 - 官方基础文档简体中文版|https://bramchen.github.io/tw5-docs/zh-Hans/]]"},{"title":"主题与布局样式","created":"20230101081204043","creator":"马不前","modified":"20230429134517223","modifier":"WhiteFall","tags":"插件列表","type":"text/vnd.tiddlywiki","text":"* 字体管理[[FontManager|https://fontmanager.tiddlyhost.com/]]\n* 快捷菜单栏，tiddlywiki/menubar或者xp/quickbar，它可以适配移动端，使移动端更容易使用，在桌面端也是非常好的实用工具，建议安装。\n* 左置开启标签页，xp/leftopentab，开启标签页将在浏览器左边单独显示。\n* 水平故事河[[Horizontal Story River|https://crazko.github.io/krystal/]]\n* Tag词云：TiddlyTools/FilterGenerators/TagCloud\n* 卡片布局(用于短文的模式)[[Muuri|https://burningtreec.github.io/tiddlywiki-muuri/]]\n* jd的作品：CoolMint配色，主页，主题：[[jd(j.d.)]]"},{"title":"资源链接","created":"20211028174840078","creator":"林一二","modified":"20230713073322721","modifier":"马不前","tags":"欢迎来到太微！","type":"text/vnd.tiddlywiki","text":"TiddlyWiki新人小白必备信息（知识链集合与箴言、创建保存全平台软件、常用插件列表）\n\n<<<\n适用于对tiddlywiki感兴趣并决定使用tiddlywiki的小伙伴。\n\n这可能是TiddlyWiki的第一个小游戏：点击 [[tw-2048小游戏|https://tiddly-gittly.github.io/tiddlywiki-game-2048/tw-2048-Gatha.html]] 一起游玩并体验太微的魅力吧！\n<<<\n\n''提问的智慧：'' [[提问的智慧（GitHub）|https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md]]\n\n可以通过已有的例子（比如tiddlywiki xp中的实现）仿写学习或者实现自己需要的功能\n\n\n{{教程链接}}\n\n''其他说明''\n\n* 此条目下包括子条目中，提供的链接一般是外部链接\n* 文字下有蓝色下划线的就代表可以跳转到外部\n* 不同的部署方式加载速度不一样，大部分用github部署，加载速度有点慢，需耐心等待\n* 插件里会出现发布页面和代码两个。正常使用看发布页面就可以\n* 有些没有给链接的，下次更新再补充，基本上都可以在cpl里安装\n* 符号❤️：表示推荐安装"},{"title":"字段到底是什么呢？","created":"20220817154301529","creator":"Miao","modified":"20230603023437843","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"条目字段是成对的`name:value`，许多不同功能的条目字段构成了一个条目（如下面的表格）。字段名称必须是小写字母、数字或是 - (破折号), _ (底线) 与 . (句点)。\n\n>参考条目字段文档[[链接|https://bramchen.github.io/tw5-docs/zh-Hans/#TiddlerFields]]\n\n一个条目的标准字段有：\n\n|!字段名称 |!说明 |\n|`title` |条目的唯一名称 |\n|`text` |条目的内文 |\n|`modified` |条目的最近修改日期与时间 |\n|`modifier` |条目的最近修改者 |\n|`created` |条目的创建日期 |\n|`creator` |条目的创建者 |\n|`tags` |\t条目的标签清单 |\n|`type` |\t条目的内容类型 |\n|`list` |条目的列表，指定一些条目的标题清单|\n|`caption` |除非装了特殊的插件，或者你自己学会了方式来改，不然只显示title。 例如在tab里默认会显示条目的caption |\n\n条目字段，你可以想象成一个个的空位（放东西的木格子），它不仅能够放置文本信息，还能放置除了文本信息之外的内容，即自定义拓展小鱼内容的额外信息（小鱼的鳞片）。\n\n你可以在字段中存放一些信息。不过，它的主要工作不是放内容的。而是''自动化''。比如tags字段，可以使用目录宏`<<Table-of-Contents Macros>>`，通过分析标签生成树状的条目链接。\n\n树状的条目链接即条目的隶属关系是通过打上同名条目的标签实现的。一般来说子条目通常有父条目同名的标签表明子条目属于父条目。\n\n条目-标签这种隶属关系的实现不仅仅是层级之间的隶属关系，而是一个网状的隶属关系，层级的隶属关系只是网状隶属关系的一部分。"},{"title":"字段无法显示在编辑栏中","created":"20230316035845728","creator":"马不前","modified":"20230316040356457","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"最近钓鱼插件大更新了。题目设置在caption中。然后制作了一个更方便的编辑模板，并把caption字段隐藏起来了。\n\n但平时添加条目用到caption字段时，隐藏起来编辑就很不方便了。所以我们需要新建一个条目，标题填`$:/config/EditTemplateFields/Visibility/caption`，里面的内容填`yes`。\n\n类似的，如果其他字段也无法正常显示了，一般也是因为插件隐藏起来了，所以只需要建一个条目，标题写`$:/config/EditTemplateFields/Visibility/xxx`，内容填`yes`。这样xxx字段就会显示了。如果不想显示，那就填no"},{"title":"自定义侧边栏选项卡","created":"20220815045813457","creator":"Miao","modified":"20230516134051754","modifier":"马不前","tags":"太微自身的自定义设置","type":"text/vnd.tiddlywiki","text":"侧边栏对应的条目\n\n* 最近：$:/core/ui/SideBar/Recent\n\n* 打开：$:/core/ui/SideBar/Open\n\n* 工具：$:/core/ui/SideBar/Tools\n\n* 更多：$:/core/ui/SideBar/More\n\n\n删除条目中的$:/tags/SideBar系统标签将会隐藏对应的侧边栏。\n\n可以使用字段：【list-after，条目名】指定在某个侧边栏在指定条目侧边栏的后面。"},{"title":"自定义宏类","created":"20230516132501189","creator":"马不前","modified":"20230516132544890","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"这些是自定义宏操作，可以很方便地处理一些操作，也可用来学习宏。"},{"title":"自定义样式修改类","created":"20230516132005284","creator":"马不前","modified":"20230516132050182","modifier":"马不前","tags":"使太微更易用","type":"text/vnd.tiddlywiki","text":"这些是积累的样式修改经验，可以用来美化太微。"},{"title":"自定义字段内容","created":"20230603031135314","creator":"马不前","list":"基本button代码 变量嵌入 当天减一天 使用set小部件 论坛示例","modified":"20230818051107068","modifier":"WhiteFall","tags":"文本拼接 B站直播","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Bu4y1d79i","text":"这里主要是用筛选器做文本拼接，进行自定义字段内容，并搭配button按钮来新建条目。\n\n先看[[文学编程与TiddlyWiki]]和[[字段到底是什么呢？]]的介绍，有个基本理解。\n\n<$list filter=\"[tag<currentTiddler>]\">\n\n!!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n\n</$list>"},{"title":"自动化","created":"20220221123553270","creator":"林一二","list":"自动化 按条目名称批量操作 快速创建新笔记按钮 批量给图片加标签 批量删除 筛选出“标签≥2个”的表达式 删除未使用的图片 数据库表格 提供自动化聚合整理的能力，让你从更抽象的角度上整理笔记，而不用亲手整理 选择给定tiddler（文件夹）下的所有文件夹及条目 一键操作某标签下的所有条目 一键应用模板 语词集，自动收集条目到一个条目卡片中集中显示","modified":"20230516134403011","modifier":"马不前","tags":"欢迎来到太微！ 自动化","type":"text/vnd.tiddlywiki"},{"title":"总分关系","created":"20221216015600853","creator":"WhiteFall","modified":"20230204072147913","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"关于处理tiddlywiki卡片与卡片之间的总分关系。"},{"title":"最近更新状态","created":"20230115125547524","modified":"20230115133105860","tags":"","type":"text/vnd.tiddlywiki","text":"<ul>\n  <$list filter=\"[!is[system]days[-180]!<currentTiddler>!sort[modified]]\">\n    <li>\n\t\t<$link><$view field=\"title\"/></$link>\n        <$list filter=\"[<currentTiddler>days[-14]]\"> @@color:red;^^新^^@@</$list>\n        <$list filter=\"[<currentTiddler>days[-90]!days[-14]]\"> @@color:black;^^近期^^@@</$list>\n    </li>\n  </$list>\n</ul>"},{"title":"action-listops小工具介绍","created":"20230416135150224","creator":"马不前","modified":"20230425124332959","modifier":"马不前","tags":"B站直播 任务 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV1Wo4y1b7Ss","text":"可以用这个小工具来实现状态标签按钮。具体参见[[视频|https://www.bilibili.com/video/BV1as4y1d7eu]]。\n\n状态标签可以搭配级联在正文里展示更多不同内容。比如图谱或者侧边栏等内容。"},{"title":"ALL IN ONE","created":"20230510141342292","creator":"马不前","modified":"20230912044807274","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"all-in-one一般认为是把学习和工作和任务管理甚至是社交放在一起的工作流程。大部分人都不坚持all-in-one的处理方式，而是不同场景用不同工具。"},{"title":"Autonumbering Headings","text":"/** Inspired by https://zhuanlan.zhihu.com/p/506929317 */\n/** initialize css counter */\n/**如果需要显示从二级标题开始前面加上数字序号，那么需要添加class字段，里面写autonumhead */\n\n\n  .autonumhead .tc-tiddler-body {\n    counter-set: h1 h2 h3 h4 h5 h6\n}\n\n  .autonumhead .tc-tiddler-body > h1 {\n    counter-set: h2\n}\n\n  .autonumhead .tc-tiddler-body > h2 {\n    counter-set: h3\n}\n\n  .autonumhead .tc-tiddler-body > h3 {\n    counter-set: h4\n}\n\n  .autonumhead .tc-tiddler-body > h4 {\n    counter-set: h5\n}\n\n  .autonumhead .tc-tiddler-body > h5 {\n    counter-set: h6\n}\n\n/** put counter result into headings */\n  .autonumhead .tc-tiddler-body > h1:before {\n    counter-increment: h1;\n    content: \n}\n\n  .autonumhead .tc-tiddler-body > h2:before {\n    counter-increment: h2;\n    content: counter(h2) \". \"\n}\n\n  .autonumhead .tc-tiddler-body > h3:before {\n    counter-increment: h3;\n    content: counter(h2) \".\" counter(h3) \" \"\n}\n\n  .autonumhead .tc-tiddler-body > h4:before{\n    counter-increment: h4;\n    content: counter(h2) \".\" counter(h3) \".\" counter(h4) \" \"\n}\n\n  .autonumhead .tc-tiddler-body >  h5:before {\n    counter-increment: h5;\n    content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \" \"\n}\n\n  .autonumhead .tc-tiddler-body > h6:before {\n    counter-increment: h6;\n    content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \" \"\n}","created":"20220705145432783","creator":"FSpark","modified":"20230114150201322","modifier":"马不前","tags":"$:/tags/Stylesheet","type":"text/css"},{"title":"B站直播","created":"20230311141240592","creator":"林一二","modified":"20230530053103394","modifier":"马不前","tags":"社区建设","type":"text/vnd.tiddlywiki","text":"\\define sv-exclude-tags() B站直播 任务 done\n\n每周六晚上9点在B站[[林一二的直播间|http://live.bilibili.com/823307]]有交流会。[[QQ群|社区建设]]里会发腾讯会议链接，可以加入分享自己最近的感想。\n\n在没人分享时，林一二会慢慢分享太微的各种基础功能和用法，并形成录播。\n\n<$macrocall $name=table-dynamic caption=\"待分享的主题列表\" filter=\"[tag[B站直播]tag[任务]]-[tag[done]]\" fields=\"title tags\" class=\"w-100\"/>\n\n<$button>\n\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"xxx\" text=\"\" tags=\"B站直播 任务\" />\n添加新待分享\n</$button>\n\t\n<$macrocall $name=table-dynamic caption=\"已完成的主题列表\" filter=\"[tag[B站直播]!tag[任务]]\" fields=\"title tags video-link\" class=\"w-100\"/>\n\n<$button>\n\t<$action-sendmessage $message=\"tm-new-tiddler\" title=\"xxx\" text=\"\" video-link=\"\"  tags=\"B站直播 done\" />\n添加已完成的直播分享\n</$button>\n\n* 上面内容里，有些是已有条目，在直播时分享了。便不添加done的标签，只加上`b站直播`的标签。当然也能够正常筛选出来。\n* 上面只是列出了常见的直播内容链接，有部分内容没有列出可去[[林一二的b站空间|https://space.bilibili.com/437823/]]里查看。"},{"title":"balloon.css","text":":root {\n  --balloon-color: rgba(16, 16, 16, 0.95);\n  --balloon-font-size: 12px;\n  --balloon-move: 4px; }\n\nbutton[aria-label] {\n  overflow: visible; }\n\n[aria-label] {\n  position: relative;\n  cursor: pointer; }\n[aria-label]:after {\n  opacity: 0;\n  pointer-events: none;\n  transition: all .18s ease-out .18s;\n  text-indent: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  font-weight: normal;\n  font-style: normal;\n  text-shadow: none;\n  font-size: var(--balloon-font-size);\n  background: var(--balloon-color);\n  border-radius: 2px;\n  color: #fff;\n  content: attr(aria-label);\n  padding: .5em 1em;\n  position: absolute;\n  white-space: nowrap;\n  z-index: 10; }\n[aria-label]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-top-color: var(--balloon-color);\n  opacity: 0;\n  pointer-events: none;\n  transition: all .18s ease-out .18s;\n  content: \"\";\n  position: absolute;\n  z-index: 10; }\n[aria-label]:hover:before, [aria-label]:hover:after, [aria-label][data-balloon-visible]:before, [aria-label][data-balloon-visible]:after, [aria-label]:not([data-balloon-nofocus]):focus:before, [aria-label]:not([data-balloon-nofocus]):focus:after {\n  opacity: 1;\n  pointer-events: none; }\n[aria-label]:not([data-balloon-pos]):after {\n  bottom: 100%;\n  left: 50%;\n  margin-bottom: 10px;\n  transform: translate(-50%, var(--balloon-move));\n  transform-origin: top; }\n[aria-label]:not([data-balloon-pos]):before {\n  bottom: 100%;\n  left: 50%;\n  transform: translate(-50%, var(--balloon-move));\n  transform-origin: top; }\n[aria-label]:not([data-balloon-pos]):hover:after, [aria-label]:not([data-balloon-pos])[data-balloon-visible]:after {\n  transform: translate(-50%, 0); }\n[aria-label]:not([data-balloon-pos]):hover:before, [aria-label]:not([data-balloon-pos])[data-balloon-visible]:before {\n  transform: translate(-50%, 0); }\n[aria-label].font-awesome:after {\n  font-family: FontAwesome, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; }\n[aria-label][data-balloon-break]:after {\n  white-space: pre; }\n[aria-label][data-balloon-break][data-balloon-length]:after {\n  white-space: pre-line;\n  word-break: break-word; }\n[aria-label][data-balloon-blunt]:before, [aria-label][data-balloon-blunt]:after {\n  transition: none; }\n[aria-label][data-balloon-pos=\"up\"]:after {\n  bottom: 100%;\n  left: 50%;\n  margin-bottom: 10px;\n  transform: translate(-50%, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up\"]:before {\n  bottom: 100%;\n  left: 50%;\n  transform: translate(-50%, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up\"]:hover:after, [aria-label][data-balloon-pos=\"up\"][data-balloon-visible]:after {\n  transform: translate(-50%, 0); }\n[aria-label][data-balloon-pos=\"up\"]:hover:before, [aria-label][data-balloon-pos=\"up\"][data-balloon-visible]:before {\n  transform: translate(-50%, 0); }\n[aria-label][data-balloon-pos=\"up-left\"]:after {\n  bottom: 100%;\n  left: 0;\n  margin-bottom: 10px;\n  transform: translate(0, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up-left\"]:before {\n  bottom: 100%;\n  left: 5px;\n  transform: translate(0, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up-left\"]:hover:after, [aria-label][data-balloon-pos=\"up-left\"][data-balloon-visible]:after {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"up-left\"]:hover:before, [aria-label][data-balloon-pos=\"up-left\"][data-balloon-visible]:before {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"up-right\"]:after {\n  bottom: 100%;\n  right: 0;\n  margin-bottom: 10px;\n  transform: translate(0, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up-right\"]:before {\n  bottom: 100%;\n  right: 5px;\n  transform: translate(0, var(--balloon-move));\n  transform-origin: top; }\n[aria-label][data-balloon-pos=\"up-right\"]:hover:after, [aria-label][data-balloon-pos=\"up-right\"][data-balloon-visible]:after {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"up-right\"]:hover:before, [aria-label][data-balloon-pos=\"up-right\"][data-balloon-visible]:before {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"down\"]:after {\n  left: 50%;\n  margin-top: 10px;\n  top: 100%;\n  transform: translate(-50%, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down\"]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-bottom-color: var(--balloon-color);\n  left: 50%;\n  top: 100%;\n  transform: translate(-50%, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down\"]:hover:after, [aria-label][data-balloon-pos=\"down\"][data-balloon-visible]:after {\n  transform: translate(-50%, 0); }\n[aria-label][data-balloon-pos=\"down\"]:hover:before, [aria-label][data-balloon-pos=\"down\"][data-balloon-visible]:before {\n  transform: translate(-50%, 0); }\n[aria-label][data-balloon-pos=\"down-left\"]:after {\n  left: 0;\n  margin-top: 10px;\n  top: 100%;\n  transform: translate(0, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down-left\"]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-bottom-color: var(--balloon-color);\n  left: 5px;\n  top: 100%;\n  transform: translate(0, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down-left\"]:hover:after, [aria-label][data-balloon-pos=\"down-left\"][data-balloon-visible]:after {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"down-left\"]:hover:before, [aria-label][data-balloon-pos=\"down-left\"][data-balloon-visible]:before {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"down-right\"]:after {\n  right: 0;\n  margin-top: 10px;\n  top: 100%;\n  transform: translate(0, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down-right\"]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-bottom-color: var(--balloon-color);\n  right: 5px;\n  top: 100%;\n  transform: translate(0, calc(var(--balloon-move) * -1)); }\n[aria-label][data-balloon-pos=\"down-right\"]:hover:after, [aria-label][data-balloon-pos=\"down-right\"][data-balloon-visible]:after {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"down-right\"]:hover:before, [aria-label][data-balloon-pos=\"down-right\"][data-balloon-visible]:before {\n  transform: translate(0, 0); }\n[aria-label][data-balloon-pos=\"left\"]:after {\n  margin-right: 10px;\n  right: 100%;\n  top: 50%;\n  transform: translate(var(--balloon-move), -50%); }\n[aria-label][data-balloon-pos=\"left\"]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-left-color: var(--balloon-color);\n  right: 100%;\n  top: 50%;\n  transform: translate(var(--balloon-move), -50%); }\n[aria-label][data-balloon-pos=\"left\"]:hover:after, [aria-label][data-balloon-pos=\"left\"][data-balloon-visible]:after {\n  transform: translate(0, -50%); }\n[aria-label][data-balloon-pos=\"left\"]:hover:before, [aria-label][data-balloon-pos=\"left\"][data-balloon-visible]:before {\n  transform: translate(0, -50%); }\n[aria-label][data-balloon-pos=\"right\"]:after {\n  left: 100%;\n  margin-left: 10px;\n  top: 50%;\n  transform: translate(calc(var(--balloon-move) * -1), -50%); }\n[aria-label][data-balloon-pos=\"right\"]:before {\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-right-color: var(--balloon-color);\n  left: 100%;\n  top: 50%;\n  transform: translate(calc(var(--balloon-move) * -1), -50%); }\n[aria-label][data-balloon-pos=\"right\"]:hover:after, [aria-label][data-balloon-pos=\"right\"][data-balloon-visible]:after {\n  transform: translate(0, -50%); }\n[aria-label][data-balloon-pos=\"right\"]:hover:before, [aria-label][data-balloon-pos=\"right\"][data-balloon-visible]:before {\n  transform: translate(0, -50%); }\n[aria-label][data-balloon-length=\"small\"]:after {\n  white-space: normal;\n  width: 80px; }\n[aria-label][data-balloon-length=\"medium\"]:after {\n  white-space: normal;\n  width: 150px; }\n[aria-label][data-balloon-length=\"large\"]:after {\n  white-space: normal;\n  width: 260px; }\n[aria-label][data-balloon-length=\"xlarge\"]:after {\n  white-space: normal;\n  width: 380px; }\n@media screen and (max-width: 768px) {\n  [aria-label][data-balloon-length=\"xlarge\"]:after {\n                      white-space: normal;\n                      width: 90vw; } }\n[aria-label][data-balloon-length=\"fit\"]:after {\n  white-space: normal;\n  width: 100%; }\n\n\n/* Customization -------------- */\n\n/* Add this to your CSS */\n.tooltip-red {\n  --balloon-color: red;\n}\n\n.tooltip-big-text {\n  --balloon-font-size: 20px;\n}\n\n.tooltip-slide {\n  --balloon-move: 30px;\n}","created":"20210415045923204","creator":"WhiteFall","modified":"20230505125836968","modifier":"WhiteFall","tags":"Tooltips悬浮工具提示","type":"text/css"},{"title":"benwebber插件源","created":"20230515132309567","creator":"林一二","modified":"20230530052601456","modifier":"马不前","tags":"","type":"text/vnd.tiddlywiki","text":"之后可以分享一些别的插件源。\n\n[[benwebber插件源|https://benwebber.github.io/tiddlywiki-plugins]]已经导入CPL。\n\n上面的插件源导入过程已经在[[插件源机制和导入独立插件源到CPL的方法]]视频里演示了，就不再加`b站直播`的标签了，免得重复。"},{"title":"COUNTS","created":"20230630170544023","creator":"马不前","modified":"20230630170645905","modifier":"马不前","tags":"","text":"1\n<!-- 演示完成次数条目所用，请勿删除。 -->"},{"title":"CSV表格->WikiText表格","created":"20221127113012830","creator":"WhiteFall","modified":"20230516132648109","modifier":"马不前","tags":"自定义宏类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：tobibeer\n* 描述：CSV表格粘贴转换为WikiText表格。\n* 使用方法：新建一个条目，按照下列提示内容创建条目。再新建一个条目，内容填`<$convertable/>`，然后保存。你将看到输入框和按钮，将CSV表格粘贴到输入框，点按钮即可转换为WikiText表格。\n\n\n```\n条目名称：tobibeer/convertable.js\n条目类型：application/javascript\n字段：\n\tmodule-type: widget\n```\n\n\n<$let selected-tiddler=\"tobibeer/convertable.js\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>\n"},{"title":"Echart（脑图）局部视图","created":"20220817222315448","creator":"Miao","modified":"20230516134630939","modifier":"马不前","tags":"Echarts可视化插件 编程知识类","type":"text/vnd.tiddlywiki","text":"! TheBrian的局部视图\n\n!! 局部视图\n\n[img[TheBrian视图4.png]]\n\n\nTheBrain 各参数的用法 （来自林一二的QQ频道）：\n\n\"\"\"\n参数：focussedTiddler 是图的中央节点\n参数：levels 指定图向外展开几级\n参数：graphTitle 指定右下角显示的标题\n参数：aliasField 用于指定展示为节点标题的字段，例如 caption\n参数：excludeFilter 用于排除部分节点\n\"\"\"\n\n!! 目录功能的条目\n\n[img[TheBrian视图3.png]]"},{"title":"Echarts可视化插件","created":"20220108060639501","creator":"林一二","modified":"20220108102012271","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"\n<$echarts $tiddler=\"$:/plugins/Gk0Wk/echarts/addons/TagCloud.js\"/>\n\n<$echarts $tiddler=\"TheBrain2level.js\"/>\n\n[[https://tiddly-gittly.github.io/tw-echarts/]]\n"},{"title":"File Uploads：太记的引用外部文件插件","created":"20230612092721604","creator":"WhiteFall","modified":"20230814002943989","modifier":"WhiteFall","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"(待补充)\n\n如果在Webdav服务器的部署下我们可以使用FileUploads、File Uploads: PUT插件实现在本地保存图片的功能，如果要保存其它类型的文件，可以通过修改Filter实现。\n\n需要在webdav服务器、github、nodejs环境下使用FileUploads及子插件并配置好相关的设置。\n\n在使用图片的时候程序会判断大于100k时会自动保存到配置好的文件夹中。"},{"title":"FreeLinks：潜在的中文驼峰语法插件","created":"20230612093104003","creator":"WhiteFall","modified":"20230612093414267","modifier":"WhiteFall","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"从两个角度看：\n\n1.自动筛选列表，列表中的条目，条目名可作为驼峰链接\n2.条目标记为可识别，条目中的字段标记，标记后改条目名可作为驼峰链接。\n"},{"title":"FSpark","created":"20230114150527813","creator":"马不前","modified":"20230114150527813","modifier":"马不前","type":"text/vnd.tiddlywiki"},{"title":"Gallary","created":"20230107061654711","creator":"马不前","modified":"20230904042219703","modifier":"马不前","tags":"","type":"text/vnd.tiddlywiki","text":"<!--\n<center>\n\t<div style=\"color:grey\">点击图片放大(需要等待一会儿)</div>\n\t<<FancyboxL gallary-1.png group:\"tw gallary\">>\n\t\t<<FancyboxL gallary-2.png group:\"tw gallary\">>\n</center>\n-->\n\n<center>\n\t<div style=\"color:grey\">点击图片放大</div>\n<<fbox \"\"\"\nhttps://cdn.jsdelivr.net/gh/tiddly-gittly/TiddlyWiki-Chinese-Tutorial@master/tiddlers/gallary-1.png\nhttps://cdn.jsdelivr.net/gh/tiddly-gittly/TiddlyWiki-Chinese-Tutorial@master/tiddlers/gallary-2.png\n\"\"\"\ncaption: \"xxx\"\nwidth: 256>>\n</center>\n\n"},{"title":"Get Status Error: XMLHttpRequest","created":"20230319021321283","creator":"马不前","modified":"20230319125928656","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"会有下面的报错提示`Get Status Error: XMLHttpRequest 错误代码: 404`和`简要条目清单提取错误: XMLHttpRequest 错误代码: 404`以及类似的`syncer-browser-tiddlyweb - 2023年03月19日 10:07`，显示为tiddlyweb插件出了问题。\n\n原因：可能是在发布HTML的时候，没有禁用掉nodejs保存用的tiddlyweb插件吧。\n\n禁用tiddlyweb插件再git推上去，就可以了。\n\n再然后需要把`$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/tiddlyweb`文件删除。然后移除太记里的tiddlywiki，但不要删除文件夹。不然就没了。再重新添加一下文件夹，导入本地wiki。不然会一直处于单文件版本。\n\n上面的操作还不能解决的话，就新建一个空wiki，把`tiddlywiki.info`文件里的内容复制，然后复制到出问题的wiki中的`tiddlywiki.info`里去，替换原有的文件。也就是更新`tiddlywiki.info`这个文件。\n\n因为太记里旧的wiki文件不会自动更新配置。一些新的配置需要手动更新。从新的模板里复制过去更新。"},{"title":"Git可视化工具","created":"20230517115031075","creator":"WhiteFall","modified":"20230517115305719","modifier":"WhiteFall","tags":"自动化","type":"text/vnd.tiddlywiki","text":"* Source Tree ：https://www.sourcetreeapp.com/\n* Github Desktop ：https://desktop.github.com/"},{"title":"GrowthK2S：生长知识结构空间","created":"20230204065857901","creator":"WhiteFall","modified":"20230912042506361","modifier":"WhiteFall","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"GrowthK2S：生长知识结构空间\n\n> 专注于内容，不拘泥于工具。我的一个小玩具。应用数学、逻辑、程序设计思想等等构建一个笔记结构空间。\n> \n> 任何笔记系统，似乎都有一个共同的目标，减熵、降低混乱度、有序和各种结构化，表现为利于快速查找和使用。\n> 在不断增长的同时降低或至少保持整体的混乱度。引入笔记系统的熵。\n> 笔记的意义是复用，用起来。单纯为了记笔记而做笔记，从这个方面看。不实用，我的感觉是笔记是一种辅助工具或手段。以这个视角看，若可以不写笔记学会某事，比如英语，那笔记不写也可以。\n\nGrowthK2S：生长知识结构空间，简称生长结构。主要解决了知识体系先有固定框架带来的问题。固定框架或者分类实际难度较大、不灵活，一旦定下框架就很难修改，就像外骨骼昆虫，超过外骨骼的范围就要退一次外壳，标签和分类法都是单维的。但若像植物一样，像树一样。慢慢生长，随着输入产生结构然后修改结构适应环境，那么一切问题都将迎刃而解。\n\n基本结构，空间集合中包含元素，元素（变量）有self、内容、向量/方法。内容是一个元素集合，不是集合元素。pub type:T,U this Ti p=[D, R] 这一个部分就是self。目前引入部分集合运算（超子集）。后面会越来越多的加入学过的数学知识。比如线代和离散数学。\n\n# 必要条件：双向链接 + 文内查找。\n# 适用范围：适合分类或框架不明的知识体系，还有碎片知识的系统化。未来支持结构明确知识体系的灵活使用以及附加笔记的存储复用。\n\n对比先有结构后归纳放置内容，先有内容再生成结构要轻松很多。从第一个元素开始，由于元素的主题本身自带的属性和特征致使相关性与结构就开始显现，元素越多，结构越合理。\n\n我把笔记增长与不断修改的过程称为生长，在这个过程中，你不必纠结现在写的文章该归于那一个类别，灵感来时，想一个差不多的名字，然后立刻开始记录，写完放着就是，不过，这只是一个雏形，后续需要不断的修改。随着对此元素主题了解的越来越深入的同时也伴随着各种元素数量和内容的丰富，加之不断的修改优化元素，那么结构也就越来越完善和清晰。\n\n回答：面对超碎片化的知识和文字信息，你会如何整理他们？使他们井井有条而且用极小的代价修改他们的框架？\n\n此K2S本质上是一个不用计算机执行的类似形式的程序，这个程序可以类比数学计算的草稿纸（辅助工具），最终想要达到目的，还需要参与数学运算的主体——人来完成。就像中国的科学家凭借头脑和制作的工具计算机完成氢弹的研制一样。简言之：软件是载体，你才是核心。\n\n\n这是一种思想模型，旨在尽量与软件无关，主要关注内容。我称之为面向内容（面向对象的无端联想）。我见过太多人执着于学习软件带来的新奇与愉悦感而忘记自己学习软件的初衷是为了内容。\n\n项目地址：GrowthK2S · Github\n"},{"title":"Hello, TiddlyWiki","created":"20230901061523927","creator":"WhiteFall","modified":"20230903002442704","modifier":"WhiteFall","tags":"Wiki编程的定义","text":"\\procedure main()\n<$text text=\"Hello, TiddlyWiki\">\n\\end\n\n\\procedure main1()\n<$set name=\"Hi\" value=\"Hello, TiddlyWiki\">\n\t<$text text=<<Hi>>>\n</$set>\n\\end\n\n\n<<main>>\n\n```html\n\\procedure main()\n<$text text=\"Hello, TiddlyWiki\">\n\\end\n\n<<main>>\n```\n\n定义方法，名为main的进程，并输出“Hello, TiddlyWiki”。\n然后使用`<<main>>`调用进程。\n\n---\n\n<<main1>>\n\n```html\n\\procedure main1()\n<$set name=\"Hi\" value=\"Hello, TiddlyWiki\">\n\t<$text text=<<Hi>>>\n</$set>\n\\end\n\t\n<<main1>>\n```\n\n定义方法，名为main的进程，定义变量Hi，值为\"Hello, TiddlyWiki\"，然后输出结果，最后使用`<<main>>`调用进程。\n"},{"title":"Help","created":"20230712123209524","creator":"WhiteFall","list-after":"$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu","modified":"20230713032518634","modifier":"WhiteFall","tags":"$:/tags/SideBar","text":"\\define toc-heading(caption,body)\n<$reveal type=\"nomatch\" state=<<qualify \"$:/state/toc/$caption$\">> text=\"show\">\n<$button set=<<qualify \"$:/state/toc/$caption$\">> setTo=\"show\" class=\"tc-btn-invisible\">{{$:/core/images/right-arrow}} $caption$\n</$button>\n</$reveal>\n<$reveal type=\"match\" state=<<qualify \"$:/state/toc/$caption$\">> text=\"show\">\n<$button set=<<qualify \"$:/state/toc/$caption$\">> setTo=\"hide\" class=\"tc-btn-invisible\">{{$:/core/images/down-arrow}} $caption$\n</$button>\n</$reveal>\n<$reveal type=\"match\" state=<<qualify \"$:/state/toc/$caption$\">> text=\"show\" retain=\"yes\" animate=\"yes\">\n\n$body$\n\n</$reveal>\n\\end\n<div class=\"tc-table-of-contents\">\n\n# [[Introduction]]\n\n# [[创建知识库]]\n## <<toc-heading \"创建自己的知识库\" \"\n## [[TiddlyWiki简介]]\n## [[下载和安装]]\n## [[太微的基本介绍]]\n###[[概念：模板、文件、条目]]\n###[[太微的布局和控制面板]]\n###[[太微的查看模式]]\n###[[配置新的主题配色]]\n###[[中文插件库的安装使用]]\n###[[不同功能多样性的太微模版]]\n\">>\n# [[开始使用知识库]]\n## <<toc-heading \"开始使用TiddlyWik知识库\" \"\n## [[创建第一个条目笔记]]\n###[[指定标题]]\n###[[段落格式]]\n###[[硬换行内容块]]\n###[[格式化字体]]\n###[[段落格式]]\n####[[项目列表与引述块的简单介绍]]\n####[[水平分隔线、破折号、数学公式、代码块]]\n####[[自定义样式段落块、类型段落块]]\n###[[WikiText表格]]\n###[[书写与显示文本]]\n###[[WikiText的解析器模式]]\n###[[删除单个条目]]\n## [[“文件目录”侧边栏]]\n## [[筛选器与双链功能]]\n###[[嵌入和链接（双链，重要）]]\n###[[嵌入、链接宏筛选器以及小部件之间的异同]]\n###[[图像的使用]]\n###[[条目的批量操作]]\n###[[嵌入在线视频]]\n###[[常用的筛选器表达式]]\n\">>\n# [[构建笔记系统]]\n## <<toc-heading \"如何使用TiddlyWiki构建笔记系统？\" \"\n## [[时间序列记录法]]\n## [[主题渐构笔记法]]\n## [[关系图谱或图数据结构]]\n## [[线性写作的形式]]\n## [[渐进写作（增量写作）]]\n## [[自动化无压记录]]\n## [[随手记录，动态生成]]\n## [[卡片笔记写作法]]\n## [[PARA个人知识管理]]\n## [[书籍与书籍的分卷]]\n## [[分享和发布功能]]\n## [[数据安全性与备份]]\n\">>\n#[[拓展新的功能与特性]]\n## <<toc-heading \"为知识库拓展新的功能与特性\" \"\n## [[Markdown插件]]\n## [[反向链接插件]]\n## [[TOC自动化目录插件]]\n## [[回收站插件]]\n## [[随机漫游条目与快照插件]]\n## [[与SuperMemo互动]]\n\">>\n#[[帮助 & 更多]]\n## <<toc-heading \"Help & More\" \"\n## [[桌面端Timimi的安装使用]]\n## [[配置太微的中文语言]]\n\">>\n</div>\n"},{"title":"HTML与文件夹的转换","created":"20220815035633469","creator":"Miao","modified":"20231001121936318","modifier":"WhiteFall","tags":"编程知识类","type":"text/vnd.tiddlywiki","text":"如果你想要换种方式使用，比将HTML文件变成文件夹然后用NodeJS版本太微打开，可以使用nodejs搭配一条命令完成转换。\n\n> 在tidgi太记中你可以直接导入wiki.html文件，TidGi会自动处理变成文件夹形式的WIKI。\n\n需要环境：NodeJS的安装与NodeJS版TiddlyWiki的安装。\n\n# 安装nvm（nodejs版本管理器）在链接：https://github.com/coreybutler/nvm-windows/releases  下载nvm-setup.zip，安装。\n# 打开命令行或者powershell输入：`nvm install lts` 安装最新的nodejs长期支持版。\n# 安装nodejs版TiddlyWiki，在命令行中输入：`npm install -g tiddlywiki` 等待安装成功\n\n\nTiddlyWiki单文件转文件夹命令：\n\n```sh\ntiddlywiki  --load  ./mywiki.html(你的wiki文件)  --savewikifolder  ./mywikifolder(你的wiki文件夹)\n```\n\nTiddlyWiki文件夹转单文件命令:\n\n使用Version v0.8.0-prerelease9最新版的TidGi，将wiki文件夹添加到太记中，然后使用太记顶部的Wiki菜单栏中的“导出整个Wiki为HTML存入文件夹”功能，快速实现转换。\n\n```sh\ntiddlywiki  ./mywikifolder(你的wiki文件夹)  --rendertiddler  '$:/core/save/all'  mywiki.html(你的wiki文件)  text/plain\n```\n"},{"title":"in-Tag-tree-of插件介绍","created":"20230416134803647","creator":"马不前","modified":"20230425124054028","modifier":"马不前","tags":"B站直播 任务 done","type":"text/vnd.tiddlywiki","video-link":"https://www.bilibili.com/video/BV14s4y1A7vH","text":"这个插件应该比kin插件要快。"},{"title":"Introduction","created":"20230713021321773","creator":"WhiteFall","modified":"20230713031945422","modifier":"WhiteFall","tags":"help","text":"! TiddlyWiki Help\n\n太微比普通的笔记软件拥有更加强大的灵活性（这种灵活性是需要知识来支撑）。太微就像《果宝特攻》里面的机甲，所有的功能（包括更改外观）都可以通过安装、卸载配置模块（插件）实现。太微同时也是文档与软件一体化工具。普通软件修改外观等于几乎打碎整个UI重做。在太微中最简的使用方式是仅在桌面端通过edge打开TiddlyStow页面，选一个太微模板就可以使用记录笔记或日志，数据会保存在本地。\n\n对我来说，我喜欢主动性加各种对条目的整理与使用方式、思考、组织和检索方式。太微不适合收集信息，它只适合你去手动整理自己得到的信息，然后把它转换为自己的知识。这是一个非常重要的过程。而我喜欢这个过程。因为太微正如数学题未得出答案之前有很多可能性，我需要的是其中的一个确定的答案。在大家的共同努力下，花费了许多时间和精力制作了这篇线性指南，旨在以内容为中心、书写文本与显示文本的美观容易阅读、简化原本需要几个月的学习时间成本、授之以渔的自主学习策略（除非你用的到，否则不要轻易的增加需求）。\n\n我们都知道信息和知识是完全不同的。信息只是在神经元之间流转了一遍，然后就存到浅层记忆区了，如果后面不反复刺激的话，甚至还会被自动修剪掉。然而知识是神经元的连接塑性。而知识的学习需要的是主动性，主动的获取某些知识，并不断加强对它的训练。就像学骑自行车一样，一旦掌握某项知识，可能一辈子都忘不掉。太微的【条目】正是提供了这一种对知识整理整合的载体。每一个条目都可以看做一个知识卡片，可以容纳非常丰富的信息，并且他们可以互相属于、链接。你可以在这些互相管理的“知识卡片”中发现知识。同样在不断整理它们的时候，你也会在这个过程不断思考逐渐进步。\n\n有人说TiddlyWiki真的太难了，是的，因为它的功能比一般笔记软件更丰富但功能使用上比一般软件复杂，比程序设计语言简单。要是说没有简单使用的方式，这个观点持保留意见。比如markdown有的功能TiddlyWiki的WIkiText都有，MarkDown没有的功能WikiText也有。如果你感兴趣，这篇文章能够大概的让你了解并简单或进一步的使用TiddlyWiki。（这比之前要简单很多很多）\n\n\n想看看比较惊艳的太微实例嘛？点击链接查看在线部署的太微：\n\n* https://oeyoew.fun/\n* 🤓🌱 学习者的数字花园 — 记录我的学习与思考 (pimgeek.com)\n* https://tritarget.org/\n* https://xememex.com/ethicsatwes/\n* https://tiddlymemo.org/manual/zh-Hans\n\n\nhttps://help.obsidian.md/Home\n"},{"title":"JavaScript","created":"20211011135322194","creator":"林一二","modified":"20230603021527802","modifier":"马不前","tags":"太微原理","type":"text/vnd.tiddlywiki","text":"JS 是一门世界范围内都很流行的常用程序设计语言，可以在 [[MDN 官方 JavaScript 教程|https://developer.mozilla.org/zh-CN/docs/Web/JavaScript]]里学习怎么用 JS 扩展太微的能力。也有很多插件开始用 [[TS|https://www.tslang.cn/docs/home.html]] 来写了。\n\n太微本身就是用 JS 写的，所以 WikiText 等功能本质上就是对 JS 能力的调用。可以阅读[[WikiText与JavaScript的交互]]等教程来简单了解 WikiText 与 JS 的关系，更深入的了解需要阅读太微源码中的 [[parser|https://github.com/Jermolene/TiddlyWiki5/tree/master/core/modules/parsers]] 部分，并对编译原理有基本的了解才行。<<fnote \"删除基础知识的标签，而放到太微原理那边去。\">>"},{"title":"JavaScript调用WikiText动作微件","created":"20220114073720842","creator":"林一二","modified":"20230901023328264","modifier":"WhiteFall","tags":"WikiText与JavaScript的交互","type":"text/vnd.tiddlywiki","text":"!! 调用带参数的动作微件（Action Widget）\n\n```js\n$tw.rootWidget.invokeActionString('<$action-setfield $tiddler=\"testTitle\" testField=\"1\"/>')\n```\n\n!! 直接调用事件\n\n```js\n$tw.rootWidget.dispatchEvent({ type: xxxx });\n```\n"},{"title":"jd(j.d.)","created":"20230204062308443","creator":"WhiteFall","modified":"20230204062545522","modifier":"WhiteFall","tags":"","type":"text/vnd.tiddlywiki","text":"主页：http://j.d.tiddlyspot.com/\n\ngithub：https://github.com/jdjdjdjdjdjd/TW5-JD-Palettes\n\ntw配色：http://j.d.palette.tiddlyspot.com/\n\nhttp://j.d.material.tiddlyspot.com/"},{"title":"Jeremy来访","created":"20230520113144773","creator":"林一二","modified":"20230610125038165","modifier":"林一二","tags":"B站直播 任务","type":"text/vnd.tiddlywiki","text":"[[杰里米·拉斯顿]]来与大家打招呼。\n\n待介绍的现状\n\n# 中文社区QQ群近千人，大都来自知乎和B站\n# 太记一千多star\n# 群机器人，用太记上的中文教程作为数据库\n\n待问的问题：\n\n# 如何看待把太微比作操作系统、主要推荐发行版的观点。\n# 当时为啥做了 NodeJS wiki？\n# Wikitext 与其它 Wikitext 的兼容度，能引进一些markdown语法吗？\n# 最近生活、健康和收入如何，退休了吗？\n# TiddlyWeb 等商业化公司如何了？\n# 插件源的进度，是不是没空开发，还有哪些没空开发的方向？\n# 最近主要打算往哪些方向发力开发。\n# 如何看待 AI，有什么想和太微结合的。\n# 性能如何进一步提高？有什么可行的办法吗？比如依赖太记这一类桌面版软件？\n# 故事河的设计是怎么想出来的，未来有打算改变吗？能否采取一些更便利的交互方式？\n# 浏览太微类网站时，不少人会觉得重复浏览条目，从而浪费时间或者浪费注意力，对这一点怎么看呢？\n# 如何让太微更简单地上手？使用高级筛选器语法功能时如何更简单便利？\n# 如何实现跳转到条目指定位置，作为普遍性的用法，比标题链接更方便？\n# 如何用tiddlywiki来进行知识管理，使tiddlywiki成为第二大脑？\n# 有什么想和中文社区的用户说的。\n\n\n\n有时间可以问下。\n\n英文版，采用deepl翻译\n\n<<details label:\"English\" src:\"# How do you feel about the idea of comparing tiddlywiki to an operating system, the main recommended distribution.\n# Why did you make a NodeJS wiki at that time?\n# How compatible is Wikitext with other Wikitext, can you introduce some markdown syntax?\n# How's life, health and income these days, retired?\n# How are commercial companies like TiddlyWeb doing?\n# Progress on the plugin source, is there no time to develop it, and what are the other directions you haven't had time to develop?\n# What are the main areas of development you are planning to work on these days.\n# What do you think about AI and what do you want to combine with tiddlywiki.\n# How can performance be further improved? Are there any possible solutions? Like relying on desktop versions of software like tidgi?\n# How did you come up with the design of Story River and are there any plans to change it in the future? Could some more convenient ways of interaction be adopted?\n# When browsing tiddlywiki websites, many people find it a waste of time or attention to go through the entries repeatedly, what do you think about this?\n# How can one make tiddlywiki easier to use? How can the advanced filter syntax function be made easier to use?\n# How can we make it easier to jump to an entry's specified location as a general use than a title link?\n# How to use tiddlywiki for knowledge management and make tiddlywiki a second brain?\n# Anything you'd like to say to the Chinese community users.\">>\n\n提到的网站：\n\nhttps://jermolene.com/mimic/index.html\n\nhttps://tiddlywiki.com/alltiddlers.html"},{"title":"Macro_内嵌卡片","code-body":"yes","created":"20230512100704406","creator":"WhiteFall","modified":"20230516133027033","modifier":"马不前","tags":"在条目中嵌入卡片风格的条目","type":"text/vnd.tiddlywiki","text":"\\define .card(tiddler)\n<div title=$tiddler$ class=\"mtransclude mcard\"\n    style=\"font-size: .8em;padding: 8px;border-radius: 8px;font-size: 0.9em;box-shadow: #cbcbcb 2px 2px 6px 1px;/*transition: box-shadow 400ms ease-in-out;*/\">\n    <h2 style=\"display: flex;margin-top: 0;\">\n        <$link to=$tiddler$ />\n        <$button tooltip=\"编辑此条目\" style=\"font-size: .8em;vertical-align: middle;\" class=\"tc-btn-invisible\"\n            message=\"tm-edit-tiddler\" param=$tiddler$>\n            <$transclude tiddler=\"$:/core/images/edit-button\" mode=\"inline\" />\n        </$button>\n    </h2>\n    <$transclude tiddler=$tiddler$ mode=\"block\" />\n</div>\n\\end"},{"title":"Mermaid插件","created":"20220218053141346","creator":"林一二","modified":"20220218053201043","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"[[Mermaid-TW5|https://efurlanm.github.io/mermaid-tw5.html]]"},{"title":"Multi-column-dropdown","text":"\\define sidebarbreakpoint()\n<$text text={{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}/>\n\\end\n\n<pre>\n/*\n * Multi-column-dropdown\n * https://wikilabs.github.io/editions/multicol-dropdown/\n * 对源代码做了修改（修复）：\n * 1. 限制了下拉菜单及其背景颜色的作用域。（源代码改变了搜索下拉菜单的背景，且会造成主题的兼容性问题）\n * 2. 对字段选择器下拉菜单的最大宽度做了限制，以获得更好的浏览体验。\n */\n\n\n@media (min-width: <<sidebarbreakpoint>>) {\n\n  .tc-block-dropdown.tc-block-tags-dropdown,\n  .tc-block-dropdown.tc-edit-type-dropdown {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .tc-block-tags-dropdown {\n    min-width: 900px;\n    <$reveal state=\"$:/palette\" type=\"match\" text=\"$:/palettes/Vanilla\">\n    background-color: #eee;\n    </$reveal>\n    <$reveal default=\"yes\" type=\"match\" text={{{[{$:/_sq/Stories/Story2StoryList!!list}length[]match[0]then[no]] ~[{$:/config/_sq/Stories/story2}]}}}>\n    /* Compatible with $:/plugins/sq/Stories */\n    min-width: 460px;\n    margin-left: -45px;\n    </$reveal>\n  }\n\n  .tc-dropdown-item {\n    flex: 1 0 5%;\n  }\n\n  .tc-block-dropdown.tc-block-tags-dropdown a,\n  .tc-block-dropdown.tc-edit-type-dropdown a {\n    flex: 1 0 calc(15% / 1);\n  }\n\n  .tc-edit-type-dropdown {\n    max-width: 650px;\n    <$reveal state=\"$:/palette\" type=\"match\" text=\"$:/palettes/Vanilla\">\n    background-color: #f5f5f5;\n    </$reveal>\n  }\n\n}\n</pre>","created":"20221126024728414","creator":"WhiteFall","modified":"20221126140821842","modifier":"WhiteFall","tags":"标签多栏选择","type":"text/css"},{"text":"[\n    {\n        \"text\": \"http://www.tiddlytools.com/\\n\\n$:/macros/sk/ColumnCalc.js\\n\\n```\\n    <<ColumnCalc tableID function startrow endrow all >>\\n```\\n\\n    where:\\n\\n* tableID is the ID tag assigned to the table `<table id=\\\"myTable>` This allows the use of multiple tables in the same tiddler\\n*        function is a keyword that specifies the type of calculation to perform:\\n**            total or sum or no param<br>adds up values for cells above it in the column\\n**            count<br>number of non-empty cells in column\\n**            average or avg<br>average of cells in column (i.e., total/count)\\n** min or minimum<br> the lowest number within the range\\n** max or maxium<br> the highest number within the range\\n*        startrow,endrow (optional)<br>specifies a ONE-based range of rows for limiting the calculation. Use negative numbers to specify an offset from the current row (e.g., <<calc sum 3 5>> adds up rows 3, 4 and 5, while <<calc sum 1 -1>> adds up all numbers in the column excluding the current row (i.e., the same as the default if no startrow/endrow params are specified)\\n*        all (optional)<br>        normally, only cells containing numbers or timestamps (hh:mm:ss) are included in the calculations. The all keyword allows text to be processed as if it contained a \\\"0\\\". Care should be used or this will include the header row. If you choose to use \\\"all\\\" then you must have a startrow and an endrow.\\n\\n{{test table}}\\n\\n<table id=\\\"table2\\\">\\n<tr><th>weeble</th><th>wobble</th><th>all wobble</th></tr>\\n<tr><td>foo</td><td>12.22</td><td>12.22</td></tr>\\n<tr><td>bar</td><td>7.1</td><td>7.1</td></tr>\\n<tr><td>baz</td><td>3.09</td><td>3.09</td></tr>\\n<tr><td>baz</td><td></td><td></td></tr>\\n<tr><td>count</td><td><<ColumnCalc table2 count 1 -1 >></td><td><<ColumnCalc table2 count 1 -1 all>></td></tr>\\n<tr><td>avg</td><td><<ColumnCalc table2 avg 1 -2 >></td><td><<ColumnCalc table2 avg 1 -2 all>></td></tr>\\n<tr><td>sum</td><td><<ColumnCalc table2 sum 1 -3 >></td><td><<ColumnCalc table2 sum 1 -3 all>></td></tr>\\n<tr><td>min</td><td><<ColumnCalc table2 min 1 -4 >></td><td><<ColumnCalc table2 min 1 -4 all>></td></tr>\\n<tr><td>max</td><td><<ColumnCalc table2 max 1 -5 >></td><td><<ColumnCalc table2 max >></td></tr>\\n</table>\\n\",\n        \"title\": \"ColumnCalculations\",\n        \"tags\": \"\",\n        \"modified\": \"20170504194116421\",\n        \"created\": \"20170503182315745\"\n    },\n    {\n        \"text\": \"Inline editable tables\",\n        \"title\": \"Danielo Rodríguez\",\n        \"tags\": \"Other\",\n        \"modified\": \"20170428163615136\",\n        \"last_name\": \"Rodriguez\",\n        \"first_name\": \"Danielo\",\n        \"created\": \"20170428163449267\"\n    },\n    {\n        \"text\": \"{{||personafields}}\",\n        \"voterrecords\": \"\",\n        \"title\": \"Earline Steed\",\n        \"tags\": \"Classmate\",\n        \"ssdi\": \"\",\n        \"spouse\": \"\",\n        \"spokeo\": \"\",\n        \"source2\": \"HC\",\n        \"source1\": \"TT\",\n        \"reported\": \"Yes\",\n        \"pipl\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20170427181935351\",\n        \"missing\": \"Yes\",\n        \"m_name\": \"Chaney\",\n        \"link\": \"https://www.findagrave.com/cgi-bin/fg.cgi?page=gr&GSln=steed&GSfn=ea&GSiman=1&GSby=1947&GSbyrel=after&GSdyrel=all&GSob=b&GRid=96095073&df=all&\",\n        \"last_name\": \"Steed\",\n        \"full_name\": \"Earline Steed\",\n        \"first_name\": \"Earline\",\n        \"fb\": \"\",\n        \"delete\": \"\",\n        \"deceased\": \"2012 - Floral Haven\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170418133915801\",\n        \"1967_phone\": \"\",\n        \"1967_address\": \"132 E Jasper\"\n    },\n    {\n        \"text\": \"title: Tiddler Title\\n1967_address: Old Address\\n1967_phone: Old_Phone\\ncurrent_address: Current_Address\\ndeceased: Deceased?\\nfamily_tree: Data from Family Tree\\nfb: Face Book\\nfirst_name: First Name\\nfmp: Find My Past\\nfps: Find People Search\\nfull_name: Full Name\\nlast_name: Last Name\\nlink: Link Data\\nm_name: Married Name\\nmdate: Marriage Date\\nmissing: Missing?\\npipl: Pipl Data\\nremarks: Remarks\\nreported: Have you reported yet?\\nsibling: Sibling Name (class)\\nsource1: In Hello Central\\nsource2: In Tom Tom\\nspokeo: Data from Spokeo\\nspouse: Spouse's Name\\nssdi: SS Death Index\\nvoterrecords: Voter Records Data\\nemail: Possible Emails\",\n        \"type\": \"application/x-tiddler-dictionary\",\n        \"title\": \"FieldsData\",\n        \"tags\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20170502185608369\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170502140219093\"\n    },\n    {\n        \"text\": \"\\\\define lingo-base() $:/language/EditTemplate/\\n\\n\\\\define new-field-inner()\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=<<name>>>\\n<$button>\\n<$action-setfield $tiddler=\\\"FieldsData\\\" $index=<<name>> $value=<<value>>/>\\n<$action-deletetiddler $tiddler=\\\"$:/temp/newfieldname\\\"/>\\n<$action-deletetiddler $tiddler=\\\"$:/temp/newcaption\\\"/>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" default=<<name>>>\\n<$button>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n\\\\end\\n\\n\\\\define new-field()\\n<$set name=\\\"name\\\" value={{$:/temp/newfieldname}}>\\n<$set name=\\\"value\\\" value={{$:/temp/newcaption}}>\\n<<new-field-inner>>\\n</$set>\\n</$set>\\n\\\\end\\n\\n!!这些字段已经在FieldsData tiddler中定义。\\n\\n请注意，这里的改变只影响到[[FieldsData]]和直接依赖[[FieldData]]的tiddlers。\\n<$set name=\\\"currentTiddler\\\" value=\\\"FieldsData\\\">\\n<table class=\\\"noborder\\\">\\n<tr><th>Delete?</th><th>fieldname</th><th>caption</th></tr>\\n<$list filter=\\\"[all[current]indexes[]]\\\" variable=\\\"fieldName\\\">\\n<tr>\\n<td>\\n<$button>\\n<$action-setfield $tiddler=\\\"FieldsData\\\" $index=<<fieldName>> />\\nDel</$button>\\n</td>\\n<td><<fieldName>></td>\\n<td><$edit-text index=<<fieldName>> tag=\\\"input\\\"/></td>\\n</tr>\\n</$list>\\n</table>\\n</$set>\\n\\n<div class=\\\"tc-edit-field-add\\\">\\n<em ><<lingo Fields/Add/Prompt>></em>\\n\\n<span class=\\\"tc-edit-field-add-name\\\">\\n<$edit-text tiddler=\\\"$:/temp/newfieldname\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Name/Placeholder}} focusPopup=<<qualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-popup-handle\\\"/>\\n</span>\\n\\n<$reveal state=<<qualify \\\"$:/state/popup/field-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n<div class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n<$linkcatcher to=\\\"$:/temp/newfieldname\\\">\\n<$list filter=\\\"[!is[shadow]!is[system]fields[]search:title{$:/temp/newfieldname}sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type -field1 -field2 -field3 -field4 -filteritem -filtertag -notitem -sortby -sortdir -delete\\\"  variable=\\\"currentField\\\">\\n<$link to=<<currentField>>>\\n<<currentField>>\\n</$link>\\n</$list>\\n</$linkcatcher>\\n</div>\\n</$reveal>\\n\\n<$edit-text tiddler=\\\"$:/temp/newcaption\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder=\\\"New Field Caption\\\" />\\n\\n<$macrocall $name=\\\"new-field\\\"/>\\n\\n</div>\\n\",\n        \"title\": \"FieldsEditor\",\n        \"modified\": \"20221120062128094\",\n        \"created\": \"20170428013506880\"\n    },\n    {\n        \"text\": \"RowTableMacros\\n\\nColumnTableMacros\",\n        \"title\": \"Jed Carty\",\n        \"tags\": \"Other\",\n        \"modified\": \"20170428163658373\",\n        \"created\": \"20170428163621313\"\n    },\n    {\n        \"text\": \"{{||personafields}}\",\n        \"voterrecords\": \"\",\n        \"title\": \"Kathy Adams\",\n        \"tags\": \"Classmate\",\n        \"ssdi\": \"\",\n        \"spouse\": \"\",\n        \"spokeo\": \"\",\n        \"source2\": \"\",\n        \"source1\": \"TT\",\n        \"pipl\": \"no\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20170424131912356\",\n        \"missing\": \"Yes\",\n        \"last_name\": \"Adams\",\n        \"full_name\": \"Kathleen W. Adams\",\n        \"first_name\": \"Kathy\",\n        \"fb\": \"\",\n        \"delete\": \"\",\n        \"deceased\": \"\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170418133913345\",\n        \"1967_phone\": \"\",\n        \"1967_address\": \"\"\n    },\n    {\n        \"text\": \"{{||personafields}}\\n\",\n        \"voterrecords\": \"\",\n        \"title\": \"Kenneth Wolaridge\",\n        \"tags\": \"Classmate\",\n        \"ssdi\": \"https://familysearch.org/ark:/61903/1:1:J1KR-W61\",\n        \"spokeo\": \"nothing\",\n        \"source2\": \"HC\",\n        \"source1\": \"TT\",\n        \"reported\": \"Yes\",\n        \"remarks\": \"\",\n        \"pipl\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20170427181957555\",\n        \"missing\": \"Yes\",\n        \"mdate\": \"\",\n        \"link\": \"https://www.findagrave.com/cgi-bin/fg.cgi?page=gr&GSln=wolaridge&GSiman=1&GSby=1947&GSbyrel=after&GSdyrel=all&GSst=38&GScntry=4&GSob=n&GRid=105628810&df=all&\",\n        \"last_name\": \"Wolaridge\",\n        \"full_name\": \"Kenneth John Wolaridge\",\n        \"fmp\": \"\",\n        \"first_name\": \"Kenneth\",\n        \"fb\": \"\",\n        \"delete\": \"\",\n        \"deceased\": \"1978 Crown Hill - Tulsa\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170418133916493\",\n        \"1967_phone\": \"\",\n        \"1967_address\": \"\"\n    },\n    {\n        \"created\": \"20170501172211267\",\n        \"text\": \"\\\\define FieldThing(name:\\\"current_address\\\")\\n{{FieldsData##$name$}}\\n\\\\end\\n\\n\\\\define FieldChoice(name:\\\"title\\\")\\n<$select field=$name$ default='title'>\\n<option value=\\\"\\\">none</option>\\n<$set name=\\\"currentTiddler\\\" value=\\\"FieldsData\\\">\\n<$list filter=\\\"[all[current]indexes[]]\\\" variable=\\\"fieldName\\\">\\n<option value=<<fieldName>>>\\n<$macrocall $name=\\\"FieldThing\\\" name=<<fieldName>> />\\n</option>\\n</$list>\\n</$set>\\n</$select>\\n\\\\end\\n\\n<style>\\n.styled-select { overflow: hidden; }\\n.styled-select select { -moz-appearance: none; -webkit-appearance: none;\\nbackground-color:<<colour table-header-background>>; font-size: 14px; border:0px;}\\n.styled-input {border: none;  border-color: transparent;}\\n.noborder, .noborder td { border-width:0px; background-color:<<colour background>>\\n</style>\\n\\n<div class=\\\"styled-select\\\">\\n<table class=\\\"noborder\\\">\\n<tr>\\n<td>\\nSearch for: <$edit-text tiddler=\\\"$:/config/Manager/Filter\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/Manager/Controls/Search/Placeholder}}/>\\n</td>\\n<td>\\nSort by: \\n<<FieldChoice sortby>>\\n</td>\\n<td>\\n<$checkbox field=\\\"sortdir\\\" checked=\\\"reverse\\\" unchecked=\\\"forward\\\" default=\\\"forward\\\"> Descending</$checkbox>\\n</td>\\n</tr>\\n<tr>\\n<td>\\nMust Have: \\n<<FieldChoice filteritem>>\\n</td>\\n<td>\\nMust NOT Have: \\n<<FieldChoice notitem>>\\n</td>\\n<td>\\nRequired Tag \\n<$select  field=\\\"filtertag\\\" default=\\\"\\\">\\n<option value=\\\"\\\">none</option>\\n<$list filter=\\\"[tags[]!is[system]sort[title]]\\\" variable=\\\"tag\\\">\\n<option value=<<tag>>><$text text=<<tag>>/></option>\\n</$list>\\n</$select>\\n</td>\\n</tr>\\n</table>\\n\\n<$set name=\\\"var1\\\" value={{!!field1}}>\\n<$set name=\\\"var2\\\" value={{!!field2}}>\\n<$set name=\\\"var3\\\" value={{!!field3}}>\\n<$set name=\\\"var4\\\" value={{!!field4}}>\\n<table id=\\\"myTable2\\\">\\n<tr>\\n<th>Title</th>\\n<th>\\n<<FieldChoice field1>>\\n</th>\\n<th>\\n<<FieldChoice field2>>\\n</th>\\n<th>\\n<<FieldChoice field3>>\\n</th>\\n<th>\\n<<FieldChoice field4>>\\n</th>\\n</tr>\\n<$list filter=\\\"[!is[system]!is[shadow]has{!!filteritem}!has{!!notitem}search{$:/config/Manager/Filter}tag:strict{!!filtertag}sort{!!sortby}order{!!sortdir}]\\\">\\n<tr>\\n<td>\\n<$link>{{!!title}}</$link>\\n</td>\\n<td>\\n<$edit-text class=\\\"styled-input\\\" tiddler=<<ThisTiddler>> field=<<var1>>/>\\n</td>\\n<td>\\n<$edit-text class=\\\"styled-input\\\" tiddler=<<ThisTiddler>> field=<<var2>>/>\\n</td>\\n<td>\\n<$edit-text class=\\\"styled-input\\\" tiddler=<<ThisTiddler>> field=<<var3>>/>\\n</td>\\n<td>\\n<$edit-text class=\\\"styled-input\\\" tiddler=<<ThisTiddler>> field=<<var4>>/>\\n</td>\\n</tr>\\n</$list>\\n<tr><td>count</td><td><<ColumnCalc myTable2 count 2 -1 all>></td><td><<ColumnCalc myTable2 count 2 -1 all>></td><td><<ColumnCalc myTable2 count 2 -1 all>></td><td><<ColumnCalc myTable2 count 2 -1 all>></td></tr>\\n\\n</table>\\n</$set>\\n</$set>\\n</$set>\\n</$set>\\n</div>\\n\\nNumber of Entries: <$list filter=\\\"[!is[system]!is[shadow]has{!!filteritem}!has{!!notitem}search{$:/config/Manager/Filter}tag:strict{!!filtertag}sort{!!sortby}order{!!sortdir}count[]]\\\"/>\\n\",\n        \"title\": \"My Table\",\n        \"tags\": \"\",\n        \"sortdir\": \"forward\",\n        \"sortby\": \"last_name\",\n        \"notitem\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20221120063349070\",\n        \"filtertag\": \"Classmate\",\n        \"filteritem\": \"title\",\n        \"field4\": \"link\",\n        \"field3\": \"full_name\",\n        \"field2\": \"deceased\",\n        \"field1\": \"first_name\",\n        \"creator\": \"Stephen\"\n    },\n    {\n        \"text\": \"```\\nversion.extensions.ColumnCalculatorPlugin= {major: 0, minor: 6, revision: 1, date: new Date(2007,10,26)};\\nconfig.macros.columncalc= {\\n\\thandler:\\n\\tfunction(place,macroName,params,wikifier,paramString,tiddler) {\\n\\n\\t\\tif (place.parentNode.nodeName.toLowerCase()!='tr') return false; // not in a table\\n\\t\\tvar tbody=place.parentNode.parentNode;\\n\\t\\tvar row=tbody.childNodes.length-1; // current row #\\n\\t\\tvar col=place.parentNode.childNodes.length-1; // current column #\\n\\n\\t\\tvar fn=params.shift();\\n\\t\\tvar allCells=(params[0]&&params[0].toLowerCase()=='all');\\n\\t\\tif (allCells) params.shift();\\n\\t\\tvar startrow=0; var endrow=row-1;\\n\\t\\tif (params[0]) var startrow=params.shift();\\n\\t\\tif (startrow<0) startrow=1*startrow+row; else startrow=startrow-1;\\n\\t\\tif (params[0]) var endrow=params.shift();\\n\\t\\tif (endrow<0) endrow=1*endrow+row; else endrow=endrow-1;\\n\\n\\t\\tvar count=total=0;\\n\\t\\tfor (r=startrow; r<=endrow; r++) {\\n\\t\\t\\tvar cell=tbody.childNodes[r].childNodes[col].textContent;\\n\\t\\t\\tif (!cell) cell=tbody.childNodes[r].childNodes[col].innerHTML; // fallback for older browsers\\n\\t\\t\\tvar val=cell; var hms=cell.split(':');\\n\\t\\t\\tif (hms.length==3) { // an hh:mm:ss time value\\n\\t\\t\\t\\tvar val=(hms[0]||0)*3600+(hms[1]||0)*60+(hms[2]||0)*1;\\n\\t\\t\\t\\tvar showTime=true; // use time formatting for results...\\n\\t\\t\\t}\\n\\t\\t\\telse if (cell.length && !isNaN(cell)) // a numeric value\\n\\t\\t\\t\\tvar val=eval(cell);\\n\\t\\t\\telse if (allCells) // an non-numeric cell (when 'all' is used)\\n\\t\\t\\t\\tvar val=0;\\n\\t\\t\\tif (!isNaN(val)) { total+=val; count++; }\\n\\t\\t}\\n\\t\\tswitch (fn) {\\n\\t\\t\\tcase 'count':\\n\\t\\t\\t\\tvar result=count;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'average':\\n\\t\\t\\tcase 'avg':\\n\\t\\t\\t\\tvar result=Math.floor(total/count*100)/100; // truncate to two decimal places\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'total':\\n\\t\\t\\tcase 'sum':\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tvar result=total;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (showTime && fn!='count') {\\n\\t\\t\\tvar h=Math.floor(result/3600);\\n\\t\\t\\tvar m=Math.floor((result-h*3600)/60);\\n\\t\\t\\tvar s=Math.floor((result-h*3600-m*60)*100)/100; // truncate to two decimal places\\n\\t\\t\\tresult=(h<10?'0':'')+h+':'+(m<10?'0':'')+m+':'+(s<10?'0':'')+s;\\n\\t\\t}\\n\\t\\tcreateTiddlyText(place,result);\\n\\t}\\n}\\n```\",\n        \"title\": \"Old Code\",\n        \"tags\": \"\",\n        \"modified\": \"20170504180217801\",\n        \"created\": \"20170504180217801\"\n    },\n    {\n        \"text\": \"{{||personafields}}\",\n        \"voterrecords\": \"\",\n        \"title\": \"Paula Catts\",\n        \"tags\": \"Classmate\",\n        \"spokeo\": \"\",\n        \"source2\": \"HC\",\n        \"source1\": \"TT\",\n        \"pipl\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20170427181808578\",\n        \"last_name\": \"Catts\",\n        \"full_name\": \"Paula Sharyn Catts\",\n        \"first_name\": \"Paula\",\n        \"fb\": \"\",\n        \"deceased\": \"Yes\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170418133913461\",\n        \"1967_phone\": \"\",\n        \"1967_address\": \"\"\n    },\n    {\n        \"text\": \"这是我的~TiddlyWiki可编辑表格的版本。我创建它是为了帮助记录高中同学的聚会情况。我现在在我的几个维基中使用这个表格。\\n\\n一般来说，点击任何有彩色背景的区域都会产生一个可用的下拉菜单。因此，表格的任何一列都可以随意改变。该表可以按任何可用的字段进行排序，无论它们是否被显示。通过使用搜索框，可以进一步限制所选条目。\\n\\n表本身的条目，即不是标题行或第一列的条目，可以通过简单地点击单元格和编辑直接进行编辑。这些单元格都是直接链接到各个tiddlers的编辑文本部件。\\n\\n要设置这一点，你需要修改表格tiddler的 \\\"optlist\\\"，以包括所有你希望能够包含在表格中或能够用来对表格进行排序的字段。你还需要修改数据tiddler [[FieldsData]]。optlist字段中的每个条目必须在[[FieldsData]]中有一个匹配的条目，否则会出现一个空白。一旦你完成了所有的设置，你还需要删除表格tiddler中的 \\\"正在使用的字段 \\\"部分。\\n\\n这种方法有其局限性。\\n\\n#Table cell formatting is not possible. 单元格将永远是左对齐的。\\n#表格的列宽是固定的，因为有格式化和选择选项。\\n#你不应该创建一个列来处理tiddlers的文本字段。只有适合输入框的数量才会被显示。\\n#你不应该在其中一个单元格中编辑一个tiddler标题。这将创建额外的提示符。\\n#如果你在一列中编辑一个条目，而这一列也被选为 \\\"必须没有 \\\"的字段，那么当你开始输入时，该提示符就会消失。\\n\\nColumnCalculations\\n\\n这个程序包括Eric Shulman的TiddlyWiki经典程序的修改版。它允许一些面向列的函数，如计数、求和、平均、最小和最大，并且可以处理数字和例程。\\n\\n我必须感谢那些在这个问题上工作的人，我从他们那里得到了灵感和/或代码。\\n\\n* Danielo Rodríguez的内联可编辑表格\\n* Jed Carty的~RowTableMacro和~ColumnTableMacro\\n* Jeremy Rustin的Tiddler管理器，当然还有~TiddlyWiki本身\\n*Eric Shulman - 他的列计算程序。\\n\\n\\n!!Live Example [[My Table]]\\n\\n{{My Table}}\\n\\n!!Field in Use\\n<$set name=\\\"currentTiddler\\\" value=\\\"My Table\\\">\\n{{||$:/core/ui/TiddlerField2}}\\n</$set>\\n\\n!!Required Tiddlers\\nFieldsData - a data tiddler with the names of fields in use and the caption that will be substituted for them.\\n{{FieldsData}}\\n\\n!!Optional Tiddlers\\n#$:/core/ui/TiddlerField2 - Modified system tiddler to show user fields and content \\n#FieldsEditor - A Tiddler that will directly edit the data in FieldsData\\n#$:/macros/sk/ColumnCalc.js - My version of Eric Shulman's ~ColumnCalculator plugin which he created for TW Classic. http://www.tiddlytools.com/#ColumnCalculatorPlugin\\n\",\n        \"title\": \"Start\",\n        \"tags\": \"\",\n        \"modifier\": \"Stephen\",\n        \"modified\": \"20221120061600563\",\n        \"creator\": \"Stephen\",\n        \"created\": \"20170426141009781\"\n    },\n    {\n        \"text\": \"<table id=\\\"myTable\\\">\\n<tr><th>weeble</th><th>wobble</th><th>wuzzle</th></tr>\\n<tr><td>foo</td><td>3.2</td><td>00:22:15</td></tr>\\n<tr><td>bar</td><td>1.1</td><td>00:03:30</td></tr>\\n<tr><td>baz</td><td>2.9</td><td>00:01:45</td></tr>\\n<tr><td>gronk</td><td>4.3</td><td></td></tr>\\n<tr><td>snork</td><td>non-number</td><td></td></tr>\\n\\n<tr><td>count</td><td><<ColumnCalc myTable count 1 -1>></td><td><<ColumnCalc myTable count 1 -1 >></td></tr>\\n\\n<tr><td>all count</td><td><<ColumnCalc myTable count 1 -2 all>></td><td><<ColumnCalc myTable count 1 -2 all>></td></tr>\\n\\n<tr><td>total</td><td><<ColumnCalc myTable sum 1 -3>></td><td><<ColumnCalc myTable sum 1 -3 all>></td></tr>\\n</table>\",\n        \"title\": \"test table\",\n        \"tags\": \"\",\n        \"modified\": \"20170504175509714\",\n        \"created\": \"20170504160453099\"\n    }\n]","type":"application/json","created":"20221120063540232","creator":"WhiteFall","modified":"20221216015723829","modifier":"WhiteFall","tags":"宏定义表格","title":"My Table.json"},{"title":"mysettings/scrollbars","created":"20211222105510091","creator":"马不前","modified":"20230401124014085","modifier":"马不前","tags":"功能条目 $:/tags/Stylesheet","tmap.id":"669d97ff-9ac7-4fe1-94e6-7dc9f8abc25a","type":"text/vnd.tiddlywiki","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n\nhtml {\n  --scrollbarBG: <<color page-background>>;\n  --thumbBG: <<color sidebar-tiddler-link-foreground>>; /*other candidate colors: foreground, sidebar-tiddler-link-foreground */\n}\n\n/* only for Twilight palette use <<color sidebar-muted-foreground>> */\n\n/* Works on Firefox */\n* {\n  scrollbar-width: thin;\n}\n/* for Chrome, Edge */\n::-webkit-scrollbar,\n  scrollbar-width {\n  width: 8px;\n  height:8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--scrollbarBG);\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  border: 1.5px solid var(--scrollbarBG);\n  background-color: var(--thumbBG) ;\n}"},{"title":"neotw example","created":"20220913015954198","modified":"20220913020136601","tags":"","type":"text/vnd.tiddlywiki","text":"* ''link'': https://neotw.netlify.app\n* ''preview'':  [img[neotw-showcase.png]]\n"},{"title":"neotw/icon/comment-black","created":"20230106085630119","creator":"oeyoews","modified":"20230106090538550","modifier":"oeyoews","tags":"$:/tags/Image","type":"text/vnd.tiddlywiki","text":"<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" t=\"1569682881658\" viewBox=\"0 0 1024 1024\" version=\"1.1\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><defs></defs><path d=\"M573 421c-23.1 0-41 17.9-41 40s17.9 40 41 40c21.1 0 39-17.9 39-40s-17.9-40-39-40zM293 421c-23.1 0-41 17.9-41 40s17.9 40 41 40c21.1 0 39-17.9 39-40s-17.9-40-39-40z\"></path><path d=\"M894 345c-48.1-66-115.3-110.1-189-130v0.1c-17.1-19-36.4-36.5-58-52.1-163.7-119-393.5-82.7-513 81-96.3 133-92.2 311.9 6 439l0.8 132.6c0 3.2 0.5 6.4 1.5 9.4 5.3 16.9 23.3 26.2 40.1 20.9L309 806c33.5 11.9 68.1 18.7 102.5 20.6l-0.5 0.4c89.1 64.9 205.9 84.4 313 49l127.1 41.4c3.2 1 6.5 1.6 9.9 1.6 17.7 0 32-14.3 32-32V753c88.1-119.6 90.4-284.9 1-408zM323 735l-12-5-99 31-1-104-8-9c-84.6-103.2-90.2-251.9-11-361 96.4-132.2 281.2-161.4 413-66 132.2 96.1 161.5 280.6 66 412-80.1 109.9-223.5 150.5-348 102z m505-17l-8 10 1 104-98-33-12 5c-56 20.8-115.7 22.5-171 7l-0.2-0.1C613.7 788.2 680.7 742.2 729 676c76.4-105.3 88.8-237.6 44.4-350.4l0.6 0.4c23 16.5 44.1 37.1 62 62 72.6 99.6 68.5 235.2-8 330z\"></path><path d=\"M433 421c-23.1 0-41 17.9-41 40s17.9 40 41 40c21.1 0 39-17.9 39-40s-17.9-40-39-40z\"></path></svg> "},{"title":"Neotw定制版","created":"20231001022956385","creator":"马不前","modified":"20231001023122260","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"非常好看！！！\n\n* [[演示|https://neotw.tiddlyhost.com/]]\n* [[code|https://github.com/oeyoews/tiddlywiki-starter-kit]]\n* [[post|https://talk.tiddlywiki.org/t/neotw-simplify-tw5/4402]]"},{"title":"Node-TW常用Git命令","created":"20230322125515191","creator":"WhiteFall","modified":"20230516134615639","modifier":"马不前","tags":"编程知识类","type":"text/vnd.tiddlywiki","text":"!! 前置知识\n\n待补充\n\n!! 克隆仓库到本地\n\n```sh\ngit clone https://github.com/defnngj/project-name\n```\n\n!! 推送更新到远程仓库\n\n```\ngit push\n```\n\n!! 强制推送（覆盖仓库数据）\n\n```sh\ngit push -f origin main\n```\n\n* 主分支，可能为main，可能为master\n* origin，表示远程仓库\n* -f force ，词典翻译：强迫; 强行;\n\n> git 推送 强制 远程仓库 main分支\n\n!! 查看历史提交记录\n\n```sh\ngit log\n```\n\n!! 合并多个commit\n\n> 来源：https://zhuanlan.zhihu.com/p/91911809\n\n!!! 前置知识\n1. 合并从HEAD版本开始往过去数 n 个版本\n\n```sh\ngit rebase -i HEAD~n\n```\n\n2. 合并指定区间的commit版本，该区间是一个前开后闭的区间。意思就是startpoint不参与合并\n\n```sh\ngit rebase -i  [startpoint]  [endpoint]\n```\n\n> rebase 变基，整理(分支)，即在当前分支外另一点上重新应用当前分支的提交历史，变基是Git整合变更的一种方式，另一种方式是合并。\n\n此命令执行后会进入使用vim编辑的状态，修改分支前的关键字（pick、squash、drop）英文状态下按i进入编辑，合并commit就修改pick为squash，修改完成后按ESC，然后英文状态下按:wq(冒号、W、Q)，在按回车确认，保存修改。git就会自动执行合并commit动作。\n\n\n!!! 具体操作\n\n1.执行 `git log` 查看提交历史\n\n2.执行 `git rebase -i HEAD~3` ，弹出操作窗口\n\n编辑commit内容，第二次、第三次提交的pick改为squash，把第二次、第三次提交都合并到第一次提交上。\n\n```\npick 85697ee This is first commit.\nsquash ee461c1 This is second commit.\nsquash 326e415 This is third commit.\n```\n3.然后保存退出，Git会压缩提交历史。\n\n\n\n\n\n!! GC（仓库垃圾回收）\n\n> 参考链接：[[如何瘦身Git仓库|https://linux.cn/article-8556-1.html]]\n\n!!! git仓库压缩瘦身\n参考链接：https://blog.csdn.net/qq_40233736/article/details/86668768\n\ngit gc命令：https://blog.csdn.net/yjl2055/article/details/101072073\n\n\n\n''快速使用''\n\n```sh\n# 查看历史大文件(含有linux命令)\ngit rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}')\"\n# 从历史中删除 target/ 这个文件夹(含有linux命令)\ngit filter-branch --force --index-filter 'git rm -r  --cached --ignore-unmatch target/' --prune-empty --tag-name-filter cat -- --all\n# 执行仓库压缩\ngit gc --prune=now\n# 推送到远程仓库\ngit push origin --force --all\n```\n\n\n\n!!! 单独删除某个文件的所有历史记录\n\n 要从存储库的历史记录中彻底删除不需要的文件，可以使用 git filter-repo 工具或 BFG Repo-Cleaner 开放源代码工具。\n\n参考链接：https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository\n\n\n\n!! 硬回退\n\n```sh\ngit reset --hard HEAD~n\n```\n* HEAD 是当前分支中''当前的commit''。\n* HEAD的指向是可以改变的，比如你提交commit，切换仓库，分支，或者回滚版本，切换tag等。\n\n硬回退，意味着放弃从当前commit版本到n版本的提交，并删除这段历史commit记录。\n\n!! 取消指定的提交\n\n```sh\n git revert <commit id>\n```\n该操作会恢复 所有文件内容历史状态 到 历史中选定某个commit的修改状态。例如当前A ，历史B，古历史C。 执行 git revert `<commit id>古历史C` 将会恢复所有文件内容至古历史C时候的提交状态。可以在Git可视化工具中看到文件的修改。此时在进行一次commit确认撤销。\n\n\n!! 清空Git仓库的所有历史记录\n\n1. 切换到新的分支\n\n```sh\ngit checkout --orphan tmp_branch\n```\n\n2. 缓存所有文件（除了.gitignore中声明排除的）\n\n```sh\ngit add -A\n```\n\n3. 提交跟踪过的文件（Commit the changes）\n\n```sh\ngit commit -am \"commit message\"\n```\n\n4. 删除master分支（Delete the branch）\n\n```sh\ngit branch -D main # 注意：你的主分支也可能是master\n```\n\n5. 重命名当前分支为main（Rename the current branch to main）\n\n```sh\ngit branch -m main # 注意：你的主分支也可能是main\n```\n\n6. 提交到远程master分支 （Finally, force update your repository）\n\n```sh\ngit push -f origin main # 注意：你的主分支也可能是main\n```\n\n通过以上几步就可以简单地把一个Git仓库的历史提交记录清除掉了，不过最好还是在平时的开发中严格要求一下提交日志的规范，尽量避免在里面输入一些敏感信息进来。\n\n\n!! Credential Helper Selector\n\n> Credential Helper 是 git 自带的凭据管理工具，可以把账号和密码安全地保存起来，不必要每次都输入账号和密码。\n\n* cache 将凭据在内存中进行短时间的缓存；\n* store 将凭据保存在磁盘上，长久有效；\n\n打开对话框的方式：在终端中输入 `git credential-helper-selector` 命令，然后按回车键。 \n\n\n!! 有趣的Git动画视频和网站\n\n【纯享Git小动画！轻松看懂git命令-哔哩哔哩】 https://b23.tv/unZnX7j\n\n\n如何优雅的使用Git：https://dangitgit.com/zh\n"},{"title":"NodeJS程序打包成EXE","created":"20220927081222671","creator":"Miao","modified":"20230508132526633","modifier":"WhiteFall","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"1. 安装pkg软件包\n\n<<<\n软件包项目地址：https://github.com/vercel/pkg\n<<<\n\n\n```sh\nnpm install -g pkg\n```\n\n2. 打包成可执行程序\n\n```sh\npkg -t win 启动页.js\n```\n\n注意：类似playwright 位置在用户目录下的，外置依赖程序，无法打包进去。"},{"title":"NodeJS服务端渲染单条目卡片","created":"20230208071752963","creator":"林一二","modified":"20230208071957094","modifier":"林一二","tags":"如何启动一个NodeJS的TiddlyWiki项目","type":"text/vnd.tiddlywiki","text":"一般打开的条目 URL 里含有一个 `#`，例如 `https://wiki.onetwo.ren/#Index`。\n\n去掉这个 `#` 就能打开单个卡片了，例如 `https://wiki.onetwo.ren/Index`。\n\n这种方式打开的网页会非常小，所以网络传输速度会很快；不过这需要 NodeJS 在服务端渲染好 HTML 的内容，需要服务器 CPU 进行一定的运算，可能会消耗一些时间。"},{"title":"notebook主题切换导致标签丢失样式","created":"20230323224055053","creator":"马不前","modified":"20230324114829728","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"notebook主题里自带了几个配色。但除了`$:/tags/Palette`标签外，还有一个限制标签`$:/tags/notebook/Palette`。\n\n如果没有去除上面的标签，而直接切换到其他主题，就会导致标签颜色丢失，看不到标签的内容。如果喜欢这个配色，可以去除掉`$:/tags/notebook/Palette`标签，切换主题就没问题了。\n"},{"title":"Noteself","created":"20231001021301804","creator":"马不前","modified":"20231001021543112","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#%22Noteself%22%20by%20Danielo%20Rodr%C3%ADguez]]\n\n同[[Tiddlyhost]]一样，也是在线服务器，免费。\n\n但版本太老了，5.1.21，不推荐使用。"},{"title":"Ob风格的wiki地图","created":"20221127111232331","creator":"WhiteFall","modified":"20230516134659640","modifier":"马不前","tags":"编程知识类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：linonetwo，WhiteFall，[[Peter Hajas|https://github.com/peterhajas]]\n* 描述：Ob风格的wiki地图。需要安装Gk0Wk/echarts插件。插件版本>=v0.2.2 。\n* 使用方法：根据下列提示创建并设置条目。来源：https://github.com/tiddly-gittly/tw-echarts/discussions/65 。\n\n\n```\n条目标题：BrainMap\n依赖插件：Gk0Wk/echarts\n条目类型：默认TiddlyWiki5\n```\n\n```\n<$echarts\n  $tiddler=\"$:/plugins/Gk0Wk/echarts/addons/BrainMap\"\n  $height=\"500px\"\n  dblclick=\"(params, parentWidget) => { parentWidget.dispatchEvent({ type: 'tm-navigate', navigateTo: params.data.name }) }\"\n/>\n```\n"},{"title":"Obsidian-Vault插件：导入Ob库到你的TiddlyWiki中","created":"20230813235821320","creator":"WhiteFall","modified":"20230906064043792","modifier":"WhiteFall","tags":"插件使用 从其它笔记软件迁移","text":"! Import Obsidian Vault in TiddlyWiki5 \n \nObsidian Vault发布工具 by NodeJS TiddlyWiki。\n\n* 安装：CPL搜索：obsidian-vault，点击安装即可。\n* 仓库：https://github.com/tiddly-gittly/tidgi-obsidian-manager\n* 使用方式、预览、参考手册：https://tiddly-gittly.github.io/tidgi-obsidian-manager/\n\n!! 插件要求\n\n* TiddlyWiki：core-version >= 5.2.0\n* 需要TidGi太记或NodeJS版本的TiddlyWiki。\n* 若 TidGi ≥ v0.8.0 版本，需要在工作区设置 - 博客和服务器设置中 - 启用 HTTP API 并 关闭 凭证鉴权选项。\n* 依赖插件：tiddlywiki/markdown\n\n此插件本质上是对Ob Vault的拷贝和部分ob和md语法的适配，通过tiddlywiki/markdown插件解析。你可以导入任意多的md文件，只需要把他们放入一个文件夹中。如果你想转移ob库到TiddlyWiki也是没问题的，看自己怎么活用了。\n\n具体的使用方式和介绍，请查看Github仓库。\n\n[[视频链接|https://www.bilibili.com/video/BV13m4y1W7df/]]"},{"title":"oflg","created":"20211017162215386","creator":"oflg","modified":"20211017162222954","modifier":"oflg","type":"text/vnd.tiddlywiki","text":"GitHub: https://github.com/oflg\n\nMail: [[oflg@foxmail.com|mailto:oflg@foxmail.com]]"},{"title":"plugin.info文件介绍","created":"20211112092007046","creator":"Sttot","modified":"20220207045519609","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"前置阅读：[[如何在NodeJS里写一个TW插件]]\n\n`plugin.info`是JSON格式，可以包含如下字段：\n\n* `title`【必填】：插件的标题，请遵命名规范：`$:/plugins/你的名字/插件的名字`。\n\n* `type`【可选】：必须为`application/json`，就算写别的也会被改回来。\n\n* `version`【可选】：插件的版本号，建议是`数字.数字.数字`，主要用于更新检测：\n*: 如果你发布更新时不改变版本号，那么只能<button class=\"tc-reinstall tc-btn-invisible tc-install-plugin\">{{$:/core/images/download-button}}重新安装</button>；如果把版本号变小，就会<button class=\"tc-reinstall-downgrade tc-btn-invisible tc-install-plugin\">{{$:/core/images/download-button}}降级</button>；如果把版本号变大，就是<button class=\"tc-reinstall-upgrade tc-btn-invisible tc-install-plugin\">{{$:/core/images/download-button}}升级</button>。\n*: 同时，如果版本号没有已经安装的版本大，直接将JSON拖动到浏览器是没法安装的，只能卸载然后重新装。\n*: 如果`version`不填，那么默认就和开发环境的TW版本号一致(当前版本号：<<version>>)。\n\n* `plugin-type`【可选】：插件的类型，可以是`plugin`、`language`、`theme`、`import`、`library`、`info`、`undefined`等，主要用的是`plugin`，别的怎么用我也不清楚，希望有谁能来写个教程。这个不填就默认为`plugin`。\n\n* `dependents`【可选】：前置插件的title，安装时会一并将前置插件也安装，如果没有前置插件则会报错。值可以是title的列表，也可以是用空格分隔的字符串。\n\n* `tiddlers`【可选】：`plugin.info`中也可以存储一些tiddler，一般用于存储一些很小的tiddler(比如设置、状态什么的)，是一个对象，key为tiddler的title，值则为对象，可以包含如下字段：\n** `text`\n** `fields`(但是`field`的值只能是字符串或者列表)\n**: (不知道我有没有漏掉什么，欢迎指正)\n*: <<alert danger \"''注意：''如果外面有重名的tiddler，这里的tiddler会被外面的覆盖掉。\">>\n\n还有一些字段，与插件的解析执行机制无关，但是在TiddlyWiki中有一些特殊含义：\n\n* `name`【选填】：插件的名称，会显示在插件信息中，主要为了好称呼，一般要写。\n* `description`【选填】：插件的介绍，会显示在插件信息中，简短介绍自己的插件让其更受欢迎，一般会写。\n* `author`【选填】：作者。\n* `source`【选填】：源代码repo的url。\n* `parent-plugin`【选填】：父插件的标题，表示这个插件是一个子插件(比如`codemirror-xxx`那一堆都是`codemirror`的子插件)，在插件源中，会显示在父插件的展开项内。@@color:red;如果没有父插件就不会在插件源中显示@@\n* `list`【选填】：有些插件展开之后除了`content`还有`readme`什么的，就是在这里定义，可以是列表，也可以是空格分隔的字符串。不过这里要注意的是，里面不是要显示的tiddler的title，而是“相对”的title，要去掉`$:/plugins/xxx/xxx/`的前缀，例如如果你想添加`$:/plugins/XiaoMing/abc/readme`只需要写`readme`就好了。\n* `core-version`【选填】：要求的最低核心版本，例如`>=5.2.0`。\n* `plugin-priority`【选填】：整数，指插件被加载的顺序优先级，是越小越优先吗？有谁帮我试一下。\n* `text-direction`【选填】：给语言翻译用的，可能是文字的方向。\n\n你也可以添加其他的字段，最后将会变成插件tiddler的元数据。\n\n---\n\n本教程为原创，主要阅读了[[boot.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js]]内的以下函数：\n\n* `$tw.loadPluginFolder`\n* `$tw.Wiki.unpackPluginTiddlers`"},{"title":"Product Hunt Link","created":"20210903024241142","creator":"Sttot","modified":"20210903024255519","modifier":"Sttot","tags":"","type":"text/vnd.tiddlywiki","text":"<center>\n<a href=\"https://www.producthunt.com/posts/tiddlywiki-2?utm_source=badge-top-post-badge&utm_medium=badge&utm_souce=badge-tiddlywiki-2\" alt=\"Product Hunt: Product of the Day\" target=\"_blank\" rel=\"noopener noreferrer\">{{ProductHunt-Badge.svg}}</a>\n</center>"},{"title":"ProductHunt-Badge.svg","type":"image/svg+xml","created":"20210903022859308","modified":"20210903022859308","_canonical_uri":"https://raw.githubusercontent.com/tiddly-gittly/TiddlyWiki-Chinese-Tutorial/master/tiddlers/ProductHunt-Badge.svg"},{"title":"Quine 2","created":"20231001022017821","creator":"马不前","modified":"20231001022208439","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#Saving%20on%20iPad%2FiPhone]]\n\n在ios平台上，唯一的应用程序。30元，这个是苹果应用商店收取的，开发者不收取费用。\n\n我没用过，不清楚使用效果如何。但从介绍看，也是只支持单文件版本的。"},{"title":"Shiraz宏包","created":"20220527054251451","creator":"林一二","modified":"20220527055041793","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"!! 安装\n\n参考[[安装插件]]，从 CPL 插件源安装即可。\n\n!! 介绍\n\n就像 LaTeX 有很多美化样式的宏包，太微也有很多宏包，[[Shiraz|https://kookma.github.io/TW-Shiraz/]] 是其中的佼佼者，它除了提供样式美化，例如：\n\n```tid\n<<alert primary \"美化样式的封装了CSS的宏\" width:60%>>\n```\n\n<<alert primary \"美化样式的封装了CSS的宏\" width:60%>>\n\n还提供自动化操作宏包，例如我们在[[待开始任务列表]]里用的 dynamic-table 宏：\n\n```tid\n<$macrocall $name=table-dynamic caption=\"共建待办列表\" filter=\"[tag[任务]]-[tag[done]]\" fields=\"title tags\" class=\"w-100\"/>\n```\n\n<<reuse-tiddler \"待开始任务列表\">>\n\n!! 使用\n\n安装的插件只包含宏定义，不包含使用手册（为了减小安装大小），你需要到官网 [[https://kookma.github.io/TW-Shiraz/]] 了解有哪些宏、每个宏的参数有哪些，里面也有很多复制黏贴就可以抄过来美化自己知识库的例子。"},{"title":"Stroll","created":"20231001021018136","creator":"马不前","modified":"20231001153030302","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#%22Stroll%20-%20a%20Roam-like%20experience%22%20by%20David%20Gifford]]\n\n[[链接|https://giffmex.org/stroll/stroll.html]]\n\n论坛开发的单文件版本。"},{"title":"Sttot","created":"20211212151653030","creator":"林一二","modified":"20211212151659406","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"[[https://gk0wk.github.io/]]"},{"title":"tabs加强版","created":"20221216014602538","creator":"WhiteFall","modified":"20221216014908202","modifier":"WhiteFall","tags":"目录导航栏 $:/tags/Macro","type":"text/vnd.tiddlywiki","text":"\\define navx(tag,sort:\"\",selectedTiddler:\"$:/temp/toc/selectedTiddler\",unselectedText,missingText,template:\"\")\n\\whitespace trim\n<$tiddler tiddler={{{ [<__selectedTiddler__>get[text]] }}}>\n  <div class=\"tc-tabbed-table-of-contents\">\n    <$linkcatcher to=<<__selectedTiddler__>>>\n      <div class=\"tc-table-of-contents\">\n        <$macrocall $name=\"toc-selective-expandable\" tag=<<__tag__>> sort=<<__sort__>> itemClassFilter=\"[all[current]] -[<__selectedTiddler__>get[text]]\"/></div>\n    </$linkcatcher>\n    <div class=\"tc-tabbed-table-of-contents-content\">\n      <$reveal stateTitle=<<__selectedTiddler__>> type=\"nomatch\" text=\"\">\n        <$transclude mode=\"block\" tiddler=<<__template__>>>\n          <h1><$link><<toc-caption>></$link></h1>\n          <$transclude mode=\"block\">$missingText$</$transclude>\n          <<tabs \"[tag<currentTiddler>]\" \"tc-vertical\">>\n        </$transclude>\n      </$reveal>\n      <$reveal stateTitle=<<__selectedTiddler__>> type=\"match\" text=\"\">\n        $unselectedText$\n      </$reveal>\n    </div>\n  </div>\n</$tiddler>\n\\end"},{"title":"tbl-column-list-video-link","code-body":"yes","created":"20230830082456893","creator":"马不前","modified":"20230830083237391","modifier":"马不前","tags":"$:/tags/Table/HeaderTemplate 如何自定义动态表格的表头","tbl-column-list":"video-link","type":"text/vnd.tiddlywiki","text":"<$reveal type=\"nomatch\" stateTitle=<<tempTableSort>> stateIndex=\"sortIndex\" text=<<currentColumn>> tag=\"th\">\n<$button setTitle=<<tempTableSort>> setIndex=\"sortIndex\" setTo=<<currentColumn>> class=\"tc-btn-invisible tc-tiddlylink\" >\n<$action-setfield $tiddler=<<tempTableSort>> $index=\"hasnegate\" $value=\"false\"/>\n<$action-setfield $tiddler=<<tempTableSort>> $index=\"negate\" $value=\"\"/>\n<span style=\"text-transform: capitalize;\"><$transclude tiddler=<<currentColumn>> field=\"tbl_caption\"> 视频链接 </$transclude></span>\n</$button>\n</$reveal>\n<$reveal type=\"match\" stateTitle=<<tempTableSort>> stateIndex=\"sortIndex\" text=<<currentColumn>> tag=\"th\">\n<$list filter=\"[<tempTableSort>getindex[hasnegate]match[false]]\" variable=ignore><!--set negate for sort-->\n<$button setTitle=<<tempTableSort>> setIndex=\"hasnegate\" setTo=\"true\" class=\"tbl-sort-svg tc-btn-invisible tc-tiddlylink\" >\n<$action-setfield $tiddler=<<tempTableSort>> $index=\"negate\" $value=\"!\"/>\n<span style=\"text-transform: capitalize;\"><$transclude tiddler=<<currentColumn>> field=\"tbl_caption\"> 视频链接 </$transclude></span> {{$:/core/images/down-arrow}}\n</$button>\n</$list>\n<$list filter=\"[<tempTableSort>getindex[hasnegate]match[true]]\" variable=ignore><!--remove negate for sort-->\n<$button setTitle=<<tempTableSort>> setIndex=\"hasnegate\" setTo=\"false\" class=\"tbl-sort-svg tc-btn-invisible tc-tiddlylink\" >\n<$action-setfield $tiddler=<<tempTableSort>> $index=\"negate\" $value=\"\"/>\n<span style=\"text-transform: capitalize;\"><$transclude tiddler=<<currentColumn>> field=\"tbl_caption\"> 视频链接 </$transclude></span> {{$:/core/images/up-arrow}}\n</$button>\n</$list>\n</$reveal>\n"},{"title":"telmiger","created":"20230525110930824","creator":"WhiteFall","modified":"20230525111134103","modifier":"WhiteFall","tags":"","type":"text/vnd.tiddlywiki","text":"TiddlyWiki 5 的插件和黑客：https://tid.li/tw5/\n\n插件库：https://tid.li/tw5/plugins.html"},{"title":"TheBrain2level.js","text":"const Categories = [\n  {\n    name: 'Focusing',\n  },\n  {\n    name: 'History',\n  },\n  {\n    name: 'Link To',\n  },\n  {\n    name: 'Backlink From',\n  },\n  {\n    name: 'Tag To',\n  },\n  {\n    name: 'Tag By',\n  },\n  {\n    name: 'Parent',\n  },\n];\n\nexports.onMount = function (echart) {\n  var state = {\n    historyTiddlers: [],\n  };\n  echart.on('click', function (event) {\n    if (event.dataType === 'node') {\n      new $tw.Story().navigateTiddler(event.data.name);\n    } else if (event.dataType === 'edge') {\n    }\n  });\n  return state;\n};\n\nexports.shouldUpdate = function (_, changedTiddlers) {\n  return $tw.utils.count(changedTiddlers) > 0;\n};\n\nexports.onUpdate = function (echart, state) {\n  var focussedTiddler = $tw.wiki.getTiddlerText('$:/temp/focussedTiddler');\n  if (focussedTiddler && focussedTiddler.startsWith('$:/')) return;\n  var nodes = [];\n  var edges = [];\n  if (focussedTiddler && focussedTiddler !== '') {\n    var nodeMap = {};\n    nodeMap[''] = true;\n\n    // 当前关注的 Tiddler\n    nodeMap[focussedTiddler] = true;\n    nodes.push({\n      name: focussedTiddler,\n      // fixed: true,\n      category: 0,\n    });\n\n    // 历史路径\n    var nextTiddler = focussedTiddler;\n    var historyMap = {};\n    for (var i = state.historyTiddlers.length - 2; i >= 0; i--) {\n      var tiddlerTitle = state.historyTiddlers[i];\n      if (historyMap[tiddlerTitle]) continue;\n      if (tiddlerTitle === nextTiddler) continue;\n      if (tiddlerTitle.startsWith('$:/')) continue;\n      edges.push({\n        source: tiddlerTitle,\n        target: nextTiddler,\n        label: {\n          show: true,\n          formatter: 'history',\n        },\n      });\n      historyMap[tiddlerTitle] = true;\n      nextTiddler = tiddlerTitle;\n      if (nodeMap[tiddlerTitle]) break;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 1,\n      });\n      nodeMap[tiddlerTitle] = true;\n    }\n\n    // 链接\n    $tw.utils.each($tw.wiki.getTiddlerLinks(focussedTiddler), function (tiddlerTitle) {\n      edges.push({\n        source: focussedTiddler,\n        target: tiddlerTitle,\n        label: {\n          show: true,\n          formatter: 'link',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 2,\n      });\n      nodeMap[tiddlerTitle] = true;\n    });\n\n    // 反链\n    function pushBackLink(tiddlerTitle, target, stopRecursive) {\n      edges.push({\n        source: tiddlerTitle,\n        target,\n        label: {\n          show: true,\n          formatter: 'backlink',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 3,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddlerLinks(tiddlerTitle), (tiddlerTitle2) => {\n        pushBackLink(tiddlerTitle2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddlerBacklinks(focussedTiddler), (sourceTiddler) =>\n      pushBackLink(sourceTiddler, focussedTiddler)\n    );\n\n    // 指向哪些tag\n    function pushTag(tiddlerTitle, source, stopRecursive) {\n      if (!$tw.wiki.tiddlerExists(tiddlerTitle)) return;\n      edges.push({\n        source,\n        target: tiddlerTitle,\n        label: {\n          show: true,\n          formatter: 'tag',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 4,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddler(tiddlerTitle).fields.tags, (tiddlerTag2) => {\n        pushBackLink(tiddlerTag2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddler(focussedTiddler).fields.tags, (tiddlerTag) =>\n      pushTag(tiddlerTag, focussedTiddler)\n    );\n\n    // 被谁作为 Tag\n    function pushBackTag(tiddlerTitle, target, stopRecursive) {\n      edges.push({\n        source: tiddlerTitle,\n        target,\n        label: {\n          show: true,\n          formatter: 'tag',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 5,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddlersWithTag(tiddlerTitle), (tiddlerTitle2) => {\n        pushBackTag(tiddlerTitle2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddlersWithTag(focussedTiddler), (tiddlerTitle) => {\n      pushBackTag(tiddlerTitle, focussedTiddler);\n    });\n\n    // 父条目\n    var path = focussedTiddler.split('/');\n    if (path.length > 1) {\n      var parentTiddler = path.slice(0, -1).join('/');\n      $tw.utils.each([parentTiddler, parentTiddler + '/'], function (tiddlerTitle) {\n        edges.push({\n          source: tiddlerTitle,\n          target: focussedTiddler,\n          label: {\n            show: true,\n            formatter: 'parent',\n          },\n        });\n        if (nodeMap[tiddlerTitle]) return;\n        nodes.push({\n          name: tiddlerTitle,\n          category: 6,\n        });\n        nodeMap[tiddlerTitle] = true;\n      });\n    }\n  }\n  var index_ = state.historyTiddlers.indexOf(focussedTiddler);\n  if (index_ > -1) state.historyTiddlers.splice(index_, 1);\n  state.historyTiddlers.push(focussedTiddler);\n  state.historyTiddlers.slice(-10);\n  echart.setOption({\n    legend: [\n      {\n        data: Categories.map(function (a) {\n          return a.name;\n        }),\n      },\n    ],\n    title: {\n      text: 'The Brain View',\n      show: true,\n      top: 'bottom',\n      left: 'right',\n    },\n    series: [\n      {\n        name: 'The Brain View',\n        type: 'graph',\n        layout: 'force',\n        nodes: nodes,\n        edges: edges,\n        categories: Categories,\n        roam: true,\n        draggable: true,\n        zoom: 4.0,\n        label: {\n          position: 'right',\n          show: true,\n        },\n        force: {\n          repulsion: 50,\n        },\n        edgeSymbol: ['circle', 'arrow'],\n        edgeSymbolSize: [4, 10],\n        edgeLabel: {\n          fontSize: 5,\n        },\n        lineStyle: {\n          opacity: 0.9,\n          width: 2,\n          curveness: 0,\n        },\n      },\n    ],\n  });\n};\n","created":"20220104135404540","creator":"林一二","modified":"20220104140033871","modifier":"林一二","module-type":"echarts-component","tags":"Echarts可视化插件","type":"application/javascript"},{"title":"Tiddler Breadcrumbs Template","apex_tag":"Contents","created":"20221126143044343","creator":"WhiteFall","length_limit":"3","list-after":"$:/core/ui/ViewTemplate/title","modified":"20221126143801240","modifier":"WhiteFall","tags":"当前位置（Breadcrumbs）","type":"text/vnd.tiddlywiki","use_apex_tag":"true","text":"\\define yetAgain()\n<$reveal type='match' state='Tiddler Breadcrumbs Template!!use_apex_tag' text='true'>\n\t<$reveal type='match' state='!!title' text={{Tiddler Breadcrumbs Template!!apex_tag}}>\n\t\t<$link to=<<currentTiddler>>>\n\t\t\t<$view field='title'/>\n\t\t</$link>\n\t\t> \n\t\t<$list filter=<<Extra>> emptyMessage=''>\n\t\t\t... > \n\t\t</$list>\n\t\t<$list filter=\"\"\"$(End)$\"\"\">\n\t\t\t<$link to=<<currentTiddler>>>\n\t\t\t\t<$view field='title'/>\n\t\t\t</$link>\n\t\t\t> \n\t\t</$list>\n\t\t<br>\n\t</$reveal>\n</$reveal>\n<$reveal type='nomatch' state='Tiddler Breadcrumbs Template!!use_apex_tag' text='true'>\n\t<$link to=<<currentTiddler>>>\n\t\t<$view field='title'/>\n\t</$link>\n\t> \n\t<$list filter=<<Extra>> emptyMessage=''>\n\t\t\t.. > \n\t</$list>\n\t<$list filter=\"\"\"$(End)$\"\"\">\n\t\t<$link to=<<currentTiddler>>>\n\t\t\t<$view field='title'/>\n\t\t</$link>\n\t\t> \n\t</$list>\n\t<br>\n</$reveal>\n\\end\n\n\\define again()\n<$list filter=<<First>>>\n\t<<yetAgain>>\n</$list>\n\\end\n\n\\define finalFilter()\n<$set name=First filter=\"\"\"$(TheFilter)$ +[last[]]\"\"\">\n\t<$set name=End filter=\"\"\"$(TheFilter)$ +[butlast[]]  +[butfirst[]] +[first{Tiddler Breadcrumbs Template!!length_limit}] +[reverse[]]\"\"\">\n\t\t<$set name=Extra filter=\"\"\"$(TheFilter)$ +[butlast[]] +[butfirst[]] +[butfirst{Tiddler Breadcrumbs Template!!length_limit}] +[limit[1]]\"\"\" emptyValue='[is[system]!is[system]]'>\n\t\t\t<<again>>\n\t\t</$set>\n\t</$set>\n</$set>\n\\end\n\n\\define breadcrumbsEmptyMessage()\n<$set name=TheFilter filter=\"\"\"$(TheFilter)$ [<CurrentTag>]\"\"\"><<breadcrumbs>></$set>\n\\end\n\n\\define breadcrumbs()\n<$list filter='[<CurrentTag>tags[]] -[[$:/tags/SideBar]]' variable=CurrentTag emptyMessage=<<finalFilter>>>\n\t<$list filter=\"\"\"$(TheFilter)$ +[field:title<CurrentTag>]\"\"\" emptyMessage=<<breadcrumbsEmptyMessage>>>\n\t</$list>\n</$list>\n\\end\n\n<div style='width:100%'>\n<$reveal type='nomatch' state='$:/state/Global/ShowBreadcrumbs' text=true>\n\t<$button class='tc-btn-invisible' set='$:/state/Global/ShowBreadcrumbs' setTo='true'>\n\t\t{{$:/core/images/right-arrow}} 当前位置:\n\t</$button>\n</$reveal>\n\n<$reveal type='match' state='$:/state/Global/ShowBreadcrumbs' text=true>\n\t<$button class='tc-btn-invisible' set='$:/state/Global/ShowBreadcrumbs' setTo='false'>\n\t\t{{$:/core/images/down-arrow}} 当前位置:\n\t</$button><br>\n\t<$set name=CurrentTag value={{!!title}}>\n\t\t<$set name=TheFilter filter='[is[current]]'>\n\t\t\t<<breadcrumbs>>\n\t\t</$set>\n\t</$set>\n\t<hr color=\"#0081ff\" size=\"0.7\" noshade />\n</$reveal>\n</div>"},{"title":"Tiddloid","created":"20220527070945891","creator":"林一二","modified":"20231001021939029","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","type":"text/vnd.tiddlywiki","text":"[[Tiddloid|https://www.coolapk.com/apk/top.donmor.tiddloid]]\n\n在安卓平台上使用，仅支持单文件版本。"},{"title":"TiddlyDesktop","created":"20230506131733526","creator":"马不前","modified":"20231001020834870","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","type":"text/vnd.tiddlywiki","text":"[[介绍|https://bramchen.github.io/tw5-docs/zh-Hans/#Saving%20on%20TiddlyDesktop]]\n\n[[下载|https://github.com/TiddlyWiki/TiddlyDesktop/releases]]\n\n官方开发的桌面启动器，适合全平台，支持单文件版本和nodejs版本。"},{"title":"Tiddlyhost","created":"20231001021117481","creator":"马不前","modified":"20231001021217947","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[https://tiddlyhost.com/]]\n\n新手多平台同步最简单的方式，但受网络影响，打开会卡顿。会科学上网则不影响。"},{"title":"TiddlyTools/Time/action-timeout.js","text":"/*\\\ntitle: action-timeout.js\ntype: application/javascript\nmodule-type: widget\nauthor: Eric Shulman elsdesign@gmail.com\nrevision: 1.6\n\n$action-timeout invokes actions once after a specified delay, or repeatedly at a specified interval.\nThe timeoutID can be saved to a tiddler and used later to cancel an active timeout or interval.\n\n\\*/\n\n(function(){\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\nvar TimeoutWidget= function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\nTimeoutWidget.prototype = new Widget();\nTimeoutWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\nTimeoutWidget.prototype.execute = function() {\n\tthis.tid       = this.getAttribute(\"tid\",     \"\");\n    this.field     = this.getAttribute(\"field\",   \"text\");\n\tthis.clear     = this.getAttribute(\"clear\",   \"\");\n\tthis.delay     = this.getAttribute(\"delay\",   \"\");\n\tthis.interval  = this.getAttribute(\"interval\",\"\");\n\tthis.actions   = this.getAttribute(\"actions\", \"\");\n\tif (this.getAttribute(\"autostart\")) this.invokeAction();\n};\nTimeoutWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(Object.keys(changedAttributes).length > 0) { this.refreshSelf(); return true; }\n\treturn this.refreshChildren(changedTiddlers);\n};\nTimeoutWidget.prototype.allowActionPropagation = function() { return false; };\nTimeoutWidget.prototype.invokeAction = function(triggeringWidget,event) {\n    var id;\n\tvar self=this;\n\tif (self.clear)     { self.invokeActionString(self.actions,self,event); return clearTimeout(self.clear); }\n\tif (self.delay)     { id=setTimeout( function() { self.invokeActionString(self.actions,self,event); }, self.delay); }\n\tif (self.interval)  { id=setInterval(function() { self.invokeActionString(self.actions,self,event); }, self.interval); }\n\tif (self.tid && id) { $tw.wiki.setText(self.tid,self.field,null,id.toString()); }\n\treturn true; // Action was invoked\n};\nexports[\"action-timeout\"] = TimeoutWidget;\n})();","type":"application/javascript","module-type":"widget","author":"Eric Shulman elsdesign@gmail.com","revision":"1.6","created":"20150728060155235","modified":"20220424071912984","tags":""},{"title":"TiddlyWiki 出现 ResizeObserver loop limit exceeded 错误的解决方案","created":"20230323024200848","creator":"zm","modified":"20230323024633576","modifier":"zm","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"经 @oeyoews 的分析，导致该问题的原因可能为浏览器翻译插件所致（DeepL 翻译插件），禁用插件后问题解决\n\n在 [[talk|https://talk.tiddlywiki.org/t/error-screen-resizeobserver-loop-limit-exceeded/5785]] 和 [[GitHub|https://github.com/Jermolene/TiddlyWiki5/discussions/5821]] 上关于这个问题的讨论"},{"title":"Tiddlywiki Links","created":"20230615060904967","creator":"林一二","modified":"20230615061311310","modifier":"林一二","tags":"教程链接","type":"text/vnd.tiddlywiki","text":"[ext[TiddlyWiki Links Aggregator|https://links.tiddlywiki.org/]] \n\n本网站是一个由我们的社区编辑团队策划的有用和有趣的TiddlyWiki材料的链接集合。\n本网站如何运作\n\n本网站汇集了由TiddlyWiki社区个别成员策划的链接。它让你看到最新的链接，并通过分类和时间线来探索它们。\n\n这个网站在有一群人发布链接的情况下效果最好。个人的压力减少了，因为不是每个人都需要抓住每一个飞过的有趣链接。聚合效应减少了错误的影响。例如，如果一个人在一个不恰当的主题下错误地标记了一个链接，该网站将显示只有一个人添加了这个标签，而大多数人使用了更合适的标签。通过这种方式，我们希望出现一种群众的智慧，在描述和分类链接的最有用的方法上达成共识。\n\n* [ext[如何向本网站提供链接|https://links.tiddlywiki.org/#Contributing]]\n* [ext[了解本网站背后的工程原理|https://links.tiddlywiki.org/#Documentation]]\n\n在导入链接的过程中，一些主题被合并和重新标记。在这里阅读更多信息：\n\n[ext[主题地图指南|https://links.tiddlywiki.org/#Topics%20Map%20Guidelines]]\n\n也可以下载以原始tiddlers的形式提供的[ext[JSON文件原始数据集|https://links.tiddlywiki.org/tiddlers.json]]。\n\n在[ext[GitHub上加入TiddlyWikiLinks|https://github.com/TiddlyWiki/TiddlyWikiLinks]]的开发。"},{"title":"TiddlyWiki-xp","created":"20231001020546867","creator":"马不前","modified":"20231001020622930","modifier":"马不前","tags":"TiddlyWiki发行版本介绍","text":"[[官网|https://keatonlao.github.io/tiddlywiki-xp/#%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97]]\n\n最适合新手上手使用的版本。"},{"title":"tiddlywiki.files/fields中的对象类型数据","created":"20211112103554393","creator":"Sttot","modified":"20211112111650357","modifier":"Sttot","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"前置阅读：[[可是我的插件还是空的]]\n\n如果一个`field`的类型是对象，那么它的意思就是按指定的方式生成一些数据，其格式是这样的：\n\n```json\n{\n\t\"source\": \"string\",\n\t\"prefix\": \"string\",\n\t\"suffix\": \"string\"\n}\n```\n\n`source`【必填】是指应当生成什么样的数据，可以有如下几种：\n\n* `filename`：获取`fields`对应的tiddler文件的文件名作为字段的数据；\n* `filename-uri-decoded`：同上，并对文件名进行了[[URI编码|https://gk0wk.github.io/%25E5%2585%25B3%25E4%25BA%258EURI%25E8%25BD%25AC%25E4%25B9%2589%25E4%25B8%258E%25E8%25A7%25A3%25E6%259E%2590.html]]；\n* `basename`：同`fieldname`，但去掉了文件的类型后缀`.xxx`；\n* `basename-uri-decoded`：同上，并对其进行了[[URI编码|https://gk0wk.github.io/%25E5%2585%25B3%25E4%25BA%258EURI%25E8%25BD%25AC%25E4%25B9%2589%25E4%25B8%258E%25E8%25A7%25A3%25E6%259E%2590.html]]；\n* `extname`：获取文件的后缀名(含`.`)；\n* `created`：获取文件(在文件系统中)的创建时间，返回的是`Date`类型；\n* `modified`：获取文件(在文件系统中)的修改时间，返回的是`Date`类型；\n\n`prefix`【可选】：为生成的数据添加前缀；\n\n`suffix`【可选】：为生成的数据添加后缀；\n\n本教程为原创，主要阅读了[[boot.js|https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js]]内的以下函数：\n\n* `$tw.loadTiddlersFromSpecification`"},{"title":"tiddlywiki的wiki属性","created":"20230619153111154","creator":"马不前","modified":"20230619153303014","modifier":"马不前","tags":"笔记思维","type":"text/vnd.tiddlywiki","text":"太微有太多内容可以分享了，写起来太复杂，我只好从一个简单，但我认为这是tiddlywiki与其他笔记软件最大的不同之处，展开分享。如标题所见，也如这个软件名称所见，tiddlywiki是一款wiki式的笔记软件。\n\n> ''对我来说，维基的魅力在于它最终会打破主流的面向打印文档和电子邮件的范式。''\n> The allure of the wiki for me was the feeling that it could eventually disrupt the prevailing paradigm of print-oriented documents and emails.\n\n!! 概念重复与复用性\n\n我已经受够了那种pdf式的单个文档。倒不是说一定要有链接或者其他内容，而是不想一个概念反复说。我经常读论文的时候发现，有些人的论文就像是概念的随机组合。随机组合出一个名词，解释一下，组合成另一个名词时，又解释一下。大部分文科博士论文都有这样的弊端。真的读吐了。好像重复言说概念会让概念变得更清晰一样。他们无休止地扩展概念的内涵与外延，但他们的解释却是那么苍白无力，他们没能把握到背后更本质的抽象事实，他们也不确定背后的抽象事实。所以只能是这样在文字上转圈。\n\ntiddlywiki强调的是笔记的复用性。通常为了这条笔记能够在另一个条目里链接甚至时嵌入，需要对这条笔记做一个概念化的处理。如果有新的内容产生了，可以考虑把新的内容处理成新的条目。而在这个过程中，就有对信息组织的思考，有些人可能会觉得这部分内容和另一部分可以放在一起解释说明，有些人会觉得两者分开会更好，更有利于说明两者之间的区别。同样的内容，不同的人来处理会有不同的组织形式。\n\n不管是何种组织信息，但都有一个共同的目的，就是让概念更清楚，更简洁明了。甚至可以说做到了像公式一样能够组合。而不是把内容倒入模板里去填充。\n\n!! 概念不一致与使用概念分析问题\n\n当然这样反而造成了概念的不一致。甚至内涵也不一致。这是好事吗？对学术来说，可能不是好事，因为没有统一的概念就写不了教材，就不能做其他的事情了。但对于个人来说，这是好事。这意味个体凭借有限地材料，尽可能在不分裂事实的情况下，分析事实的本质。\n\n而另一个好处，则是尽可能用已有的概念去分析问题。已有的概念是自己wiki里已有的概念，而不是别人表述的概念。别人的概念在转换成自己的概念之前，只是信息而已。当然这样说可能感觉不到什么。因为我们平时不是用概念去分析问题的，我们是用经验去分析问题的。而把概念转换到经验里去，就很容易出问题。\n\n!! 对笔记的整理\n\ntiddlywiki针对的应该是有大量笔记且一直持续有记录整理的人。他们会不断更新删改笔记。大部分人的笔记要么是依赖老师或教材提供，要么就是写了再也没有管。对笔记的长期维护，会让笔记不断产生新内容。这就是为什么有些人一直有东西可以写，一直有东西想要去了解补充。我觉得如果钱钟书学会了tiddlywiki，那他应该会写更多的笔记。钱钟书的笔记常常会有“补、注、删、另”等内容说明，但如果不用心去维护的话，通常会遇到下面的问题。\n\n> 一事而复见数篇，宾主莫辨。\n\n这虽是史家之言，现在可以用维基百科的形式，但于个人而言，这种情况仍旧存在。原因有很多，但多半是遗忘。之前写过的内容不记得了。而且之前写的时候与其他内容牵扯过多。这些其实都可以用tiddlywiki解决。也不用另外表明补、注、删、另等内容了，直接在内容上修改。加上引用和嵌入，基本上可以满足。\n\n我时常会去整理自己的笔记，把自己偶然闪过的想法记录下来。整理的时候经常会发现这偶然闪过的想法，其实是对之前看到书籍某一笔记的延伸思考。但当时记笔记的时候并不会这样去想，也不会特意去想，或者说就算特意去想了，也不如偶然闪过时想的精妙。这就可以联合起来，进一步拓展思考。\n\n!! 可打印的形式\n\n但这还是不能说明为什么tiddlywiki的wiki属性会比像obsidian的markdown编辑器更胜一筹。用obsidian也可以搭建自己的wiki啊。毕竟wiki的特点，就是两个，一个词条化，一个双链。\n\n如果非要说的话，就是打印了。obsidian用户更可能写长文，通过三层标题来不断细分内容。但在tiddlywiki，可能一个三分的内容就直接分成九个条目了。九个条目的内容，再重新组织起来。而当下次写这个方面的内容时，obsidian会选择块链接，或者说层级链接。而tiddlywiki会选择链接单独条目。\n\n这也就决定了obsidian会更有利于导出成pdf文件打印出来。当然可以在每一段落旁注释一下，可以跳转到多少页查看。而tiddlywiki打印出很多条目时，只能把所有条目都拿在手上，因为不知道下一个条目联系了其他多少条目。\n\n笔记和文档是两种不一样的东西。但现在很多人写笔记其实是在写文档，以文档的形式保存笔记。所以也有一些人直接用word来写笔记。但我觉得不如直接把笔记看作文档，甚至抛弃文档的概念。笔记与文档最大的区别就在于需要不需要打印出来。文档是为了能够打印出来的，而笔记不需要这一点。\n\n当然有些人会考虑电子笔记无法保存的问题，必须依靠打印才能保存，但这真的不如考虑多备份几次。\n\n!! 对目录式结构的批评\n\n现在我基本上抛弃了目录式结构，不管是单个笔记还是整体上的笔记。整体上目录式结构一般是仿照图书馆的分类方法，或者依照自己一定的分类方法，把笔记文件严格按照树状结构层级分类。目前大部分的笔记软件都在抛弃这一点，通过多重标签或者双链来实现网状笔记，因为网状笔记更符合大脑的思习惯，既有一定的集中，也有一定的发散思维。这也催生了类似导图或者白板等可视化笔记软件的出现。\n\n但单篇笔记文章里的目录式结构，大部分人还是改不过来。或者说通常会认为自己分类清楚了，就对这些内容把握清楚了。实际上，如果你要把两部分内容，用不同的标题表示，为什么不把这两部分内容独立出来，成为不同的笔记呢？虽然在这篇文章里，这一部分内容可能不是重点突出的，但也许在另一篇文章里，这部分内容就是重点突出的。而且如果论述是两个不同方向，为什么要把他们局限于同一个文本空间里，他们不可以有更大的拓展空间吗？那当然是可以的。这就是tiddlywiki目前相比其他笔记软件更为独特的wiki属性。\n\n有一个想法，就有一个条目。想法重合了，就整理在一起。如果有多个关于某一主题的想法，那就再写一个想法。比如我对这其中三个想法，有了一个新想法，我就写一个想法出来。如果我对这里五个想法，产生了一个新想法，那我再写另一个想法出来。概念之间自然会有重合的地方，但不是太过于重合，一般都会独立出来。\n\n理论上还可以进一步讨论，为什么不再更细粒度一点呢？比如一句话，或者词语。这就会造成复杂度超出大脑授受范围了。但也不是说没有这方面的软件，比如the brain好像就有这种词语的倾向，但我没有实际使用过，就不继续讨论。另一个是这种思路和卢曼的卡片笔记法有什么区别？应该说卢曼的卡片笔记法重点在于文献管理与笔记内容复习。文献管理不用多说，他每读到一本书的内容就会记下读了什么内容，在什么书上读到的。在什么书上读到的，就是文献管理，记录笔记材料的来源。读了什么内容，就是做笔记了。但因为他有独特的编码方式，再加上他是个工作狂，经常会翻阅这些笔记卡片，这就类似于间隔重复般复习了笔记内容。但最终他输出的，仍然在是以传统学术书籍的方式。当然这是说他对我们读者输出的是这样的方式，他对自己输出可能方式更多样。我使用tiddlywiki就是希望对读者输出的就是这种wiki内容，而不是传统学术书籍。\n\n当然以上只是为了自己记笔记方便。如果可以的话，真的希望以后可以用tiddlywiki这种形式发表论文。目前学术界应该还不接受这种形式的学术论文。这种只适合自己记。如果有人要看的话，那就真有一种进入花园甚至是丛林的感觉了。因为表面上杂乱无章，实际上是需要深入理解，到文本的内部去理解表达的内容，才有可能真正的明白所写的内容。\n\n!! 与其他wiki软件比较\n\n标题虽然如此，但其实我并没有用过其他wiki软件。我也不知道如何比较，只能是留个坑在这里，表明仍然有其他wiki软件，具体或可参考这篇文章[[优秀开源wiki系统汇总|https://zhuanlan.zhihu.com/p/332458032]]。\n\n\n我越想深入描述内心的想法，就越是难以描述清楚。上面的内容就因此变得更加驳杂。但这是旅程的开端，只能是在路上完成。<<fnote \"放在太微中文教程这边的文章就以文章的形式好了，省得太碎片化，看起来不方便。\" >>"},{"title":"TiddlyWiki发行版本介绍","created":"20231001020203086","creator":"马不前","list":"官方单文件版本 TiddlyDesktop Tiddlyhost TiddlyWiki-xp TidGi太记 [[Quine 2]] Tiddloid Neotw定制版 墨屉 Stroll Noteself 其他常见版本","modified":"20231001153254633","modifier":"马不前","tags":"幻灯片","text":"这里只列举一些常见的选项，不是全部。tiddlywiki有太多发行版本了，因为用户可以自己diy搞一个。装上相应的插件和配套设施就可以了。发行版本和启动器可以分开使用，也可以一起使用，差别不大。\n\n<$presentation $height=\"600\">\n<$list filter=\"[tag[TiddlyWiki发行版本介绍]sortby[list]]\">\n<$slide tiddlerTitle={{!!title}} backgroundColor={{!!color}}>\n\n!! <$link to=<<currentTiddler>> ><<currentTiddler>></$link>\n\n<$transclude mode=\"block\" />\n</$slide>\n</$list>\n</$presentation>"},{"title":"Tiddlywiki贡献者","created":"20230102045032482","creator":"马不前","modified":"20230102072245638","modifier":"马不前","page-cover":"","tags":"社区建设","type":"text/vnd.tiddlywiki","text":"\\define card-image(filter)\n<div class=\"card-columns\">\n<$list filter=<<__filter__>>>\n<div class=\"card\">\n<div class=\"card-body text-center\">\n\n!! <$link><<currentTiddler>></$link>\n\n {{!!text}}\n</div>\n</div>\n</$list>\n</div>\n\\end\n\n<<card-image filter:\"[tag[Tiddlywiki贡献者]]\">>\n\n''说明''\n\n* 官方中文文档没有翻译他们的人名。讨论起来很不方便，因此建立系列条目，目的是让更多的人记住他们。并且他们通常也会有自己的网站，可以去访问欣赏和学习。\n\n* 采用设拉子里的图片卡组设计。官网上的图片效果不知道如何处理，在这边效果显示不好。\n\n* 卡片主体由三部分组成，一部分是标题，为中文译名。显示为二级标题的样式。一部分为原英文名，有caption字段，正文里也有。格式为一级标题。突出重点。第三部分就是介绍和github链接了。"},{"title":"tiddlywiki与obsidian的对比","created":"20230228081528347","creator":"zm","modified":"20230904053400786","modifier":"马不前","tags":"太微背景介绍","type":"text/vnd.tiddlywiki","text":"[[对比网站链接|https://www.slant.co/versus/5116/37045/~tiddlywiki_vs_obsidian-md]]\n\n有不少人是从 Obsidian 转换到 TiddlyWiki 的，可能会对两款软件进行对比。通过上述网站可以看到比较详细的对比内容。不过对比内容好像是用户自发写的，有一定的主观色彩。\n\n也可参考群友写的另一篇[[文章|https://imzm.im/note-taking-apps/]]。\n\nTiddlyWiki 与 Obsidian 的简要对比：\n\n* TiddlyWiki 默认情况下单页面信息量（或称笔记数量）相比 Obsidian 更多，方便笔记之间跳转；Obsidian 支持笔记多窗口，自由排布\n* TiddlyWiki 可以不依赖任何软件运行（除了浏览器本身），本身就是一个简单的 HTML 文件，而 Obsidian 本质上是一个 Markdown 编辑器，可以在不打开软件的情况下增删改所有笔记\n* TiddlyWiki 的编辑器默认情况下较为局促，写作空间没有 Obsidian 敞亮，需要插件或主题调整\n* Obsidian 默认拥有标题和列表缩放功能，Tiddlywiki 缺乏这个功能（需要插件或 Macro 辅助）\n* 两者都是基本上全平台，Obsidian 新兴但是社区热闹氛围好，TiddlyWiki 历史悠久但是小众，圈子较窄\n* TiddlyWiki [[完全免费开源|笔记软件开源不开源有什么区别]]（基于 BSD3 开源许可协议），官方不提供任何付费服务，纯粹的用爱发电项目，而 Obsidian 免费但不开源，官方提供付费同步 Sync 和付费发布 Publish 服务\n* 两者均为程序/数据分离设计（Node.js 版 TiddlyWiki），故支持各种不同的同步/备份方式，可根据自身喜好设定，不受软件本身限制\n* TiddlyWiki 基于 WikiText（方言）语法，Obsidian 基于 Markdown，默认情况下前者的表格表现形式比后者更好（例如可以很轻松地合并单元格），语法优秀功能非常丰富，后者更加易上手，但是受语言限制较大\n* Tiddlywiki 自带单个笔记加密和整个笔记本加密（单文件版）功能，Obsidian 原生不支持加密功能（本质上是管理本地文件夹），通常通过插件或者第三方应用（如 VeraCrypt）\n* Tiddlywiki 内置[[筛选器]]功能，教程较多，而且可以和任何插件协作；Obsidian 需要靠 dataview 等第三方插件，无法与其他插件轻易互通，需要学习和折腾好多次\n\n[[如何把obsidian的笔记转移到tiddlywiki？]]"},{"title":"TiddlyWiki中文网站示例","created":"20220515160411034","creator":"oeyoews","modified":"20230912050536789","modifier":"WhiteFall","page-cover":"","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"* [[neotw example]]\n* [[林一二的模因和想法|https://onetwo.ren/wiki/]]\n* [[zhiheng|https://wiki.zhiheng.io/]]\n* [[rizi|https://rizi.me/]]\n* [[机杼|https://dongrentianyu.github.io/WENAI/]]\n* [[凡尘芥之|https://fcjz.github.io/notebox/]]\n* [[FSpark|https://wiki.fspark.me/]]\n* [[zm : 仿生猫不会梦见电子猫粮|https://jefftay.com/]]\n* [[WhiteFall|https://zacharia2.github.io/T2NLC-PubWiki/]]"},{"title":"TiddlyXP","created":"20230613090811415","creator":"林一二","keywords":"新建","modified":"20230613090907124","modifier":"林一二","tags":"教程链接","type":"text/vnd.tiddlywiki","text":"Github Pages 访问链接：[[TiddlyXP 教程站 - 全面的入门、进阶教程|https://keatonlao.github.io/tiddlywiki-xp/]]\n\n非常全面、易读，包括了很多非常基础的操作，例如「如何新建第一个笔记」"},{"title":"TidGi太记","caption":"太记","created":"20211005051214953","creator":"林一二","modified":"20231013042239012","modifier":"林一二","tags":"全平台软件和存储方式 TiddlyWiki发行版本介绍","type":"text/vnd.tiddlywiki","text":"TidGi 是 TiddlyWiki + Git 的缩写简称，因为太记除了作为太微的[[启动器]]以外，还能自动进行 Git 细粒度同步备份，在备份的同时节省硬盘空间。\n\n官网是[[tidgi.fun - 太记部署|https://tidgi.fun/]]，使用文档和截图都在上面。（备用：[[太记官网 - Github Pages 部署|https://tiddly-gittly.github.io/TidGi-Official-Website/#:Index]]）\n\n[img[TiddlyGit-Screenshot.png]]"},{"title":"TidGi预设插件","created":"20221213080831060","creator":"WhiteFall","modified":"20230429134424205","modifier":"WhiteFall","order":"4","tags":"插件列表","type":"text/vnd.tiddlywiki","text":" ! TidGi插件\n\n<<<\n提示；仅对插件简单介绍，详细说明请阅读插件自述文件。\n<<<\n\n!必要插件（18）\n* tiddlywiki/filesystem\n* tiddlywiki/tiddlyweb（这个插件在浏览器中运行，以同步TiddlyWeb兼容的服务器（包括TiddlyWiki 5本身，在Node.js上运行）的tiddler变化。在Node.js下运行时，它是惰性的。由于该插件提供了与服务器同步设置的机制，所以通过浏览器禁用该插件不能被撤销。）\n* twcloud/tiddlyweb-sse（使用SSE立即将变化从浏览器同步到TW5（node.js）。）。\n* linonetwo/source-control-management（SCM、本插件利用暴露的自定义 API 实现：查看本地 NodeJS 版 TiddlyWiki 是否完全与 Github 备份云同步了。一键同步本地和云端。当点开 SCM 标签页的时候，会进行一次 git 环境检查，因为使用的 git 库 dugite 比较卡，所以只进行一次检查，如果需要刷新，需要来回切换一下 tab。）\n* linonetwo/sub-wiki\n* linonetwo/github-external-image（使用GitHub作为你的图像存储，为所有图像添加_canonical_uri，指向raw,github。）\n* tiddlywiki/qrcode（二维码）\n* linonetwo/tw-mobile-sync（手机应用 ↔ 桌面应用 ↔ 云端。本插件可以让你在基于NodeJS技术的桌面应用（例如太记）和基于HTML文件的手机端（例如Tiddloid安卓应用）之间同步数据。）\n* linonetwo/open-in-external-app（Requiers TidGi，一个工具条按钮，用于在OS默认阅读器中打开PDF tiddler。）\n* linonetwo/service-worker（使用service worker来缓存内容，使其即使在离线状态下也能工作，并且可以作为一个App添加到桌面。安装后，你必须将你的维基发布为一个HTTPS网站，以使其发挥作用。）\n* dullroar/sitemap（网站地图：https://zhuanlan.zhihu.com/p/354920861）\n* linonetwo/opened-tiddlers-bar（这个插件提供了VSCode风格的 \"已打开的Tiddlers \"顶栏）\n* linonetwo/tw-react （tiddlywiki-React插件，作为许多插件的共享依赖项，减少这些插件的大小。react使创建交互式UI变得其轻而易举。为你应用的每个状态设计简洁的视图，当数据变动时React能高效更新并渲染合适的组件。）\n* linonetwo/zx-script（在tw中执⾏js，类似jupyter）\n* linonetwo/prevent-edit（这个插件主要是让在线部署后的 Wiki 不会弹出「有变动关闭网页前请保存」这样的对话框。）\n* linonetwo/itonnote（预配置了一系列琐碎的内容，例如侧边栏的文件目录选项卡、图章按钮的文本片段，引文宏与打开GitHub图片宏，预制社区插件库以及一些太微配置等等。）\n* linonetwo/pinyin-fuzzy-search（提供模糊搜索和拼音搜索的能力）\n* linonetwo/commandpalette（太记侧边栏的搜索/命令。）\n\n\n!功能增强（46）\n* linonetwo/tw-whiteboard（TW中微小的绘图应用程序，使用tldraw。提供图表部件和白板视图。）\n* linonetwo/tw-calendar（日历插件。小工具和页面布局，根据创建、修改、开始日期和结束日期字段，在日历和议程上显示提示符。）\n* linonetwo/inverse-link-and-folder（反向链接和文件夹）\n* linonetwo/preview-glass（修改tobibeer/preview插件，使其在鼠标移出链接时自动关闭。添加自定义样式，使其像玻璃一样。）\n* bimlas/kin-filter（目录树选择筛选器）\n* bimlas/locator（Locator提供了一个通用接口，用于在你的tiddlers之间进行导航和搜索，过滤它们，而不需要编写过滤表达式。该插件包含一个目录小部件和一个增强的搜索引擎，其中包含一个可视化的过滤器生成器，可以通过标签和字段值过滤结果。你可以将tiddlers组织成任何数量的树，甚至按自定义字段或文本中的链接。与经典的目录、标准搜索、过滤搜索和标签列表不同，这个插件有机地处理这些功能。）\n* flibbles/relink（当重命名一个tiddler时，Relink可以更新所有其他tiddler的字段、过滤器和小工具。）\n* flibbles/relink-markdown（对Relink的Markdown支持。）\n* flibbles/relink-titles（用来自重新链接的tiddler的标题重命名tiddlers）\n* flibbles/relink-fieldnames（用与Relinked tiddlers相匹配的标题重命名字段名）\n* tobibeer/appear（这个插件提供了$appear小组件，可以呈现弹出式窗口和滑块（内联或块）以及手风琴菜单。）\n* wikilabs/edit-tabs（这个插件为每个标签添加了一个小链接图标。）\n* felixhayashi/hotzone\n* Gk0Wk/TW5-CodeMirror-Enhanced（为TiddlyWiki的CodeMirror编辑器提供一个灵活而丰富的扩展框架(包括高亮、补全、预览等功能)，任何人都可以使用此框架为编辑器编写扩展插件！）\n* tiddlywiki/codemirror、codemirror-autocomplete、codemirror-closebrackets、codemirror-closetag、codemirror-keymap-sublime-text、codemirror-mode-css、codemirror-mode-htmlmixed、codemirror-mode-javascript、odemirror-mode-markdown、codemirror-mode-xml、codemirror-search-replace（提供了语法高亮、显示行号、代码编辑、自动补全等等丰富的编辑功能。）\n* kookma插件\n** kookma/commander（简而言之，Commander是一个对tiddlers进行批量操作的独特工具。）\n** kookma/favorites（Favorites插件是一套用于在Tiddlywiki中创建收藏夹（书签）的工具。每个收藏夹项目都是一个Tiddler的快捷方式。收藏夹可以被组织在文件夹中。）\n** kookma/refnotes（Refnotes是一个Tiddlywiki插件，用于创建和管理脚注、缩略语、引文和参考文献。Refnotes可以创建书目，但为了获得最佳性能，以及使用导入bibtex条目，需要使用官方bibtex导入器插件。）\n** kookma/shiraz（Shiraz是一个由样式表、模板和宏组成的小框架，用于在Tiddlywiki中创建时尚内容。Shiraz具有自定义的元素，如警报、卡片、面板、图像、静态表格、动态表格、快速表格、徽章、文本等。）\n** kookma/todolist（用于创建todo列表和间隙性日记。）\n** kookma/utility（这个实用插件的目的是为作者提供一套工具。这些工具包括：简单的跨页，显示tiddlers的原始内容，读者模式，wikitext宏，在视图模式下显示字段，linkify，代码，docit，以及更多的工具。）\n** kookma/hsl（Highlight Selected Lines (HSL)）\n* tiddlywiki/dynaview\n* tiddlywiki/dynannotate（Dynannotate插件允许创建和显示文本内容的注释。依赖于Dynaview插件。）\n* tiddlywiki/katex（这是一个用于数学和化学排版的TiddlyWiki插件。它是完全独立的，不需要互联网连接就能工作。它在浏览器和Node.js下都能工作。）\n* tiddlywiki/highlight（这个插件使用Ivan Sagalaev的v9.18.1 highlight.js提供代码块的语法高亮。）\n*钓鱼插件\n** oflg/fishing（可在[[墨屉手册|https://tiddlymemo.org/manual/zh-Hans]]查看安装使用教程。）\n** oflg/fishing-analysis\n** oflg/fishing-catchfish\n** oflg/fishing-zh-Hans\n* Gk0Wk/echarts（将强大的可视化工具 ECharts 以优雅的方式与 TiddlyWiki 相结合。）\n* Gk0Wk/sidebar-resizer（会在侧边栏的左侧边缘添加一个可拖动的边框，当鼠标移动到左侧边缘时会看到这个边框。拖动这个边框可以改变侧边栏的宽度，拖动到靠近窗口右侧边缘时就会自动收起侧边栏。）\n* Gk0Wk/page-toc（利用条目的H1~H6标题为条目生成可导航的目录。没错，就是对单个条目生成的标题目录。而且目录是点击可导航的，就是说会滚动到标题所在的位置！）\n* telmiger/PluginSize（这个插件可以计算所有已安装的插件的大小，包括主题和语言。）\n* telmiger/HarveyBalls（哈维球：百分比计划圆形表意文字。PluginSize插件会用到它。哈维球是用于定性信息视觉交流的圆形表意文字。它们通常用于比较表，以表示某一特定项目符合某一标准的程度。）\n* telmiger/EditorCounter（EditorCounter插件可以在编辑视图中显示单词和字符的计数器。在单页维基中，它可以在后台自动保存文本）\n\n\n!锦上添花（7）\n\n* Gk0Wk/focused-tiddler（检测你正在浏览的Tiddler）\n* Gk0Wk/notionpage-covericon（安装插件后，在每个tiddler的标题上方会有两个按钮(鼠标悬浮在上面就会显示)，分别用于添加图标(默认是emoji📒)和添加页面封面。点击图标就可以修改图标内容，点击修改封面就可以修改封面地址(可以是url或者tiddler标题)。）\n* linonetwo/copy-on-select（当按住鼠标1秒时，将你在维基中选择的内容复制到剪贴板中。）\n* linonetwo/slate-write（所见即所得辑模式插件）\n* linonetwo/template-list（在新建条目时展示一系列可用模板）\n* kookma/solution\n* mat/field-value-selector（一个EditView模板，它在 \"新字段 \"区域下面添加了一个小箭头按钮。当你填入一个自定义字段名，然后点击这个按钮，你会得到一个下拉菜单，显示该字段名的所有现有字段值。）\n"},{"title":"timimi浏览器扩展安装和使用","created":"20220515112847020","creator":"WhiteFall","modified":"20221227072546942","modifier":"WhiteFall","tags":"如何保存 插件使用","type":"text/vnd.tiddlywiki","text":"[[帮助手册源地址|https://ibnishak.github.io/Timimi/]]\n\n\n!!!安装\n\n\n* 从[[Chrome应用商店|https://chrome.google.com/webstore/detail/timimi/mnggafnmmhdoplbffagjihajeeikgbcg]]安装timimi浏览器扩展\n* 在 Edge 浏览器中，打开扩展 > 扩展管理 > Timimi 选中“允许访问文件 URL”\n* 从[[Github|https://github.com/ibnishak/Timimi/releases]]下载并运行timimi-2-1-1-Windows-Chrome-Chromium-Opera.exe\n\n!!!使用\n\n\n* 添加备份路径\n**如果留空，备份将在与原始文件相同的文件夹中创建\n\n\n**您可以设置绝对路径或相对路径。如果它是绝对路径，则将在该文件夹中创建所有文件的备份。如果是相对路径，则每个文件的备份将保存在相对于原始文件的文件夹中。\n\n\n*选择备份方法并根据您的喜好更改相应的设置。\n\n\n*单击提交按钮。\n\n\n*\"重要提示\"：如果您在浏览器中打开了一个 tiddlywiki 文件，则在刷新该选项卡之前，更改后的设置不会反映出来。\n \n \n\n\n!!!备份方式\n\n\n*Every nth save（每 n 次保存）\n\n*Every nth minute（每隔n分钟）\n\n*First In First Out（先进先出）\n\n*Tower of Hanoi（汉诺塔/河内塔算法）\n"},{"title":"tips-20230220100356592","class":"o-random-tip","created":"20230220100356597","mask-closable":"yes","modified":"20230220100616299","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 在太微中文教程上， 点击侧边栏的 {{$:/plugins/oeyoews/tiddlywiki-random-tip/icon}} 图标， 即可添加启动随机提示\n\n<<random-author>>\n"},{"title":"tips-20230220153315628","class":"o-random-tip","created":"20230220153315632","mask-closable":"yes","modified":"20230220154727555","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"<!-- add tips here -->\n> 如果你刚刚接触tiddlywiki, 你一定会被它的单文件特性惊艳到.\n> <<random-author>>\n"},{"title":"tips-20230428122141794","class":"o-random-tip tc-modal-centered","created":"20230428122141798","creator":"WhiteFall","mask-closable":"yes","modified":"20230430115845099","modifier":"马不前","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 阅读少量文章以便于快速认知和使用TidGi ：\n> ''选择TidGi(太记)'' -> [[安装和删除插件]] -> [[tiddlywiki简易教程|https://zhuanlan.zhihu.com/p/555893660]] -> [[插件列表]] -> [[学习Shiraz插件|$:/plugins/kookma/shiraz]] -> [[插件使用]] -> ''学习[[笔记思维]]''\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429104447166","class":"o-random-tip tc-modal-centered","created":"20230429104447172","creator":"WhiteFall","mask-closable":"yes","modified":"20230429122521618","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> [[TidGi（太记）|https://github.com/tiddly-gittly/TidGi-Desktop]]、NodeJS版TiddlyWiki、[[Knowledge base Template（TidGi默认知识模版）|https://github.com/tiddly-gittly/Tiddlywiki-NodeJS-Github-Template]]、[[TiddlyMemo（墨屉）|https://tiddlymemo.org/manual/zh-Hans]]、[[TiddlyWiki XP（XP：快速体验）|https://keatonlao.github.io/tiddlywiki-xp/]] 等等，本质上都是TiddlyWiki（太微）。\n> 不同的是：TidGi更容易使用，因为它是应用而非系统或框架。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429105357797","class":"o-random-tip tc-modal-centered","created":"20230429105357802","creator":"WhiteFall","mask-closable":"yes","modified":"20230430115646821","modifier":"马不前","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> [[太微是开发框架/知识管理操作系统，不是笔记软件|太微与太记的区别]] ——林一二\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n\n"},{"title":"tips-20230429110453871","class":"o-random-tip tc-modal-centered","created":"20230429110453874","creator":"WhiteFall","mask-closable":"yes","modified":"20230429110914654","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 还记得奥卡姆剃刀原则吗？''如无必要，勿增实体。'' 功能越多，问题越多。简单实用稳定就是最好的！\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429110936391","class":"o-random-tip tc-modal-centered","created":"20230429110936393","creator":"WhiteFall","mask-closable":"yes","modified":"20230501114653114","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> [[最简单的TiddlyWiki使用方法|怎么最简单地使用TiddlyWiki？]]：学习简单的WikiText语法、筛选器（用于筛选条目）、[[学习使用Shiraz|$:/plugins/kookma/shiraz]]、使用TidGi（太记）。剩下的就交给开发者和Geek（极客）吧！\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429112332978","class":"o-random-tip tc-modal-centered","created":"20230429112332983","creator":"WhiteFall","mask-closable":"yes","modified":"20230429122054209","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 如何升级Wiki.HTML（单文件Wiki）? \n> 使用 官方的[[Upgrade Wizard|https://tiddlywiki.com/upgrade.html]]网页 升级你的单文件Wiki吧！\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429113605614","class":"o-random-tip tc-modal-centered","created":"20230429113605622","creator":"WhiteFall","mask-closable":"yes","modified":"20230429122336398","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> ''安装插件注意事项''：插件要尤为注意插件之间的依赖关系，缺少依赖将会导致功能性错误或者其它的不可知问题。安装插件之前请谨慎备份自己的TiddlyWiki。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>"},{"title":"tips-2023042911372683","class":"o-random-tip tc-modal-centered","created":"20230429113726087","creator":"WhiteFall","mask-closable":"yes","modified":"20230607105956522","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> ''掌握少量的快捷键有助于提高效率。'' \n> `alt-N`（新建条目）、`ctrl-Enter`（保存条目）、`Esc`（取消保存条目）、`shift-Esc`（取消保存条目之太记默认知识模版）、`Ctrl + S`（保存wiki快捷键）、`TAB`：从条目标题跳转到条目内容快捷键、双击编辑条目插件：`2click2edit`。\n\n> 更多的快捷键请查看：控制台 - [[快捷键|$:/core/ui/ControlPanel/KeyboardShortcuts]]选项卡。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>"},{"title":"tips-20230429114137795","class":"o-random-tip tc-modal-centered","created":"20230429114137800","creator":"WhiteFall","mask-closable":"yes","modified":"20230429115259275","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 太微模板是指''预制的太微''，相对于空白太微而言根据作者的需求和想法包含了一些功能性的插件和美观性的主题布景以及为了满足插件之间依赖关系或者整体性设计而封装的具有明显功能性的太微。\n\n> 太微模板：[[TiddlyMemo（墨屉）|https://tiddlymemo.org/manual/zh-Hans]]、[[Knowledge base Template（太记默认模版）|https://github.com/tiddly-gittly/Tiddlywiki-NodeJS-Github-Template]]、[[TiddlyWiki XP|https://keatonlao.github.io/tiddlywiki-xp/]]\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429115731668","class":"o-random-tip tc-modal-centered","created":"20230429115731671","creator":"WhiteFall","mask-closable":"yes","modified":"20230501064751372","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 条目模板是指''预制的具有特定布局和样式的模板条目''。它通常是为了美化和简化输入内容或满足特定需要的一种特殊的条目，比如在xp中你可以通过引用条目模板瞬间美化当前的条目使其变得好看，在墨屉中，通过引用问答或者填空模板进行渐进式学习。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429115905506","class":"o-random-tip tc-modal-centered","created":"20230429115905510","creator":"WhiteFall","mask-closable":"yes","modified":"20230429115926617","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 很久很久以前，在一条河流里，生活着许多许多的小鱼儿（Tiddlers），它们快活地在故事河（Story River）里游来游去。这些小鱼儿每一个都有自己的名字（条目名），自己的种类（内容类型），它携带的信息组成了鱼儿美丽的身体与骨架，附加的字段构成了它美丽的鳞片。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>\n"},{"title":"tips-20230429124015477","class":"o-random-tip tc-modal-centered","created":"20230429124015480","creator":"WhiteFall","mask-closable":"yes","modified":"20230429124419696","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 发现太微中文网站没有更新？\n> 使用 Ctrl + F5 强制刷新浏览器缓存后，在看一下吧。\n\n<<random-author \"WhiteFall\" \"https://github.com/Zacharia2\">>"},{"title":"tips-20230607105024828","class":"o-random-tip tc-modal-centered","created":"20230607105024832","creator":"WhiteFall","mask-closable":"yes","modified":"20230607105717502","modifier":"WhiteFall","subtitle":"{{$:/plugins/oeyoews/tiddlywiki-random-tid/did-you-know}}","tags":"Tiddlywiki5Tip","type":"text/vnd.tiddlywiki","text":"> 太微知识库就是内心的映射，不仅包括知识，也包括各种方法和思维模式。\n\n> 我的 wiki 用的这套方法就是我心中一直在用的方法，我只是通过太微让他知行合一而已。复杂的笔记方式或方法若变成插件，就不用放在脑子里了。就像钓鱼插件不就免去了卡片盒笔记法/抽认卡盒那种翻找还有加编号加复习时间等等。虽然插件的用法稍微复杂一点，至少比方法本身简单了，可以说是一种知识的压缩了。\n\n\n<<random-author \"林一二\" \"https://onetwo.ren/wiki/#%E6%9E%97%E4%B8%80%E4%BA%8C\">>\n230 characters   "},{"title":"tobibeer/convertable.js","text":"/*\\\ntitle: $:/plugins/tobibeer/convertable.js\ntype: application/javascript\nmodule-type: widget\ncreated: 20160827150245119\ncreator: Tobias Beer\nmodified: 20160915191750302\nmodifier: Tobias Beer\n\n\nA widget to convert a pasted excel or google spreadsheet to a tiddlywiki table.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ConvertableWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\nConvertableWidget.prototype = new Widget();\n\nConvertableWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tvar textNode = this.document.createElement(\"textarea\"),\n\t\tbuttonNode = this.document.createElement(\"button\");\n\ttextNode.style.width = \"100%\";\n\tbuttonNode.style.clear = \"left\";\n\tbuttonNode.innerHTML=\"Convert to Wikitext\";\n\tbuttonNode.addEventListener(\"click\",function (event) {\n\t\ttextNode.value = textNode.value.replace(/^|$|\\t/gm, '|');\n\t});\n\ttextNode.value = this.getAttribute(\"text\") || \"\";\n\tthis.domNodes.push(textNode);\n\tparent.insertBefore(textNode,nextSibling);\n\tthis.domNodes.push(buttonNode);\n\tparent.insertBefore(buttonNode,nextSibling);\n};\n\nConvertableWidget.prototype.refresh = function(changedTiddlers) {\n\treturn false;\n};\n\nexports.convertable = ConvertableWidget;\n\n})();","type":"application/javascript","module-type":"widget","created":"20221127113106884","creator":"WhiteFall","modified":"20221127114106874","modifier":"WhiteFall","tags":"CSV表格->WikiText表格"},{"title":"Tooltips悬浮工具提示","created":"20230505125155517","creator":"WhiteFall","modified":"20230516132725518","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"【卡片集】\n\n* Author：https://tooltips.tiddlyhost.com/\n* 描述：悬浮工具提示，拖动[[balloon.css]]到你的wiki导入，并为此条目添加`$:/tags/Stylesheet`标签即可全局使用。\n* 文档和例子：https://tooltips.tiddlyhost.com/\n\n\nFor details on how use the balloon.css see the original repo\n\n* demo: https://kazzkiq.github.io/balloon.css/\n* code: https://github.com/kazzkiq/balloon.css\n\n\n```\n条目标题：balloon.css（任意）\n标签：$:/tags/Stylesheet\n条目类型：text/css\n```\n\n\n单功能条目卡片内容：\n\n<$let selected-tiddler=\"balloon.css\">\n\t<$macrocall $name=\"code\" language={{{[<selected-tiddler>get[type]]}}} src={{{[<selected-tiddler>get[text]]}}} caption={{{[<selected-tiddler>get[title]]}}} />\n</$let>"},{"title":"TTS-button","caption":"语音按钮","code-body":"yes","condition":"[<targetTiddler>tag[?]]","created":"20230522154822142","creator":"马不前","description":"用来添加语音题","icon":"$:/images/forge-icons/play","modified":"20230522155050355","modifier":"马不前","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n    $message=\"tm-edit-text-operation\"\n    $param=\"wrap-selection\"\n    prefix=\"<<?tts \"\n    suffix=\">>\"\n/>"},{"title":"TTS宏","created":"20230522153025442","creator":"马不前","modified":"20230522154454047","modifier":"马不前","tags":"$:/tags/Macro","type":"text/vnd.tiddlywiki","text":"\\define ?tts(content)\n\\whitespace trim\n\n<$button class=<<tv-config-toolbar-class>>>\n  {{$:/images/forge-icons/play}}\n  <$speech-synthesis text=\"$content$\" />\n</$button>\n\\end\n\n<<?tts \"test\">>\n"},{"title":"TW-Commander：批量操作条目","created":"20220331030124617","creator":"林一二","modified":"20230612093456725","modifier":"WhiteFall","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"太微中校是一个批量操作条目的工具。[[Github|https://github.com/kookma/TW-Commander]] [[文档|https://kookma.github.io/TW-Commander/]]\n\n!! 案例\n\n!!! 想问一下群里大佬一个问题，我要批量删除所有条目中的tmap.id这个属性该怎样做？\n\n<<<\n可以用 tw commander，配合 [all[tiddlers+shadows]has[tmap.id]] 筛选器 ，从字段里全部删除。\n<<<\n\n!!! 有没有办法给所有的tiddler批量添加标签，或者在筛选中选择添加？\n\n<<<\n可以用 tw commander，配合筛选器 ，然后使用 add tag 功能。\n<<<\n"},{"title":"TW-Locator","created":"20211003071706230","creator":"林一二","modified":"20231101091424649","modifier":"马不前","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"Locator 插件平时主要就是使用两点，往文件夹里放文件、展示文件夹树：\n\n!! 往文件夹里放文件\n\n使用笔记 A 顶部的 {{$:/core/images/new-here-button}} {{$:/language/Buttons/NewHere/Caption}} 按钮来创建新笔记，等价于把笔记 A 看做文件夹，然后往里面放入新建的笔记。\n\n你可以现在就使用当前笔记上的 {{$:/core/images/new-here-button}} 来尝试一下！\n\n其原理就是给新的笔记加上一个标签，标签内容是笔记 A 的标题，所以给一篇别的笔记加上一个和笔记 A 的标题一样的标签，也可以把那篇笔记放入笔记 A 这个文件夹里。\n\n!! 展示文件夹树\n\n主要是用了 `locator-view` 这个宏，它会给出以 `baseTitle` 这个笔记作为根文件夹的子文件夹树。\n\n详见[[TW-Locator例子：当前知识库的目录]]\n\n但这个插件会造成卡顿，所以现在不推荐使用这个插件。"},{"title":"TW-Locator例子：当前知识库的目录","created":"20211003071732972","creator":"林一二","modified":"20211003071932534","modifier":"林一二","tags":"TW-Locator","type":"text/vnd.tiddlywiki","text":"```html\n<$macrocall $name=\"locator-view\" baseTitle=欢迎来到太微！ />\n```\n\n<$macrocall $name=\"locator-view\" baseTitle=欢迎来到太微！ />"},{"title":"TW-MobiLe-Sync手机tiddloid移动端同步TidGi桌面端插件","created":"20220820082612147","creator":"林一二","modified":"20230825040602923","modifier":"林一二","tags":"插件使用","type":"text/vnd.tiddlywiki","text":"本插件可以让你在基于NodeJS技术的桌面应用（例如太记）和基于HTML文件的手机端（例如Tiddloid安卓应用）之间同步数据。\n\n手机应用 ↔ 桌面应用 ↔ 云端\n\n相关资源：\n\n* 喜欢视频版可以看林一二录制的[[B站视频教程|https://www.bilibili.com/video/BV1Wg411r7Yu/?spm_id_from=333.999.0.0]]。\n** 注意看评论区有没有更新的建议\n* [[代码仓库|https://github.com/tiddly-gittly/tw-mobile-sync]]，有bug来这里提issue。\n\n!! 安装\n\n# 通过[[CPL|安装CPL插件源]]搜索 `tw-mobile-sync` 安装此插件（名字可能为「Mobile NodeJS Sync」）。\n# 还有通过官方插件源搜索 `qrcode` 安装 QRCode 插件（二维码插件）。\n\n（建议在安装好后，打开插件看这个插件的Readme，以查看最新的使用方式和相关链接）\n\n!! 使用方式\n\n# 首先在太记上[[太记开启服务器和API]]，这样才能在浏览器上访问太记的信息\n# 手机端扫码，在浏览器打开当前这个知识库的网页\n# ''使用浏览器的分享功能''，将这个网页分享给 Tiddloid 应用\n## 使用分享功能创建 wiki，需要保证 Tiddloid 里没有设置过默认 wiki\n### 通过在 Tiddloid 的 wiki 列表页面，长按某个 wiki 弹出设置窗口，可以设置默认 wiki\n### 在有默认wiki的情况，从其它 app 例如网页分享的内容，就会变成新条目插入剪藏进 wiki 去了，例如分享网页就会创建新条目把分享的网址插进默认wiki里面\n## 如果分享功能导致报错，可以试着保存出 HTML 文件后（详见中文教程的[[如何保存|https://tw-cn.netlify.app/#TiddlyGit%E5%A4%AA%E8%AE%B0]]章节），在 Tiddloid 里打开保存的 HTML 文件\n### （可能需要先将文件移出下载目录不然Tiddloid无权限访问，详见其[[说明书|https://github.com/donmor/Tiddloid]]）。\n### 有些 wiki 用这种方式保存会导致后续保存 wiki 时报错，所以建议还是先尝试直接分享的方式\n\n这时你应该已经创建好 wiki 并打开它了。\n\n然后打开[[服务器列表|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]]，录入一下服务器地址：\n\n# 将上面扫码得到的 URL 复制一下，填入[[服务器列表|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]]里的「智能识别黏贴框」\n## 你也可以点击「扫二维码」按钮开始扫码，扫码结果会自动填入「智能识别黏贴框」内\n# 然后点击「智能识别」按钮，会自动将 URL 解析后填入相应框内。\n# 此时，「服务器IP」和「服务器端口」框里应该要已经填好了 ip 和端口号\n# 你需要填写一下「服务器名」这个框\n# 点击「新增服务器」，会新建一个服务器信息条目，请确认创建此条目\n# 这时新的服务器应该就出现在服务器列表里了，你可以点击「启用同步并立即同步」按钮，这样就可以在桌面端和手机端同步数据了\n# 之后会每五分钟自动同步一次用户创建的条目（不包含插件），如果需要从桌面端同步插件到手机端，需要使用「[[拉取并覆盖|$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml]]」功能\n\n!! FAQ 常见问题\n\n!!! 在外面用了一天之后回家添加服务器，却无法同步到电脑端\n\n就是因为你新添加服务器后，它只会同步新建服务器之后新建的条目。''这是又因为新建服务器时会根据当前时间添加一个 lastSync 字段，目前在点击同步按钮时，只会同步这个时间点之后的内容。你可以手动把服务器条目里这个字段的时间改早一天，这样就会同步你今天添加的内容了。''未来我们将会添加更智能的同步方式，就不再需要这个字段了，就不会遇到这个问题了。\n\n!!! 提醒请设置默认wiki\n\n没有默认wiki的情况，via 浏览器会提醒请设置默认wiki，不会打开wiki。别的浏览器则可以通过分享直接创建wiki。"},{"title":"TW-PUB","created":"20220504110544066","creator":"林一二","modified":"20230829053251819","modifier":"马不前","tags":"资源链接","type":"text/vnd.tiddlywiki","text":"这是目前在太微里导入epub图书最简单有效的方法。把epub转换成twpub，目前也有直接的转换工具。\n\n! 资源站\n\n* [[墨屉共享书库|https://twpub-book.netlify.app/]]\n* [[代码仓库|https://github.com/Zacharia2/TWPUB-BOOK]]\n* [[转换工具|https://github.com/tiddly-gittly/Epub2twpub]]"},{"title":"TWPUB格式书籍CSS样式表","created":"20230505120426195","creator":"WhiteFall","modified":"20230516132221862","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"新建条目：''Stylesheet_TWpubCSS''（任意条目名），订上`$:/tags/Stylesheet`标签，条目内容为下面CSS样式、条目类型为`text/css`。\n\n```css\n[id^=\"$:/plugins/twpub/\"] {\n    FONT-FAMILY: 霞鹜文楷, 宋体;\n    FONT-SIZE: 13pt;\n    line-height: 1.5;\n    /* 行间距 */\n    text-indent: 2em;\n    /* 首行缩进2字符 */\n}\n```"},{"title":"TypeError: value.toString is not a function","created":"20230318034954369","creator":"马不前","modified":"20230318035913205","modifier":"马不前","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"TypeError: value.toString is not a function\n\nTW5-CodeMirror-Enhanced有时会出现上面的报错情况。会导致无法下载离线html版本。可以删除`$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json`文件，然后重启。单文件版本也是删除这个条目。\n\n具体可参考这个[[issue|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced/issues/31]]。"},{"title":"TypeScript类型定义","created":"20220527054121764","creator":"林一二","modified":"20220527054136363","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"[[TW5-Typed|https://github.com/tiddly-gittly/TW5-Typed]]"},{"title":"undefined widget xxx","created":"20230227022021083","creator":"林一二","modified":"20230228031008180","modifier":"林一二","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"例如 `undefined widget 'dynannotate'`\n\n*常见原因\n\n没有从 [[CPL|安装CPL插件源]] 安装插件，而是自己通过拖动等方式安装，容易出现这个问题。\n\n从 CPL 安装你刚装的插件一般就能解决，而且一劳永逸，以后不容易再出现这个问题。\n\n*根本原因\n\n有一个提供 xxx （例如例子里的 dynannotate） [[微件]] 的插件没有安装。\n\n可以去 CPL 搜索这个 xxx （例如例子里的 dynannotate），来补充安装。如果 CPL 里没搜到，就到[[官方插件源|使用插件源]]去安装。"},{"title":"WhiteFall","created":"20221222084504081","creator":"WhiteFall","modified":"20230912050105159","modifier":"WhiteFall","type":"text/vnd.tiddlywiki","text":"WhiteFall 中文译名白秋，取至秋之白之意。\n\n源于诗鬼李贺《南山田中行》中的“秋野明，秋风白”半句。古人以白色象征秋。秋风又称素风，素的意思是白。\n\n英文环境下，外国人直接看英语也能感受出意思，白色的飘下，感觉也挺有意境的，象征纯洁。犹如羽毛从天而下。\n\n我的GitHub主页：https://github.com/Zacharia2\n\n[[我的语义空间实验室 built by GrowthK2S|https://zacharia2.github.io/T2NLC-PubWiki/]]"},{"title":"Wiki编程的定义","class":"autonumhead","created":"20230809234409764","creator":"WhiteFall","modified":"20231001134023220","modifier":"WhiteFall","tags":"插件开发","text":"!! 编程定义 \n\n> \"编程\"是我们为了完成某项任务，将解决问题的步骤，用计算机能够理解的语言写成指令，这就是\"编程\"。而后，计算机会根据这些指令一步步执行，最后完成任务。\n\n\"编程\"涉及到3个组成部分：\n\n# 我们，负责思考解决问题的步骤\n# 我们，负责使用计算机能够理解的语言，来描述解决的步骤\n# 计算机，负责执行这些步骤\n\n!! Wiki编程定义\n\n什么是Wiki编程？（解释）\n\n得益于三种两大类（编译和笔记）的维基文本解析器模式，以及部分Wiki解析语法，使得条目不仅可以用于写作还可以用于Wiki编程。Wiki编程是在条目中进行定义、调用不同形式封装或定义的方法和变量，为了完成某种任务，将解决问题的步骤写成指令，使TiddlyWiki根据这些指令一步步执行，最后完成任务。\n\n维基文本的可编程性，在维基文本中可实现功能。\n\n<<<\n\n开发框架/知识管理操作系统 > 插件开发 > wiki编程 > 笔记与写作。\n\n[[太微独特之处-技术部分]]、[[太微是开发框架/知识管理操作系统，不是笔记软件|太微与太记的区别]]\n\n机制（Mechanisms）：组成 TiddlyWiki 的内部机制。\n\n级联（Cascades）是用于构建和自定义 TiddlyWiki 用户界面的关键机制。\n\n<<<\n\ntree宏提供了一种Wiki编程参考。编辑器工具栏的文本片段snippet。似乎整个Wiki编程都围绕条目进行操作。之所以叫Wiki编程是因为，Wiki编程核心由js实现且降低了复杂度但又和平常的记录笔记相差较大，更类似一种功能实现，即它介于写作与编程语言之间，且偏向编程语言的方面。\n\nWiki编程核心是：小工具（Widget）[包含小工具消息（Messages）]、筛选器（Filters）、TiddlyWiki核心变量（包含于变量）、模块等，这些由TiddlyWiki提供的类API的工具或功能集。\n\n\n小工具消息乃由小工具生成，以回应用户的操作。消息具有一个 name、一个可选的主要 parameter，以及一个或多个可选的命名参数。这些消息沿着小工具树向上传播，在那里它们由上层小工具或核心本身处理。小工具消息通常是触发式的，这意味着常常有一个小工具生成，另一个小工具处理。或者任意方式生成，生成此小工具消息的小工具处理。\n\n\n!!! TW API & JS API\n\nTW API就是TiddlyWiki提供定义好的微件（也称元素小工具，类似HTML元素）、微件消息（由微件提供）、筛选器、进程（宏，JS宏）、函数、核心变量、变量（$set $let $vars），模块（JS代码定义好的JS模块类型），提供所有功能的全部定义。\n\nJS API就是TiddlyWiki JavaScript源代码级别的编程调用。\n\n!!!! 使用范围\n\n* 微件：wiki\n* 微件消息：js，wiki\n* 筛选器：js、wiki\n* 进程：wiki\n* 函数：wiki\n* 核心变量：js、wiki\n* 模块（JS模块类型）：js，wiki\n\n同一个方法在不同的方法实现（微件、筛选器、JS等等）中可能有相同的功能。比如获取条目内容，你可以使用筛选器的`[[tiddlerTitle]text[]]`，也可以使用js的`$tw.wiki.getTiddlerText(title)`。\n\n微件是wiki编程的核心部分，它几乎独立与JS/TS编程部分，且自给自足，更像是一个服务于wiki和写作的编程语言。所以关于UI和视图的部分可以大胆交给它完成。你可以使用html和元素小工具混用，并使用相应功能的元素小工具替代html标签。比如button可以使用button微件代替、img可以使用image微件代替、input可以使用[[定义输入框与变量]]描述的代替等等。微件的目标结果感觉是视图。\n\n若想要引入JS编程，模块（JS模块类型）是最好的选择，其中macro和widget两种JavaScript模块类型可以直接在条目中调用。最终无论如何，都是在条目中编程和调用。\n\n!!! 方法\n\n> Wiki编程中的方法有以下几种形式：进程（宏）、微件、函数\n\n运用维基文本解析器有三种模式的其中一种：Pragmas（编译指示）在维基文本（条目）中定义不同形式的方法，提供对剩余文本解析方式的控制。也可以使用【模块】使用JavaScript实现对微件、宏模块类型的定义并在维基文本中调用。\n\n剩余的两种解析器模式都是笔记的解析渲染和正常显示。\n\n```tw\nPragma: \\define\nPragma: \\function\nPragma: \\import\nPragma: \\parameters\nPragma: \\procedure\nPragma: \\rules\nPragma: \\whitespace\nPragma: \\widget\n```\n\n进程（Procedures），可以接受参数变量。不同位置，变量是引用方式不一样。你可以使用小工具定义变量。也可以在某个小工具添加属性导出变量。在方法体中，你可以使用小工具、筛选器、小工具消息、变量进行一系列动作。\n\n筛选器作用于所有条目的所有字段，它是对条目字段进行操作的方法。或者说访问并操作所有条目字段数据的函数。TiddlyWiki提供一种方法，查找哪些条目符合给定的模型。条目或数据条目作为原始数据集，函数、筛选器作为原始数据集的函数处理和筛选工具。\n\n定义函数，函数在TiddlyWiki中被定义为包含筛选器表达式的命名文本片段。函数可以具有命名参数，这些参数在函数内当作变量使用。感觉基本上是操作条目的各个字段，对字段内容进行增查删改。然后输出一组内容，表现形式为编程语言中的列表类型。\n\n元素微件`<$name>`，双尖括号`<<name>>`是两类基本的调用方式。且似乎只能在条目中调用  \n其中元素微件实现Wiki（条目）编程中对逻辑的控制。双尖括号`<<name>>`可以调用进程、自定义小工具、函数、宏。\n所以若使用js语言，则一般用js定义这两类基本调用方式，然后再在条目中调用。\n\n比如定义微件，在微件中初始化类，在类中设置wiki事件监听器，通过事件触发。\n\n调用变量的行为取决于变量的声明方式。\n\n!!! 变量\n\n变量的定义（待修改）：变量是一个文本片段，可以通过名称访问。该文本称为变量的值。变量由小工具定义。几个内核小工具定义了变量，最常见的是 $set、$let 和 $list 小工具。\n\n# 过程的参数\n# 进程（宏）\n# 变量微件（$set、$let、$vars）\n# 函数\n# 核心变量\n\n“TiddlyWiki核心变量”，这些变量是由TiddlyWiki提供好的，具有特殊功能，可以直接引用的。比如currentTiddler核心变量：`<$view tiddler=<<currentTiddler>> field=title/>`。\n\nJavaScript变量与变量类型：\n\nJS变量是用于存储信息的“容器”。\n\n# 基本类型（值类型）：字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol\n# 对象类型（引用数据类型）：对象（Object）、数组（Array）、函数（Function）、正则（RegExp）、日期（Date）。\n\n其中对象可以看做字典的键值对或JSON，数组可以看做列表。TW中常常采用者两种数据结构，比如条目和`<$list>`元素微件。\n\n!!! 定义\n\n# 可以作为变量的过程定义：进程（宏、JS宏）、微件、函数；\n# 变量定义：$set、$let、$vars、核心变量；\n# 模块（JS模块类型）定义：包括所有TW API。例如：JS宏、微件、筛选器、通用模块等等\n\n> https://bramchen.github.io/tw5-docs/zh-Hans/#Variable%20Usage \n\n* [[定义微件和微件参数]]\n\n!!! 调用\n\n可以使用的调用：\n\n# 对条目与数据条目进行函数访问的筛选器\n# TW提供的或定义的过程（进程（宏）、微件、函数、小工具、小工具消息）和变量。\n\n!!! 逻辑\n\nWiki编程的逻辑运算是通过什么实现的？微件、条目和筛选器？\n\n!!! 视图\n\n\nTiddlyWiki 的显示是由一些底层的小工具驱动。这些小工具都组织成树状结构。小工具树是后续化为实际显示的中间表示。每个小工具的类别贡献一个特定功能，就像调用API一样。小工具提供 WikiText 更丰富的功能。它们与 HTML 元素 使用相同的标记方式，但是标记的名称前包含一个 $ 符号。小工具的属性因使用情景不同而被指定为多种不同形式。小工具是开始字符带有$符号，类似[[HTML|https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics]]文档中的元素标记，如`<$let><$let>`，使用这种标记生成专用的元素小工具。\n\n> 现在，它不再使用 jQuery 和 DOM，而是将维基文本wikitext解析为通用的树形格式，然后将其渲染为文本 HTML。——TiddlyWiki5的诞生！\n\n元素微件通常由 标记（tag）、属性（Attribute）、内容（Content）组成。可以将一个元素置于其他元素之中 —— 称作嵌套。通过指定标记和属性完成微件的方法调用，根据微件行为定义生成行为效果，若有返回值则并将返回值作用或传递到内容中，但微件内容也可以作为一种数据输入，由微件进行处理。\n\n[[HVML|https://hvml.fmsoft.cn/zh]]是一种可编程标记语言，与HTML文本标记语言相比，多了逻辑或算法。元素微件和可编程标记语言的定义比较相似。\n\n```html\n<$set name=\"greeting\" value=\"Hi\">\n\t<$set name=\"me\" value={{!!title}}>\n\t\t<$set name=\"sentence\" value=\"helloworld\" >\n\t\t\t<<greeting>>! I am <<me>> and I say: <<sentence>>\n\t\t</$set>\n\t</$set>\n</$set>\n```\n\n!!! 调试\n\naction-log、log小工具、[[调试筛选器]]\n\n!!! 模块\n\n> 为Wiki编程工具封装JS代码。\n\n一个 TiddlyWiki5 的 模块 是包含可运行 JavaScript 的条目，其类型为`application/javascript`且其`modeule-type`字段为该模块的[[模块类型|$:/core/ui/ControlPanel/LoadedModules]]\n\n!!! 条目\n\n# 数据条目\n## 字典条目\n## JSON条目\n\n# 系统条目\n## 插件（条目组）\n## 默认条目\n## 模板条目\n## 样式条目\n## 配置条目\n## 调色板条目\n\n# 普通条目\n\n!!! 字符串\n\nJavaScript 模板字符串，模板字面量 是允许嵌入表达式的字符串字面量。在WIKI中使用【替换的属性值】实现这种方式。\n\n```\nJS使用 `this is ${foo} value` 实现，\nwiki中使用 `this is $(varname)$ and ${ filter expression }$` 实现。\n```\n拼接（连接、串联）文本和变量：在JS中通常使用 '+' 符号实现。在WIKI中，【使用宏替换串联文本和变量】，在5.3.0版本中使用【替换属性值】或【替换筛选器表达式子】来连接文本和变量。\n\n\n"},{"title":"Wiki书写文本的解析器模式","created":"20220827120659198","creator":"Miao","modified":"20230603023146332","modifier":"马不前","tags":"高级知识","type":"text/vnd.tiddlywiki","text":"为了显示条目（通常是 `text` 字段，即条目内容），Wiki文本解析器有三种模式，对条目内容（ `text` 字段）中的wiki文本符号，应用维基文本规则读取和解释内容。\n\n比如【''加粗''、__下划线__】（文本格式）就是内联模式，书写的时候对应使用内联模式的书写规则。【标题】属于区块模式，书写时应该对应使用区块模式的书写规则。只有这样书写的文本才能被正确的显示，你可以理解为''书写规则''。\n\n* ''编译指示模式'' - 解析器将仅识别`编译指示模式维基文本`符号\n* ''区块模式'' - 解析器将仅识别`区块模式维基文本`符号\n* ''内联模式'' - 解析器将仅识别`内联模式维基文本`\n\n> 此条目仅做简要介绍，更详细的描述请查看TiddlyWiki舞中文文档：https://bramchen.github.io/tw5-docs/zh-Hans/#WikiText%20Parser%20Modes\n\n\n\n\n!! 区块解析器模式\n\n# 区块模式维基文本的共同特征：至少需要一整行来分隔维基文本。结束符号必须位于行的末尾（在某些情况下，行尾即是结束符号。)\n# 属于区块解析器模式的维基文本符号：标题、段落、表格、引言、硬式换行、水平分隔线、代码区块、定义、清单、样式及 CSS 类别、类型区块。\n# 维基文本符号例子说明：标题 ，文本符号`整行以 ! 开头的`\n\n\n!! 内联解析器模式\n\n# 这些维基文本类型，可以在没有整行文本的情况下表达。它们不需要全部在一行上，只是它们<<.em 可以>>在一行中表示。因此，单一行中可以出现多个。 换句话说，当解析器尝试查找特定维基文本的开始和结束位置时，不涉及行尾，当解析器处于内联模式时，它将识别这些维基文本类型的符号：\n# 属于内联解析器模式的维基文本符号：文本格式、破折号、图片、链接、嵌入、宏调用、小工具、样式及 CSS 类别、HTML、变量\n维基文本符号例子说明：文本格式中的加粗，文本符号 `'' 两个英文单引号' ''`\n\n\n\n!! 编译指示模式（不常用）\n\n# 编译指示是 WikiText 的一个特殊的组件，提供操控剩余的文本解析的方式。通常用于宏的定义。\n# 编译指示位于行首为`\\`，他们只能出现于内文的起始处，编译指示之间允许空白的行。如果编译指示出现在内文的主体，会被当作是普通的文本一样处理。\n# 常见的编译指示文本例如：`\\define`（定义一个宏）、`\\whitespace trim`（裁减文本的起始和结尾的空格）。\n\n"},{"title":"WikiText 和 MD 的写法","created":"20220108051123187","creator":"林一二","modified":"20220108095707954","modifier":"林一二","tags":"入门幻灯片","type":"text/vnd.tiddlywiki","text":"与维基百科等MediaWiki用的语法很类似，不过有些许不同，同时也借鉴了 MD 的很多语法。\n\n[[360评估生成器|https://onetwogen.netlify.app/?conf=%7B%22sub%22%3A%7B%22%E8%BF%99%E4%BA%BA%22%3A%22%E6%9E%97%E4%B8%80%E4%BA%8C%22%2C%22%E5%8F%AB%E5%95%A5%E9%A1%B9%E7%9B%AE%E7%9A%84%22%3A%22%E5%A4%AA%E5%BE%AE%E5%AE%A3%E8%AE%B2%22%7D%7D&tab=360%20%E8%AF%84%E4%BC%B0]]\n\n在刚开始没有''太微宣讲''的时候，林一二//洞察//到受众的需求~~一直没有~~被满足，\n\n[img[https://pic3.zhimg.com/v2-7300ac7943280841bc3d5b125e693593_xl.jpg]]\n\n!!! 林一二希望能做到行业领先水平，便带领着同事一起攻关（MD 里为 ###）\n\n<<<\n林一二快速 review 了''一下太微宣讲的方''案，快刀斩乱麻，制定了三步走计划，（MD 里为 >）\n\n林一二非常认真地和同事逐一核对细节，对可能出现问题的地方都做了记录，\n<<<\n\n# 在早期双月 OKR 中（MD 里为 1.）\n# 这太微宣讲一直是未能被很好解决的问题\n# 大家对这个项目并不是完全持乐观的态度\n\n* 即使在团队内，一开始对太微宣讲的前景并不是完全看好的 （MD 里为 -）\n* 甚至有同学直言这是一个重复造轮子的项目，但是林一二有自己独到的看法。"},{"title":"WikiText笔记与写作（进一步的可能）","created":"20230510094605285","creator":"WhiteFall","modified":"20230901070732363","modifier":"WhiteFall","tags":"任务 笔记思维","type":"text/vnd.tiddlywiki","text":"! WikiText笔记与写作\n\n什么是WikiText笔记与写作？\n\nWikiText写作是一种与非编程与设计的TiddlyWiki使用方式。基本要求是尽可能的为自己的内容服务，尽可能让使用的wikitext语法变得简洁易懂。花费最少的时间等等。核心要件是服务于写作。简而言之，用好软件和插件提供的功能与设置即可。对于一些非逻辑与代码方面的自定义包含在此列中。参考TiddlyWiki舞的自定义TiddlyWiki。\n\n\n!! 当工具的局限性消失后，你会用它做什么？\n\n> 有趣的回答是：实践数字花园。\n\n少一些代码和配置，多一些思考、内容、奇思妙想与关于笔记的使用方式，做笔记软件该做的事情。\n\n;葫芦12：\n:多方向尝试，不止解决学习问题，也可以尝试生活、管理方面，或者用自制的工作流去解决某一类问题。\n\n;林一二：\n:多记笔记，少折腾。\n\n\n\n---\n\n;太微中文教程的整理思路\n:难度等级分层与常用功能分层，常见或有趣简单的示例。\n:最大化的发挥作为wiki的优势，以期抵消劣势。削弱自定义功能工具的占比。\n:作为教程网站，我的感觉是得让人容易查找，看得明白，用的简单。结构清晰，内容难度上有明显的递进分层。这只是我的想法。简单的说，无论那个条目都有迹可循，维护起来也更方便。如果想要热起来，这些（优化教程结构，突出亮点）或许是必要的工作。\n:参考kookma教程的编写规范，我挺佩服他的教程，教科书级别\n\n重要的是别跳步，要把我当成傻瓜来教。\n\n---\n\n!! 太微的核心竞争力：组织信息的方式。\n\n太微的核心竞争力，不能只是开源免费，本地保存以及自定义。\n\n我喜欢太微的是作为笔记部分的【条目数据结构】和【筛选器】。简言之，我认为，越靠近内容，越是内容软件围绕的重点和核心竞争力。\n\n> 写作（内容，实干）和折腾软件（准备工作）的时间占比。这似乎是一个比较重要的比率。\n\n我觉得软件是用来简化或解决问题的，至少是内容的载体。就像李宽说的“不学就会一用就爽”的软件是啥？\n\n我们目前之所以自定义是因为某物目前的不足，跟不上现代软件的友好性，我们才自定义的。自定义应该是有良好的友好性后的锦上添花。\n对于软件来说，友好性，上手使用不需要自定义、使用方便省心就是好软件。就像word，obsidian，typora，印象笔记等等。原本这部分的内容就是由开发者团队科技公司负责的，不需要花很多精力就可以轻松使用它，若友好性的责任与需求由开发者团队维护变成个人维护，那我觉得这不是优势。优势应该是有良好的友好性和很容易上手使用后发现还可以自定义功能。（其实自定义的优势对开发者来说确实是一个很大的优势，但对于普通用户来说，蜀道难啊！）\n\n还记得我以前折腾手机是因为手机的性能不好，各个方面都不充足，不好用。但是现在我基本很少折腾手机了，因为他让我感受已经很足够用。而且没有阻碍。当然现在也有人继续折腾手机，这是他们的兴趣或者别的方面。大概在软件初期大概都会面临【友好和易用性】的问题吧。安卓也是。太微也不例外。但可以慢慢发展插件或者核心，又或者太记逐渐弥补。Linux早期不也是这样嘛？哈哈。\n\n\n---\n;WhiteFall\n:一个小问题，假设你拿到了完整的你心目中理想的TiddlyWiki，你该如何用他进行创作或最大化的发挥它的优势？\n\n:今天在上软件课的时候，我发现面对一个近乎完美的软件系统，不需要我做任何安装插件，自定义功能的额外操作。我感到悠闲和不知该做什么。虽然这个软件很复杂，有很多需要我学习的。\n\n:所以，如果太记是一个接近完美的发行软件应用，也是接近大家理想的TiddlyWiki。会不会产生许多奇妙的火花呢？\n\n;平凡之路\n:完美就和地平线一样，永远在前面永远走不到。\n\n;WhiteFall\n:是的，只是上软件课时感受到的。这个软件（上课学的软件）就挺完美的，对我来说并不一定解决了某个问题才可以前进。\n\n;平凡之路\n:感觉有时候，工具太繁琐反而会盖掉最初用软件的心思。我自己觉得发展性的工具 就是比较适合的工具 可能就是你说的完美型工具吧，工具本身能和使用者一起成长\n\n\n;葫芦12\n:但人的需求依旧是复杂的多变的，依旧会做一点折腾。\n\n;WhiteFall @ 葫芦12 \n:这个确实，但我想更进一步，先做个假设完美，然后天马行空和想象一下完美之后的事情。\n\n;tomzheng \n:完美软件就是用什么功能就有什么功能。那就学习和使用就行了。用到什么学什么。orgmode和emacs就是这样的软件。\n\n\n;V先生 @WhiteFall \n\n> 一个小问题，假设你拿到了完整的你心目中理想的TiddlyWiki，你该如何用他进行创作或最大化的发挥它的优势？\n\n:这是个好问题\n\n:对于这个问题，首先可能得把问题中的”TiddlyWiki”换成“知识管理工具”一词，不预设它是TiddlyWiki，而是让各人描述自己理想中的知识管理工具是什么样子的，这其实就是在澄清各人自己的需求。越了解自己的需求，也就越清楚需要什么样的工具。这是回答why（为什么需要一款完美的知识管理工具）。\n\n:接下来是定义“完美”，对于自己设想的完美的知识管理工具，怎么理解这个完美，或者说，用哪几条标准来判断它是否完美。如果没有明确的标准，那说明完美还仅仅是一种模糊的期待，而不是明确的标准。有了标准，才好拿标准去选择工具。而很多时候，我们不知道怎么选，就是因为没有明确自己的标准。这个回答what（完美是什么，完美的判断标准是什么）。\n\n:再接下来就是拿这款知识管理工具去做什么。这个涉及到知识管理的全流程，流程上的场景，每个场景里的动作。这个回答how。\n\n:最后是经过知识管理全流程，输出哪几个东西（或者叫作品、成果），每个东西给谁（阅读/使用）的。这个回答who。\n\n\n;V先生：\n\n:界面漂亮不一定是最好，太多的修饰反而会干扰人的注意力。\n\n:界面极简不一定是最好，为了极简而极简，却在该突出强调的地方没修饰，影响效率。\n\n:功能强不一定是最好，强大却用不到，反而成了累赘。\n\n:功能多不一定是最好，一堆功能的无序堆砌，反而带来混乱。\n\n:最好的工具是一切都刚刚好，增一分则嫌多，减一分则嫌少。\n\n:最好的工具是让人最有欲望打开它、使用它，甚至连欲望都谈不上，而且成为习惯，习惯成自然。\n\n:当它一切都刚刚好，我们会忘记它；而当我们注意到它，往往是它出了问题。正如牙齿帮我们咀嚼，但平时我们忘记牙齿，只有在牙痛的时候才会记起它，记起它，就是因为它出问题了。\n\n:最好的工具，就是让人忘记这个工具，沉浸在自己所做的事情中。\n\n:正如《道德经》里面的一段话所说：\n\n:太上，人不知有之；其次，亲而誉之；其次，畏之；其次，侮之。信不足焉，有不信焉。悠兮，其贵言。功成事遂，百姓皆谓我自然。\n\n\n;V先生 14:27:30\n:微软记事本可能就属于“人不知有之”，都在用它打开txt，却并没意识到这也是一款软件；\n\n:Obsidian与Notion目前在市面上就是“亲而誉之”，大家都在夸它好；\n\n:Emacs就是“畏之”，甚至连好多程序员都觉得头大；\n\n:印象笔记现在已经是“侮之”，在笔记软件对比帖子里，都要拉出来骂几句。\n\n;V先生 14:29:06\n:TiddlyWiki 目前属于一小众喜欢的人“亲而誉之”，大多数人“畏之”，基本没见到“侮之”的。\n\n\n!! 到底怎样才能把TW的使用难度降下？或者说把学习成本降下来?\n\n;V先生\n\n我认为是：有所取舍\n\n插件上预装什么，不预装什么\n\n界面上显示什么，隐藏什么\n\n应用上擅长做什么，不擅长做什么\n\n工作流上建议和什么工具搭配，不建议和什么工具搭配\n\n用户上适合给谁用，不适合给谁用\n\n教程上讲什么，不讲什么\n\n宣传上突出什么，不突出什么\n\n舍掉一些，然后专注做好留下的部分\n\n\n!! 书写和管理和组织条目？\n\n关键词：使用频次、常用、管理、书写，专注内容\n\n* ''像obsidian官方默认教程一样，描述ob的用法。''\n\nhttps://help.obsidian.md/Home\n\nhttps://publish.obsidian.md/help-zh/\n\n\n* ''满足基本的书写需求，然后尽情的创作就可以了。''\n\n\n如何满足普通的类似md、latex、word的书写效果？类似obsidian官方教程的md文档的用例文档？对使用难度和常用程度进行分层。\n\n人们大概也就需要这两种基本诉求，写东西，简单快捷的写东西，最好写出来好看，对于tw来说，不仅仅是写的时候，显示的时候同样也要优雅。\n\n另一种诉求就是管理或组织条目，仅有输入还不够，任何软件都可以输入，有的软件输入让人很愉快，显然tw的输入并不比word更让人愉快。与md比，感觉类似，但编辑器却比md的众多编辑器差许多。不仅要输入，还有管理和组织——如何快速检索？如何把条目们按一定逻辑和顺序组织起来，如何。。。这依然是重点。最后的环节，输出，若没猜错，前两个输入与组织管理做的好，输出自然而然的水到渠成。\n\n是否要收集足够数量的常用或使用频次较高的普通文本的书写样例？让显示或书写的内容看起来更有趣好看，容易分辨。更加富有趣味。\n\n是否要收集常用或使用频次较高的、整理固化更多的检索方式？组织管理方式？减少重复解决某一个问题的时间和精力，把精力全部运用在对他自己所创造内容的关注上？\n\n"},{"title":"WikiText发送消息给JavaScript","created":"20211004043451171","creator":"林一二","modified":"20211004050757541","modifier":"林一二","tags":"WikiText与JavaScript的交互","type":"text/vnd.tiddlywiki","text":"!! JS侧注册消息\n\n```js\n\ninterface IEvent {\n\twidget: TWWidget;\n\t/** 也就是 addEventListener 的第一个字段 */\n\ttype: string;\n\t/** 可以随意带上别的信息 */\n\t[others: string]: unknown;\n}\n\n// @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\n$tw.rootWidget.addEventListener('open-command-palette', (e: IEvent) => this.openPalette(e));\n```\n\n这是注册一个事件名到 [[widgets/widget.js Widget.prototype.addEventListener|https://github.com/Jermolene/TiddlyWiki5/blob/3094e062366830bdecfb91e3d852667fa951dc50/core/modules/widgets/widget.js#L439]] 上。\n\n根据 [[widgets/widget.js Widget.prototype.dispatchEvent|https://github.com/Jermolene/TiddlyWiki5/blob/3094e062366830bdecfb91e3d852667fa951dc50/core/modules/widgets/widget.js#L455]]，这个 event 可以不是继承自其它 JS 事件，而只是需要有一些特定的字段即可。\n\n其余字段如 `param` 的来源可见 [[widgets/action-sendmessage.js SendMessageWidget.prototype.invokeAction|https://github.com/Jermolene/TiddlyWiki5/blob/ac022ec79f05715f62fd8382ebb6b49cd1c8f960/core/modules/widgets/action-sendmessage.js#L76]]。\n\n!! WikiText侧发送消息\n\n```html\n<$action-sendmessage $message=\"open-command-palette\" $param=\">\"/>\n```\n\n`param` 会被 `SendMessageWidget.prototype.invokeAction` 放入 event 里。\n\n!!! 用快捷键发送消息\n\n```tw\nkey: ((open-command-palette-command-mode))\ntags: $:/tags/KeyboardShortcut\ntitle: $:/plugins/linonetwo/commandpalette/CommandPaletteCommandMode\ntype: text/vnd.tiddlywiki\n\n<$action-sendmessage $message=\"open-command-palette\" $param=\">\"/>\n```\n\n```tw\ntitle: $:/config/shortcuts/open-command-palette-command-mode\ntype: text/vnd.tiddlywiki\n\nctrl-shift-P\n```\n\n```tw\ntags:\ntitle: $:/config/ShortcutInfo/open-command-palette-command-mode\ntype: text/vnd.tiddlywiki\n\nOpen the command palette in command mode\n```\n"},{"title":"WikiText扩展语法","created":"20231029091341176","creator":"WhiteFall","modified":"20231030044249804","modifier":"WhiteFall","tags":"基础知识","text":"!! Callout（标注）\n* shiraz-callout 插件\n* https://kookma.github.io/TW-Shiraz/shiraz-callout.html\n\n用法：\n\n```\n<<callout info Title src:\"\"\"\n\n这里可以嵌套Callout或使用wikitext语法。\n<<callout danger src:\"I am the first child here.\" status:open>>\n<<callout quote src:\"Hi Mohammad\">>\n\n\"\"\">>\n```\n\n!! TODO（代办）\n\n* 插件：tgrosinger/tw5-checklist、[[复选框或代办插件]]\n\n用法：\n\n```\n[ ] Milk\n[ ] Eggs\n[x] Bread\n```\n\n* 插件：Kara Plugin，基于宏调用的、[[复选框或代办插件]]\n\n用法：\n\n```\n<<checklist>>\n\n保存条目后然后就会显示一个交互UI，点击操作UI就可以动态修改添加任务列表。\n```\n\n!! hard（硬换行）\n\n* 插件：WikiText的Markdown风格硬换行符：[[Space Space Newline|https://wikilabs.github.io/editions/space-space-newline/]]\n* Space Space Newline插件，添加了一条 wikitext 规则，使用 `<space><space><newLine>` 或 `<space><space><backslash>` 创建硬换行符\n\n用法：\n\n```\n该行末尾有 2 个空格和 1 个换行符  \n因此，我们应该看到两行\n\n这一行的末尾有 2 个空格和一个 \\\n因此，我们应该看到两行\n\n如果你想在这一行的末尾有一个可见的 \\   \n您需要在行尾添加 2 个空格\n```\n\n!! comments（注释）\n\n用法：\n\n```\n<!--这是单行注释-->\n<!--\n    这是多行注释\n    这是多行注释\n    这是多行注释\n-->\n```"},{"title":"WikiText与JavaScript的交互","created":"20211004042538738","creator":"林一二","modified":"20211004050940747","modifier":"林一二","tags":"插件开发","type":"text/vnd.tiddlywiki","text":"一般是通过写 Widget、注册事件两种方式来从 JS 给 WikiText 提供能力，然后用户写 WikiText 的时候就能使用 Widget、发送消息来触发 JS 执行。"},{"title":"XMLHttpRequest错误代码:403","created":"20221216000323281","creator":"WhiteFall","modified":"20221216000900546","modifier":"WhiteFall","tags":"排查问题","type":"text/vnd.tiddlywiki","text":"保存时，发生错误。XMLHttpRequest错误代码: 403\n\n查看Web开发者工具-控制台发现有这条异常：\n\nFailed to load resource: the server responded with a status of 403 ()  api.github.com/repos...ntents/index.htm1:1 \n\n可能的原因，在保存里设置了github模块，没有删除取消掉。\n"},{"title":"zm","created":"20230506134054300","creator":"马不前","modified":"20230506134121691","modifier":"马不前","type":"text/vnd.tiddlywiki","text":"[[网站链接|https://jefftay.com/]]"},{"title":"zoomin视图下宽度保持一致","created":"20230524142250866","creator":"马不前","modified":"20230526021947079","modifier":"马不前","tags":"自定义样式修改类","type":"text/vnd.tiddlywiki","text":"有时zooming视图无法完全居中，左右两边宽距不一致。这种情况就可以把下面的代码复制到一个新条目里，并加上标签`$:/tags/Stylesheet`。\n\n```\nbody.tc-body .tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\n    width: 100%;\n    width: calc(100% - 0px);\n}\n```\n"}]